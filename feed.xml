<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/" rel="alternate" type="text/html" /><updated>2025-03-01T22:11:45+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/feed.xml</id><title type="html">Slience_me的博客</title><subtitle>slience_me的个人博客</subtitle><author><name>slience_me</name></author><entry><title type="html">服务器｜ElasticSearch</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/23/ElasticSearch/" rel="alternate" type="text/html" title="服务器｜ElasticSearch" /><published>2025-02-23T00:00:00+08:00</published><updated>2025-02-23T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/23/ElasticSearch</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/23/ElasticSearch/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="elasticsearch">ElasticSearch</h1>

<h2 id="1-安装">1. 安装</h2>

<p>见 <a href="https://slienceme.cn/2025/02/22/Docker/">我的博客(基于docker)</a></p>

<h2 id="2-初步检索">2. 初步检索</h2>

<h3 id="21-_cat">2.1 _cat</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /_cat/nodes: 查看所有节点信息
GET /_cat/health: 查看es健康状况
GET /_cat/master: 查看主节点
GET /_cat/indices: 查看所有索引 相当于 show databases<span class="p">;</span>
</code></pre></div></div>

<p><strong>注意：在Kibana里面, 应该删除我的全部代码里面的空行</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT customer/external/1  (这里不应该有空行, 由于md代码块json格式问题,我加了空行)
{
   "name" : "slience_me"  // 另外不要在这里面写注释(如果有需要删除)
}
</code></pre></div></div>

<h3 id="22-索引一个文档保存">2.2 索引一个文档（保存）</h3>

<p>保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识 PUT customer/external/1; 在customer索引下的external类型下保存1号数据为</p>

<p><strong>PUT带ID的请求</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># PUT /索引名称/类型名称/文档id
# PUT带ID的请求, 第一次created第二次updated. 
# _version会递增

PUT customer/external/1

# 请求体
{
   "name" : "slience_me"
}

// 返回结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 1,
    "result": "created",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 0,
    "_primary_term": 1
}
</code></pre></div></div>

<p><strong>POST请求</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># POST /索引名称/类型名称
# 每次产生不同的_id, 每次都是新增操作

PUT customer/external/

# 请求体
{
   "name" : "slience_me"
}

// 返回结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "orSiMJUBQDaJZs9shqQ4",
    "_version": 1,
    "result": "created",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 2,
    "_primary_term": 1
}
</code></pre></div></div>

<p><strong>情景总结：</strong></p>

<ul>
  <li>新增：不带ID/带ID但之前没有数据</li>
  <li>修改：带ID,之前有数据</li>
</ul>

<h3 id="23-查看文档">2.3 查看文档</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># GET /索引名称/类型名称/文档id
GET customer/external/1

# 返回结果
{
    "_index": "customer",//在哪个索引
    "_type": "external",//在哪个类型
    "_id": "1",//记录id
    "_version": 2,//版本号
    "_seq_no": 1,//并发控制字段，每次更新都会+1，用来做乐观锁
    "_primary_term": 1,//同上，主分片重新分配，如重启，就会变化
    "found": true,
    "_source": {
        "name": "slience_me"
    }
}
</code></pre></div></div>

<h4 id="并发案例">并发案例</h4>

<blockquote>
  <p>需求：将name更新为1</p>
</blockquote>

<p><strong>请求1</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 先进行读取
GET customer/external/1

{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 2,
    "_seq_no": 1,
    "_primary_term": 1,
    "found": true,
    "_source": {
        "name": "slience_me"
    }
}
# 得到 _seq_no=1&amp;_primary_term=1
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 准备修改请求
PUT customer/external/1?if_seq_no=1&amp;if_primary_term=1

{
    "name": "1"
}

// 结果(先完成PUT)
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 3,
    "result": "updated",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 5,
    "_primary_term": 1
}
</code></pre></div></div>

<p><strong>请求2</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 先进行读取
GET /customer/external/1

{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 2,
    "_seq_no": 1,
    "_primary_term": 1,
    "found": true,
    "_source": {
        "name": "slience_me"
    }
}
# 得到 _seq_no=1&amp;_primary_term=1
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 准备修改请求
PUT customer/external/1?if_seq_no=1&amp;if_primary_term=1

{
    "name": "2"
}

// 结果(后完成PUT)
{
    "error": {
        "root_cause": [
            {
                "type": "version_conflict_engine_exception",
                "reason": "[1]: version conflict, required seqNo [1], primary term [1]. current document has seqNo [5] and primary term [1]",
                "index_uuid": "FTPilr1qTP6Aw8yri6AakQ",
                "shard": "0",
                "index": "customer"
            }
        ],
        "type": "version_conflict_engine_exception",
        "reason": "[1]: version conflict, required seqNo [1], primary term [1]. current document has seqNo [5] and primary term [1]",
        "index_uuid": "FTPilr1qTP6Aw8yri6AakQ",
        "shard": "0",
        "index": "customer"
    },
    "status": 409
}
# 因此必须重新GET请求获取_seq_no=?&amp;_primary_term=?
# 重新发送PUT请求
# 只有请求前后_seq_no=?&amp;_primary_term=?值保持一致,才能完成PUT请求
</code></pre></div></div>

<h3 id="24-更新文档">2.4 更新文档</h3>

<h4 id="1带_update">（1）带_update</h4>

<p><strong>POST更新文档，带有_update</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 首次请求
POST customer/external/1/_update

{
    "doc": {
        "name": "2"
    }
}

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 4,
    "result": "updated",    # 更新成功
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 6,
    "_primary_term": 1
}
</code></pre></div></div>

<p>如果再次执行更新，则不执行任何操作，序列号也不发生变化</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 再次请求
POST customer/external/1/_update

{
    "doc": {
        "name": "2"
    }
}

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 4,
    "result": "noop",  # no operation, 不做任何操作
    "_shards": {
        "total": 0,
        "successful": 0,
        "failed": 0
    },
    "_seq_no": 6,
    "_primary_term": 1
}
</code></pre></div></div>

<p>总结：POST更新方式，会对比原来的数据，和原来的相同，则不执行任何操作（version和_seq_no）都不变。</p>

<h4 id="2不带_update">（2）不带_update</h4>

<p><strong>POST更新文档，不带_update</strong></p>

<p>如果再次执行更新，则再次执行更新操作，序列号也发生变化</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 首次再次请求
POST customer/external/1/

{
    "doc": {
        "name": "2"
    }
}

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 14, # 版本号增加
    "result": "updated",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 16, # 序列号增加
    "_primary_term": 1
}
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 15, # 版本号增加
    "result": "updated",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 17, # 序列号增加
    "_primary_term": 1
}
</code></pre></div></div>

<p>总结：在更新过程中，重复执行更新操作，数据也能够更新成功，不会和原来的数据进行对比。</p>

<h4 id="3更新同时增加属性">（3）更新同时增加属性</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT customer/external/1/

{
    "name": "2",
    "age": 18
}

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 16,
    "result": "updated",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 18,
    "_primary_term": 1
}
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 首次再次请求
POST customer/external/1/

{
    "doc": {
        "name": "2",
        "age": 18
    }
}

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 17,
    "result": "updated",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 19,
    "_primary_term": 1
}
</code></pre></div></div>

<p>总结：PUT和POST不带_update都可以</p>

<h3 id="25-删除文档索引">2.5 删除文档&amp;索引</h3>

<blockquote>
  <p>elasticsearch并没有提供删除类型的操作，只提供了删除索引和文档的操作。</p>
</blockquote>

<p>实例：删除id=1的数据，删除后继续查询</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE customer/external/1/

// 结果
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "_version": 18,
    "result": "deleted", # 删除成功
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "_seq_no": 20,
    "_primary_term": 1
}
# 再次查询
{
    "_index": "customer",
    "_type": "external",
    "_id": "1",
    "found": false
}
</code></pre></div></div>

<p>实例：删除整个costomer索引数据</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE customer/

// 结果
{
    "acknowledged": true
}
// 再次查询
GET customer/external/1/
{
    "error": {
        "root_cause": [
            {
                "type": "index_not_found_exception",
                "reason": "no such index [customer]",
                "resource.type": "index_expression",
                "resource.id": "customer",
                "index_uuid": "_na_",
                "index": "customer"
            }
        ],
        "type": "index_not_found_exception",
        "reason": "no such index [customer]",
        "resource.type": "index_expression",
        "resource.id": "customer",
        "index_uuid": "_na_",
        "index": "customer"
    },
    "status": 404
}
</code></pre></div></div>

<h3 id="26-bulk批量api">2.6 bulk批量API</h3>

<p>语法格式</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST **/_bulk

{action:{metadata}}
{request body  }

{action:{metadata}}
{request body  }
</code></pre></div></div>

<p>案例：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /customer/external/_bulk

{"index":{"_id": "1"}}
{"name": "slience_me_1"}
{"index":{"_id": "2"}}
{"name": "slience_me_2"}

// 结果
{
  "took" : 1241,
  "errors" : false,
  "items" : [
    {
      "index" : {
        "_index" : "customer",
        "_type" : "external",
        "_id" : "1",
        "_version" : 1,
        "result" : "created",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 0,
        "_primary_term" : 1,
        "status" : 201
      }
    },
    {
      "index" : {
        "_index" : "customer",
        "_type" : "external",
        "_id" : "2",
        "_version" : 1,
        "result" : "created",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 1,
        "_primary_term" : 1,
        "status" : 201
      }
    }
  ]
}
</code></pre></div></div>

<p>复杂的案例：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /_bulk

{"delete":{"_index":"website","_type":"blog","_id":"123"}}
{"create":{"_index":"website","_type":"blog","_id":"123"}}
{"title":"my first blog post"}
{"index":{"_index":"website","_type":"blog"}}
{"title":"my second blog post"}
{"update":{"_index":"website","_type":"blog","_id":"123"}}
{"doc":{"title":"my updated blog post"}}

// 结果
{
  "took" : 2623,
  "errors" : false,
  "items" : [
    {
      "delete" : {
        "_index" : "website",
        "_type" : "blog",
        "_id" : "123",
        "_version" : 1,
        "result" : "not_found",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 0,
        "_primary_term" : 1,
        "status" : 404
      }
    },
    {
      "create" : {
        "_index" : "website",
        "_type" : "blog",
        "_id" : "123",
        "_version" : 2,
        "result" : "created",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 1,
        "_primary_term" : 1,
        "status" : 201
      }
    },
    {
      "index" : {
        "_index" : "website",
        "_type" : "blog",
        "_id" : "pbR5MZUBQDaJZs9s06Sm",
        "_version" : 1,
        "result" : "created",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 2,
        "_primary_term" : 1,
        "status" : 201
      }
    },
    {
      "update" : {
        "_index" : "website",
        "_type" : "blog",
        "_id" : "123",
        "_version" : 3,
        "result" : "updated",
        "_shards" : {
          "total" : 2,
          "successful" : 1,
          "failed" : 0
        },
        "_seq_no" : 3,
        "_primary_term" : 1,
        "status" : 200
      }
    }
  ]
}

</code></pre></div></div>

<h3 id="27-样本测试数据">2.7 样本测试数据</h3>

<p>准备了一份顾客银行账户信息的虚构的JSON文档样本。每个文档都有下列的schema（模式）。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
	"account_number": 1,
	"balance": 39225,
	"firstname": "Amber",
	"lastname": "Duke",
	"age": 32,
	"gender": "M",
	"address": "880 Holmes Lane",
	"employer": "Pyrami",
	"email": "amberduke@pyrami.com",
	"city": "Brogan",
	"state": "IL"
}
</code></pre></div></div>

<p><a href="https://github.com/elastic/elasticsearch/blob/7.5/docs/src/test/resources/accounts.json">数据下载链接</a></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /bank/account/_bulk

...[JSON data]...
</code></pre></div></div>

<h2 id="3-进阶检索">3. 进阶检索</h2>

<h3 id="31-searchapi">3.1 SearchAPI</h3>

<p>ES支持两种基本方式检索；</p>

<ul>
  <li>通过REST request uri 发送搜索参数 （uri +检索参数）；</li>
  <li>通过REST request body 来发送它们（uri+请求体）；</li>
</ul>

<p>一切检索从_search开始</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 一些响应参数的解释
q=*: 查询所有文档
took: Elasticsearch搜索耗时(毫秒)
timed_out: 是否超时
_shards: 分片信息,多少个分片处理了请求，多少成功，多少失败
hits: 检索到的文档,搜索结果
hits.total: 检索到的文档总数,搜索结果
hits.hits: 实际检索到的文档(数组)默认前10的文档
sort: 排序字段(没有则按score排序)
_score: 相关性得分 score和max_score相关性得分和最高得分(全文检索时才有)
:asc 升序排序
</code></pre></div></div>

<p>详细的字段信息，参照： https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html</p>

<blockquote>
  <p>The response also provides the following information about the search request:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">took</code> – how long it took Elasticsearch to run the query, in milliseconds</li>
    <li><code class="language-plaintext highlighter-rouge">timed_out</code> – whether or not the search request timed out</li>
    <li><code class="language-plaintext highlighter-rouge">_shards</code> – how many shards were searched and a breakdown of how many shards succeeded, failed, or were skipped.</li>
    <li><code class="language-plaintext highlighter-rouge">max_score</code> – the score of the most relevant document found</li>
    <li><code class="language-plaintext highlighter-rouge">hits.total.value</code> - how many matching documents were found</li>
    <li><code class="language-plaintext highlighter-rouge">hits.sort</code> - the document’s sort position (when not sorting by relevance score)</li>
    <li><code class="language-plaintext highlighter-rouge">hits._score</code> - the document’s relevance score (not applicable when using <code class="language-plaintext highlighter-rouge">match_all</code>)</li>
  </ul>
</blockquote>

<h4 id="1检索信息">（1）检索信息</h4>

<h5 id="请求方式uri-检索参数">请求方式：uri +检索参数</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search?q=*&amp;sort=account_number:asc

{
  "took" : 20,  # 耗时
  "timed_out" : false,  # 是否超时
  "_shards" : {  // 分片信息
    "total" : 1,  // 总共分片数
    "successful" : 1,  // 成功处理分片数
    "skipped" : 0,  // 跳过的分片数
    "failed" : 0  // 失败的分片数
  },
  "hits" : {  // 检索到的文档
    "total" : {  // 检索到的文档总数
      "value" : 1000,  // 文档总数
      "relation" : "eq"  // 文档总数关系
    },
    "max_score" : null,  // 相关性得分
    "hits" : [  // 实际检索到的文档(数组)默认前10的文档
      {
        "_index" : "bank",  // 文档索引
        "_type" : "account",  // 文档类型
        "_id" : "0",  // 文档id
        "_score" : null,  // 相关性得分
        "_source" : {
          "account_number" : 0,  // 检索到的文档内容
          "balance" : 16623,
          "firstname" : "Bradshaw",
          "lastname" : "Mckenzie",
          "age" : 29,
          "gender" : "F",
          "address" : "244 Columbus Place",
          "employer" : "Euron",
          "email" : "bradshawmckenzie@euron.com",
          "city" : "Hobucken",
          "state" : "CO"
        },
        "sort" : [
          0
        ]
      },
      {},{},{},{},{},{},{},{},{},{}....... 
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "9",
        "_score" : null,
        "_source" : {
          "account_number" : 9,
          "balance" : 24776,
          "firstname" : "Opal",
          "lastname" : "Meadows",
          "age" : 39,
          "gender" : "M",
          "address" : "963 Neptune Avenue",
          "employer" : "Cedward",
          "email" : "opalmeadows@cedward.com",
          "city" : "Olney",
          "state" : "OH"
        },
        "sort" : [
          9
        ]
      }
    ]
  }
}

</code></pre></div></div>

<h5 id="请求方式uri请求体">请求方式：uri+请求体</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /bank/_search

# 参数解释样例
{
  "query": { "match_all": {} },  // 查询所有(注释记得删除)
  "sort": [  # 排序
    { "account_number": "asc" },  // 按照account_number升序排序(注释记得删除)
    {"balance":"desc"}  // 按照balance降序排序(注释记得删除)
  ],
  "from": 20,  // 从第20条开始(注释记得删除)
  "size": 10  // 每页显示10条(注释记得删除)
}

# 请求体
{
  "query": { "match_all": {} },
  "sort": [  # 排序
    { "account_number": "asc" },
    {"balance":"desc"}
  ],
  "from": 20,
  "size": 10
}

// 结果
{
  "took" : 3,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "20",
        "_score" : null,
        "_source" : {
          "account_number" : 20,
          "balance" : 16418,
          "firstname" : "Elinor",
          "lastname" : "Ratliff",
          "age" : 36,
          "gender" : "M",
          "address" : "282 Kings Place",
          "employer" : "Scentric",
          "email" : "elinorratliff@scentric.com",
          "city" : "Ribera",
          "state" : "WA"
        },
        "sort" : [
          20,
          16418
        ]
      },
      {},{},{},{},{},{},{},{},{},{},{},........
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "29",
        "_score" : null,
        "_source" : {
          "account_number" : 29,
          "balance" : 27323,
          "firstname" : "Leah",
          "lastname" : "Santiago",
          "age" : 33,
          "gender" : "M",
          "address" : "193 Schenck Avenue",
          "employer" : "Isologix",
          "email" : "leahsantiago@isologix.com",
          "city" : "Gerton",
          "state" : "ND"
        },
        "sort" : [
          29,
          27323
        ]
      }
    ]
  }
}
</code></pre></div></div>

<h3 id="32-query-dsl">3.2 Query DSL</h3>

<h4 id="1基本语法">（1）基本语法</h4>

<p>Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。</p>

<p>一个查询语句的典型结构</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

QUERY_NAME:{
   ARGUMENT:VALUE,
   ARGUMENT:VALUE,...
}
</code></pre></div></div>

<p>如果针对于某个字段，那么它的结构如下：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  QUERY_NAME:{
     FIELD_NAME:{
       ARGUMENT:VALUE,
       ARGUMENT:VALUE,...
      }   
   }
}
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_all": {}
  },
  "from": 0,
  "size": 5,
  "sort": [
    {
      "account_number": {
        "order": "desc"
      }
    }
  ]
}
</code></pre></div></div>

<p>query定义如何查询；</p>

<ul>
  <li>match_all查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询；</li>
  <li>除了query参数之外，我们可也传递其他的参数以改变查询结果，如sort，size；</li>
  <li>from+size限定，完成分页功能；</li>
  <li>sort排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；</li>
</ul>

<h4 id="2返回部分字段">（2）返回部分字段</h4>

<p>_source: 指定返回结果包含的字段</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_all": {}
  },
  "from": 0,
  "size": 5,
  "sort": [
    {
      "account_number": {
        "order": "desc"
      }
    }
  ],
  "_source": ["balance","firstname"]  // 指定返回结果包含的字段(注释记得删除)
  
}
</code></pre></div></div>

<h4 id="3match匹配查询">（3）match匹配查询</h4>

<h5 id="精确非字符串">精确(非字符串)</h5>

<p>基本类型（非字符串），精确控制</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match": {
      "account_number": "20"
    }
  }
}

// 结果
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 1.0,  // 匹配度
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "20",
        "_score" : 1.0,  // 匹配度
        "_source" : {
          "account_number" : 20,  // 匹配的字段
          "balance" : 16418,
          "firstname" : "Elinor",
          "lastname" : "Ratliff",
          "age" : 36,
          "gender" : "M",
          "address" : "282 Kings Place",
          "employer" : "Scentric",
          "email" : "elinorratliff@scentric.com",
          "city" : "Ribera",
          "state" : "WA"
        }
      }
    ]
  }
}
</code></pre></div></div>

<h5 id="模糊字符串-全文检索">模糊(字符串) 全文检索</h5>

<p>全文检索，最终会按照评分进行排序，会对检索条件进行分词匹配。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match": {
      "address": "kings"
    }
  }
}

// 结果
{
  "took" : 4,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 2,
      "relation" : "eq"
    },
    "max_score" : 5.9908285,  // 匹配度
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "20",
        "_score" : 5.9908285,  // 匹配度
        "_source" : {
          "account_number" : 20,
          "balance" : 16418,
          "firstname" : "Elinor",
          "lastname" : "Ratliff",
          "age" : 36,
          "gender" : "M",
          "address" : "282 Kings Place",  // 匹配
          "employer" : "Scentric",
          "email" : "elinorratliff@scentric.com",
          "city" : "Ribera",
          "state" : "WA"
        }
      },
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "722",
        "_score" : 5.9908285,  // 匹配度
        "_source" : {
          "account_number" : 722,
          "balance" : 27256,
          "firstname" : "Roberts",
          "lastname" : "Beasley",
          "age" : 34,
          "gender" : "F",
          "address" : "305 Kings Hwy",  // 匹配
          "employer" : "Quintity",
          "email" : "robertsbeasley@quintity.com",
          "city" : "Hayden",
          "state" : "PA"
        }
      }
    ]
  }
}

</code></pre></div></div>

<h4 id="4match_phrase短句匹配">（4）match_phrase[短句匹配]</h4>

<p>将需要匹配的值当成一整个单词（不分词）进行检索</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_phrase": {
      "address": "mill road"
    }
  }
}

// 返回结果
{
  "took" : 5,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 8.926605,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "970",
        "_score" : 8.926605,
        "_source" : {
          "account_number" : 970,
          "balance" : 19648,
          "firstname" : "Forbes",
          "lastname" : "Wallace",
          "age" : 28,
          "gender" : "M",
          "address" : "990 Mill Road",  // 匹配
          "employer" : "Pheast",
          "email" : "forbeswallace@pheast.com",
          "city" : "Lopezo",
          "state" : "AK"
        }
      }
    ]
  }
}
</code></pre></div></div>

<h4 id="5multi_math多字段匹配">（5）multi_math[多字段匹配]</h4>

<p>例如：state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "multi_match": {
      "query": "mill",
      "fields": [
        "state",
        "address"
      ]
    }
  }
}

// 结果
{
  "took" : 5,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 4,
      "relation" : "eq"
    },
    "max_score" : 5.4032025,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "970",
        "_score" : 5.4032025,
        "_source" : {
          "account_number" : 970,
          "balance" : 19648,
          "firstname" : "Forbes",
          "lastname" : "Wallace",
          "age" : 28,
          "gender" : "M",
          "address" : "990 Mill Road",  // 查询结果
          "employer" : "Pheast",
          "email" : "forbeswallace@pheast.com",
          "city" : "Lopezo",
          "state" : "AK"  // 查询结果
        }
      },
      {},{},{},....
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "472",
        "_score" : 5.4032025,
        "_source" : {
          "account_number" : 472,
          "balance" : 25571,
          "firstname" : "Lee",
          "lastname" : "Long",
          "age" : 32,
          "gender" : "F",
          "address" : "288 Mill Street",  // 查询结果
          "employer" : "Comverges",
          "email" : "leelong@comverges.com",
          "city" : "Movico",
          "state" : "MT"  // 查询结果
        }
      }
    ]
  }
}

</code></pre></div></div>

<h4 id="6bool用来做符合查询">（6）bool用来做符合查询</h4>

<p>复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间 可以互相嵌套，可以表达非常复杂的逻辑。</p>

<ul>
  <li>must：必须达到must所列举的所有条件</li>
  <li>must_not：必须不满足must_not所列举的所有条件</li>
  <li>should：应该满足should所列举的条件，如果满足，则得分更高</li>
  <li>filter：必须满足filter所列举的条件，但是不计算得分</li>
  <li>boost：提升查询条件的重要程度</li>
  <li>minimum_should_match：should条件的最小满足数量</li>
  <li>boost_mode：boost的运算模式，有multiply和replace两种</li>
  <li>disable_coord：是否禁用协调因子</li>
  <li>boosting：正负boost，用于调整正负样本的权重</li>
  <li>adjust_pure_negative：是否调整负样本的得分</li>
  <li>name：查询的名称</li>
  <li>_ignored：忽略的参数</li>
  <li>_name：查询的名称</li>
</ul>

<p>must样例</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
   "query":{
        "bool":{
             "must":[
              {"match":{"address":"mill"}},
              {"match":{"gender":"F"}}
             ]
         }
    }
}

// 查询结果
{
  "took" : 4,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 6.1104345,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "472",
        "_score" : 6.1104345,
        "_source" : {
          "account_number" : 472,
          "balance" : 25571,
          "firstname" : "Lee",
          "lastname" : "Long",
          "age" : 32,
          "gender" : "F",
          "address" : "288 Mill Street",
          "employer" : "Comverges",
          "email" : "leelong@comverges.com",
          "city" : "Movico",
          "state" : "MT"
        }
      }
    ]
  }
}

</code></pre></div></div>

<p>must not样例</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "gender": "M"
          }
        },
        {
          "match": {
            "address": "mill"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "age": "38"
          }
        }
      ]
    }
  }
}

// 结果
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 6.0824604,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "970",
        "_score" : 6.0824604,
        "_source" : {
          "account_number" : 970,
          "balance" : 19648,
          "firstname" : "Forbes",
          "lastname" : "Wallace",
          "age" : 28,
          "gender" : "M",
          "address" : "990 Mill Road",
          "employer" : "Pheast",
          "email" : "forbeswallace@pheast.com",
          "city" : "Lopezo",
          "state" : "AK"
        }
      }
    ]
  }
}
</code></pre></div></div>

<p>should样例</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "gender": "M"
          }
        },
        {
          "match": {
            "address": "mill"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "age": "18"
          }
        }
      ],
      "should": [
        {
          "match": {
            "lastname": "Wallace"
          }
        }
      ]
    }
  }
}

// 结果
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 3,
      "relation" : "eq"
    },
    "max_score" : 12.585751,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "970",
        "_score" : 12.585751,
        "_source" : {
          "account_number" : 970,
          "balance" : 19648,
          "firstname" : "Forbes",
          "lastname" : "Wallace",
          "age" : 28,
          "gender" : "M",
          "address" : "990 Mill Road",
          "employer" : "Pheast",
          "email" : "forbeswallace@pheast.com",
          "city" : "Lopezo",
          "state" : "AK"
        }
      },
      {},...
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "345",
        "_score" : 6.0824604,
        "_source" : {
          "account_number" : 345,
          "balance" : 9812,
          "firstname" : "Parker",
          "lastname" : "Hines",
          "age" : 38,
          "gender" : "M",
          "address" : "715 Mill Avenue",
          "employer" : "Baluba",
          "email" : "parkerhines@baluba.com",
          "city" : "Blackgum",
          "state" : "KY"
        }
      }
    ]
  }
}
</code></pre></div></div>

<h4 id="7filter结果过滤">（7）filter[结果过滤]</h4>

<p>并非所有查询都需要产生分数，特别是哪些仅用于filtering过滤的文档。为了不计算分数，elasticsearch会自动检查场景并且优化查询的执行。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": "mill"
          }
        }
      ],
      "filter": {
        "range": {
          "balance": {
            "gte": "10000",
            "lte": "20000"
          }
        }
      }
    }
  }
}

// 结果
{
  "took" : 1,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1,
      "relation" : "eq"
    },
    "max_score" : 5.4032025,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "970",
        "_score" : 5.4032025,
        "_source" : {
          "account_number" : 970,
          "balance" : 19648,
          "firstname" : "Forbes",
          "lastname" : "Wallace",
          "age" : 28,
          "gender" : "M",
          "address" : "990 Mill Road",
          "employer" : "Pheast",
          "email" : "forbeswallace@pheast.com",
          "city" : "Lopezo",
          "state" : "AK"
        }
      }
    ]
  }
}
</code></pre></div></div>

<blockquote>
  <ul>
    <li>在boolean查询中,must,should和must_not元素都被称为查询子句.</li>
    <li>文档是否符合每个“must”或“should”子句中的标准,决定了文档的“相关性得分”.</li>
    <li>得分越高,文档越符合您的搜索条件.</li>
    <li>默认情况下,Elasticsearch返回根据这些相关性得分排序的文档。</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>“must_not”子句中的条件被视为“过滤器”.</li>
    <li>它影响文档是否包含在结果中.但不影响文档的评分方式.</li>
    <li>还可以显式地指定任意过滤器来包含或排除基于结构化数据的文档。</li>
  </ul>
</blockquote>

<h4 id="8term">（8）term</h4>

<blockquote>
  <p>和match一样。匹配某个属性的值。<code class="language-plaintext highlighter-rouge">全文检索</code>字段用<code class="language-plaintext highlighter-rouge">match</code>，其他<code class="language-plaintext highlighter-rouge">非text字段</code>匹配用<code class="language-plaintext highlighter-rouge">term</code>。</p>

  <p>避免对文本字段使用“term”查询</p>

  <p>默认情况下，Elasticsearch作为analysis的一部分更改’text’字段的值。这使得为“text”字段值寻找精确匹配变得困难。</p>

  <p>要搜索“text”字段值，请使用匹配。
https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html</p>
</blockquote>

<ul>
  <li>精确值的查询建议使用term</li>
  <li>对于字符串模糊查询</li>
</ul>

<p>使用term匹配查询  精确查询</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "term": {
      "age": "28"
    }
  }
}

// 结果
{
  "took" : 0,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 51,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "13",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 13,
          "balance" : 32838,
          "firstname" : "Nanette",
          "lastname" : "Bates",
          "age" : 28,
          "gender" : "F",
          "address" : "789 Madison Street",
          "employer" : "Quility",
          "email" : "nanettebates@quility.com",
          "city" : "Nogal",
          "state" : "VA"
        }
      },
      {},{},{},{},{},{},.......
      {
        "_index" : "bank",
        "_type" : "account",
        "_id" : "758",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 758,
          "balance" : 15739,
          "firstname" : "Berta",
          "lastname" : "Short",
          "age" : 28,
          "gender" : "M",
          "address" : "149 Surf Avenue",
          "employer" : "Ozean",
          "email" : "bertashort@ozean.com",
          "city" : "Odessa",
          "state" : "UT"
        }
      }
    ]
  }
}
</code></pre></div></div>

<blockquote>
  <p>Avoid using the term query for text fields.</p>
</blockquote>

<blockquote>
  <p>By default, Elasticsearch changes the values of text fields as part of analysis.
This can make finding exact matches for text field values difficult.</p>
</blockquote>

<blockquote>
  <p>To search text field values, use the match query instead.</p>
</blockquote>

<p>使用term匹配查询 字符串查询</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "term": {
      "address": "mill Road"
    }
  }
}

// 结果
{
  "took" : 0,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 0,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  }
}
</code></pre></div></div>

<p>match匹配</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match": {
      "address": "990 Mill Road"
    }
  }
</code></pre></div></div>

<p>短语匹配</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_phrase": {
      "address": "990 Mill Road"
    }
  }
}
</code></pre></div></div>

<p>使用keyword 进行精确匹配</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match": {
      "address.keyword": "990 Mill Road"
    }
  }
}
</code></pre></div></div>

<p>总结：<code class="language-plaintext highlighter-rouge">全文检索</code>字段用<code class="language-plaintext highlighter-rouge">match</code>，其他<code class="language-plaintext highlighter-rouge">非text字段匹配</code>用<code class="language-plaintext highlighter-rouge">term</code></p>

<h4 id="9aggregation执行聚合">（9）Aggregation(执行聚合)</h4>
<p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL Group by和SQL聚合函数。在elasticsearch中，执行搜索返回this（命中结果），并且同时返回聚合结果，把以响应中的所有hits（命中结果）分隔开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的API啦避免网络往返。</p>

<p>“size”:0 // 不显示搜索数据</p>

<p>aggs：执行聚合。聚合语法如下：</p>

<ul>
  <li>avg: 平均数</li>
  <li>min: 最小值</li>
  <li>max: 最大值</li>
  <li>sum: 求和</li>
  <li>count: 计数</li>
  <li>terms: 按照某个字段的值进行分组</li>
  <li>range: 按照某个字段的值进行范围分组</li>
  <li>histogram: 按照某个字段的值进行柱状图分组</li>
  <li>date_histogram: 按照日期字段进行柱状图分组</li>
  <li>date_range: 按照日期字段进行范围分组</li>
  <li>top_hits: 获取聚合结果中的前N条数据</li>
  <li>sub_aggs: 子聚合</li>
  <li>filter: 过滤器</li>
  <li>missing: 缺失值</li>
  <li>percentiles: 百分位数</li>
  <li>stats: 统计</li>
  <li>extended_stats: 扩展统计</li>
  <li>geo_distance: 地理距离</li>
  <li>geo_bounds: 地理边界</li>
  <li>sampler: 样本</li>
  <li>composite: 复合</li>
  <li>bucket_script: 桶脚本</li>
  <li>bucket_sort: 桶排序</li>
  <li>bucket_selector: 桶选择器</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"aggs":{
    "aggs_name这次聚合的名字，方便展示在结果集中":{
        "AGG_TYPE聚合的类型(avg,term,terms)":{}
     }
}，
</code></pre></div></div>

<p>搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match": {
      "address": "Mill"
    }
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 10
      }
    },
    "ageAvg": {
      "avg": {
        "field": "age"
      }
    },
    "balanceAvg": {
      "avg": {
        "field": "balance"
      }
    }
  },
  "size": 0 // 不显示搜索数据
}

// 结果
{
  "took" : 7,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 4,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "ageAgg" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : 38,
          "doc_count" : 2
        },
        {
          "key" : 28,
          "doc_count" : 1
        },
        {
          "key" : 32,
          "doc_count" : 1
        }
      ]
    },
    "ageAvg" : {
      "value" : 34.0
    },
    "balanceAvg" : {
      "value" : 25208.0
    }
  }
}
</code></pre></div></div>

<p>复杂： 按照年龄聚合，并且求这些年龄段的这些人的平均薪资</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 100
      },
      "aggs": {
        "ageAvg": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  },
  "size": 0
}

// 结果
{
  "took" : 14,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "ageAgg" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : 31,
          "doc_count" : 61,
          "ageAvg" : {
            "value" : 28312.918032786885
          }
        },
        {},{},......
        {
          "key" : 29,
          "doc_count" : 35,
          "ageAvg" : {
            "value" : 29483.14285714286
          }
        }
      ]
    }
  }
}
</code></pre></div></div>

<p>查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_search

{
  "query": {
    "match_all": {}
  },
  "aggs": {
    "ageAgg": {
      "terms": {
        "field": "age",
        "size": 100
      },
      "aggs": {
        "genderAgg": {
          "terms": {
            "field": "gender.keyword"
          },
          "aggs": {
            "balanceAvg": {
              "avg": {
                "field": "balance"
              }
            }
          }
        },
        "ageBalanceAvg": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  },
  "size": 0
}

// 返回结果
{
  "took" : 23,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : null,
    "hits" : [ ]
  },
  "aggregations" : {
    "ageAgg" : {
      "doc_count_error_upper_bound" : 0,
      "sum_other_doc_count" : 0,
      "buckets" : [
        {
          "key" : 31,
          "doc_count" : 61,
          "genderAgg" : {
            "doc_count_error_upper_bound" : 0,
            "sum_other_doc_count" : 0,
            "buckets" : [
              {
                "key" : "M",
                "doc_count" : 35,
                "balanceAvg" : {
                  "value" : 29565.628571428573
                }
              },
              {
                "key" : "F",
                "doc_count" : 26,
                "balanceAvg" : {
                  "value" : 26626.576923076922
                }
              }
            ]
          },
          "ageBalanceAvg" : {
            "value" : 28312.918032786885
          }
        },
        {},{},{},{},......
        {
          "key" : 29,
          "doc_count" : 35,
          "genderAgg" : {
            "doc_count_error_upper_bound" : 0,
            "sum_other_doc_count" : 0,
            "buckets" : [
              {
                "key" : "M",
                "doc_count" : 23,
                "balanceAvg" : {
                  "value" : 29943.17391304348
                }
              },
              {
                "key" : "F",
                "doc_count" : 12,
                "balanceAvg" : {
                  "value" : 28601.416666666668
                }
              }
            ]
          },
          "ageBalanceAvg" : {
            "value" : 29483.14285714286
          }
        }
      ]
    }
  }
}
</code></pre></div></div>

<h3 id="33-mapping">3.3 Mapping</h3>

<h4 id="1字段类型">（1）字段类型</h4>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/mapping.html">文档</a></p>

<p>核心类型</p>

<ul>
  <li>字符串(string): text、keyword</li>
  <li>数值类型(Numeric): long、integer、short、double、float、half_float、scaled_float</li>
  <li>日期类型(Date): date</li>
  <li>布尔类型(Boolean): boolean</li>
  <li>二进制类型(binary): binary</li>
  <li>范围类型(Date): integer_range、float_range、long_range、double_range、date_range</li>
</ul>

<p>复合类型</p>
<ul>
  <li>数组类型(Array): Array 支持不针对特定的类型</li>
  <li>对象类型(Object): object 用于单JSON对象</li>
  <li>嵌套类型(Nested): nested 用于JSON对象数组</li>
</ul>

<p>地理类型(Geo)</p>
<ul>
  <li>地理坐标(Geo-points): geo_point 用于描述 经纬度坐标</li>
  <li>地理图形(Geo-Shape): geo_shape 用于描述复杂形状、如多边形</li>
</ul>

<p>特定类型</p>
<ul>
  <li>IP类型: ip 用于描述IPv4和IPv6</li>
  <li>补全类型(Completion): completion 提供自动补全功能</li>
  <li>令牌计数类型(Token count): token_count 用于统计做分词后的词项个数</li>
  <li>附件类型(attachment): 参考 mapper-attachment插件 支持将附件如MS Office格式，Open Document格式，ePub，HTML等等索引为attachment数据类型</li>
  <li>抽取类型(extract): extract 提取指定字段中的文本内容</li>
  <li>…</li>
</ul>

<h4 id="2映射">（2）映射</h4>

<p>Mapping(映射) Maping是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的。比如：使用maping来定义：</p>

<ul>
  <li>哪些字符串属性应该被看做全文本属性（full text fields）；</li>
  <li>哪些属性包含数字，日期或地理位置；</li>
  <li>文档中的所有属性是否都嫩被索引（all 配置）；</li>
  <li>日期的格式；</li>
  <li>自定义映射规则来执行动态添加属性；</li>
  <li>查看mapping信息 GET bank/_mapping</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET bank/_mapping

// 返回
{
  "bank" : {
    "mappings" : {
      "properties" : {
        "account_number" : {
          "type" : "long"
        },
        "address" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "age" : {
          "type" : "long"
        },
        "balance" : {
          "type" : "long"
        },
        "city" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "email" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "employer" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "firstname" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "gender" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "lastname" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "state" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        }
      }
    }
  }
}
</code></pre></div></div>

<h4 id="3新版本改变">（3）新版本改变</h4>

<p>ElasticSearch7-去掉type概念</p>

<ol>
  <li>
    <p>关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。</p>

    <ul>
      <li>两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。</li>
      <li>去掉type就是为了提高ES处理数据的效率。</li>
    </ul>
  </li>
  <li>
    <p>Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。</p>
  </li>
  <li>
    <p>Elasticsearch 8.x 不再支持URL中的type参数。</p>
  </li>
  <li>
    <p>解决： 将索引从多类型迁移到单类型，每种类型文档一个独立索引</p>

    <p>将已存在的索引下的类型数据，全部迁移到指定位置即可。详见数据迁移</p>
  </li>
</ol>

<blockquote>
  <p><strong>Elasticsearch 7.x</strong></p>

  <ul>
    <li>Specifying types in requests is deprecated. For instance, indexing a document no longer requires a document <code class="language-plaintext highlighter-rouge">type</code>. The new index APIs are <code class="language-plaintext highlighter-rouge">PUT {index}/_doc/{id}</code> in case of explicit ids and <code class="language-plaintext highlighter-rouge">POST {index}/_doc</code> for auto-generated ids. Note that in 7.0, <code class="language-plaintext highlighter-rouge">_doc</code> is a permanent part of the path, 和 represents the endpoint name rather than the document type.</li>
    <li>该 <code class="language-plaintext highlighter-rouge">include_type_name</code> parameter in the index creation, index template, 和 mapping APIs will default to <code class="language-plaintext highlighter-rouge">false</code>. Setting the parameter at all will result in a deprecation warning.</li>
    <li>该 <code class="language-plaintext highlighter-rouge">_default_</code> mapping type is removed.</li>
  </ul>

  <p><strong>Elasticsearch 8.x</strong></p>

  <ul>
    <li>Specifying types in requests is no longer supported.</li>
    <li>该 <code class="language-plaintext highlighter-rouge">include_type_name</code> parameter is removed.</li>
  </ul>
</blockquote>

<h5 id="创建映射">创建映射</h5>

<p>创建索引并指定映射</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT /my_index

{
  "mappings": {
    "properties": {
      "age": {
        "type": "integer"
      },
      "email": {
        "type": "keyword"
      },
      "name": {
        "type": "text"
      }
    }
  }
}

// 结果
{
  "acknowledged" : true,
  "shards_acknowledged" : true,
  "index" : "my_index"
}
</code></pre></div></div>

<h5 id="查看映射">查看映射</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /my_index

// 结果
{
  "my_index" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "age" : {
          "type" : "integer"
        },
        "email" : {
          "type" : "keyword"
        },
        "name" : {
          "type" : "text"
        }
      }
    },
    "settings" : {
      "index" : {
        "creation_date" : "1740302983112",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "6D6Pyw46SWmZQ4WGAV82BA",
        "version" : {
          "created" : "7040299"
        },
        "provided_name" : "my_index"
      }
    }
  }
}
</code></pre></div></div>

<h5 id="添加新的字段映射">添加新的字段映射</h5>

<p>这里的 “index”: false，表明新增的字段不能被检索，只是一个冗余字段。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT /my_index/_mapping

{
  "properties": {
    "employee-id": {
      "type": "keyword",
      "index": false  // 新增字段不能被检索
    }
  }
}

// 结果
{
  "acknowledged" : true
}
</code></pre></div></div>

<h5 id="更新映射">更新映射</h5>

<p>对于已经存在的字段映射，我们不能更新。更新必须创建新的索引，进行数据迁移。</p>

<h5 id="数据迁移">数据迁移</h5>

<p>先创建new_twitter的正确映射。然后使用如下方式进行数据迁移。</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST _reindex [固定写法]

{
  "source":{
      "index":"twitter"
   },
  "dest":{
      "index":"new_twitters"
   }
}
</code></pre></div></div>

<p>将旧索引的type下的数据进行迁移(旧版本)</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST _reindex [固定写法]

{
  "source":{
      "index":"twitter",
      "type":"twitter"
   },
  "dest":{
      "index":"new_twitters"
   }
}
</code></pre></div></div>

<p>更多详情见： https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html</p>

<p><strong>案例</strong></p>

<p>先创建新的</p>

<ul>
  <li>keyword： 不能被分词，只能被精确匹配</li>
  <li>text： 可以被分词，可以被全文搜索</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT /newbank

{
  "mappings": {
    "properties": {
      "account_number": {
        "type": "long"
      },
      "address": {
        "type": "text"
      },
      "age": {
        "type": "integer"
      },
      "balance": {
        "type": "long"
      },
      "city": {
        "type": "keyword"  // keyword字段不能被分词
      },
      "email": {
        "type": "keyword"
      },
      "employer": {
        "type": "keyword"
      },
      "firstname": {
        "type": "text"
      },
      "gender": {
        "type": "keyword"
      },
      "lastname": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      },
      "state": {
        "type": "keyword"
      }
    }
  }
}
</code></pre></div></div>

<p>然后重设索引</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST _reindex

{
  "source":{
      "index":"bank",
      "type": "account"
   },
  "dest":{
      "index":"newbank"
   }
}

// 结果
{
  "took" : 536,
  "timed_out" : false,
  "total" : 1000,
  "updated" : 0,
  "created" : 1000,
  "deleted" : 0,
  "batches" : 1,
  "version_conflicts" : 0,
  "noops" : 0,
  "retries" : {
    "bulk" : 0,
    "search" : 0
  },
  "throttled_millis" : 0,
  "requests_per_second" : -1.0,
  "throttled_until_millis" : 0,
  "failures" : [ ]
}
</code></pre></div></div>

<p>查询
通过这样的操作, 可以不用type, 老的数据也可以迁移出来</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /newbank/_search

// 结果
{
  "took" : 489,
  "timed_out" : false,
  "_shards" : {
    "total" : 1,
    "successful" : 1,
    "skipped" : 0,
    "failed" : 0
  },
  "hits" : {
    "total" : {
      "value" : 1000,
      "relation" : "eq"
    },
    "max_score" : 1.0,
    "hits" : [
      {
        "_index" : "newbank",
        "_type" : "_doc",
        "_id" : "1",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 1,
          "balance" : 39225,
          "firstname" : "Amber",
          "lastname" : "Duke",
          "age" : 32,
          "gender" : "M",
          "address" : "880 Holmes Lane",
          "employer" : "Pyrami",
          "email" : "amberduke@pyrami.com",
          "city" : "Brogan",
          "state" : "IL"
        }
      },
      {},{},......
      {
        "_index" : "newbank",
        "_type" : "_doc",
        "_id" : "49",
        "_score" : 1.0,
        "_source" : {
          "account_number" : 49,
          "balance" : 29104,
          "firstname" : "Fulton",
          "lastname" : "Holt",
          "age" : 23,
          "gender" : "F",
          "address" : "451 Humboldt Street",
          "employer" : "Anocha",
          "email" : "fultonholt@anocha.com",
          "city" : "Sunriver",
          "state" : "RI"
        }
      }
    ]
  }
}
</code></pre></div></div>

<h3 id="34-分词">3.4 分词</h3>

<p>一个tokenizer（分词器）接收一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。</p>

<blockquote>
  <p>例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。</p>
</blockquote>

<p>该tokenizer（分词器）还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。</p>

<p>elasticsearch提供了很多内置的分词器，可以用来构建custom analyzers（自定义分词器）。</p>

<blockquote>
  <p>关于分词器： https://www.elastic.co/guide/en/elasticsearch/reference/7.5/analysis.html</p>
</blockquote>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST _analyze

{
  "analyzer": "standard",
  "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
}

// 结果
{
  "tokens" : [
    {
      "token" : "the",
      "start_offset" : 0,
      "end_offset" : 3,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 0
    },
    {
      "token" : "2",
      "start_offset" : 4,
      "end_offset" : 5,
      "type" : "&lt;NUM&gt;",
      "position" : 1
    },
    {
      "token" : "quick",
      "start_offset" : 6,
      "end_offset" : 11,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 2
    },
    {
      "token" : "brown",
      "start_offset" : 12,
      "end_offset" : 17,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 3
    },
    {
      "token" : "foxes",
      "start_offset" : 18,
      "end_offset" : 23,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 4
    },
    {
      "token" : "jumped",
      "start_offset" : 24,
      "end_offset" : 30,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 5
    },
    {
      "token" : "over",
      "start_offset" : 31,
      "end_offset" : 35,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 6
    },
    {
      "token" : "the",
      "start_offset" : 36,
      "end_offset" : 39,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 7
    },
    {
      "token" : "lazy",
      "start_offset" : 40,
      "end_offset" : 44,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 8
    },
    {
      "token" : "dog's",
      "start_offset" : 45,
      "end_offset" : 50,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 9
    },
    {
      "token" : "bone",
      "start_offset" : 51,
      "end_offset" : 55,
      "type" : "&lt;ALPHANUM&gt;",
      "position" : 10
    }
  ]
}
</code></pre></div></div>

<h4 id="1安装ik分词器">（1）安装ik分词器</h4>

<p>所有的语言分词，默认使用的都是“Standard Analyzer”，但是这些分词器针对于中文的分词，并不友好。为此需要安装中文的分词器。</p>

<p>注意：不能用默认elasticsearch-plugin install xxx.zip 进行自动安装 https://github.com/medcl/elasticsearch-analysis-ik/releases/download 对应es版本安装</p>

<blockquote>
  <p>Github仓库的旧版本内容已经移除：迁移到 https://release.infinilabs.com/analysis-ik/stable/ 去下载对应的版本</p>
</blockquote>

<p>在前面安装的elasticsearch时，我们已经将elasticsearch容器的“/usr/share/elasticsearch/plugins”目录，映射到宿主机的“ /mydata/elasticsearch/plugins”目录下，所以比较方便的做法就是下载“/elasticsearch-analysis-ik-7.6.2.zip”文件，然后解压到该文件夹下即可。安装完毕后，需要重启elasticsearch容器。</p>

<h5 id="查看elasticsearch版本号">查看elasticsearch版本号</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "name" : "6bf8d224ae02",
  "cluster_name" : "elasticsearch",
  "cluster_uuid" : "DZwHe7DhScWoyTMWzK_3Bg",
  "version" : {
    "number" : "7.4.2",
    "build_flavor" : "default",
    "build_type" : "docker",
    "build_hash" : "2f90bbf7b93631e52bafb59b3b049cb44ec25e96",
    "build_date" : "2019-10-28T20:40:44.881551Z",
    "build_snapshot" : false,
    "lucene_version" : "8.2.0",
    "minimum_wire_compatibility_version" : "6.8.0",
    "minimum_index_compatibility_version" : "6.0.0-beta1"
  },
  "tagline" : "You Know, for Search"
}
</code></pre></div></div>

<h5 id="进入es容器内部plugin目录">进入es容器内部plugin目录</h5>

<p><a href="https://blog.csdn.net/qq_67177419/article/details/144096396">发现系统没有wget: 参考解决方案</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pwd 当前路径 /usr/share/elasticsearch</span>
<span class="c"># docker exec -it 容器id /bin/bash</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> elasticsearch /bin/bash 

<span class="c"># 下载 ik分词器 (wget也得安装`yum install wget`)</span>
wget https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-7.4.2.zip

<span class="c"># 解压(unzip也得安装`yum install unzip`) PS:原教程真讨厌没有指定dir,害的我移动了好久</span>
unzip elasticsearch-analysis-ik-7.4.2.zip <span class="nt">-d</span> ik

<span class="c"># 删除zip文件</span>
<span class="nb">rm</span> <span class="nt">-rf</span> elasticsearch-analysis-ik-7.4.2.zip

<span class="c"># 移动</span>
<span class="nb">mv </span>ik plugins

<span class="c"># 确认安装</span>
<span class="nb">cd </span>bin
elasticsearch-plugin list <span class="c"># 查看插件列表</span>
</code></pre></div></div>

<h4 id="2测试分词器">（2）测试分词器</h4>

<p>使用默认</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET my_index/_analyze

{
   "text":"我是中国人"
}

// 结果
{
  "tokens" : [
    {
      "token" : "我",
      "start_offset" : 0,
      "end_offset" : 1,
      "type" : "&lt;IDEOGRAPHIC&gt;",
      "position" : 0
    },
    {
      "token" : "是",
      "start_offset" : 1,
      "end_offset" : 2,
      "type" : "&lt;IDEOGRAPHIC&gt;",
      "position" : 1
    },
    {
      "token" : "中",
      "start_offset" : 2,
      "end_offset" : 3,
      "type" : "&lt;IDEOGRAPHIC&gt;",
      "position" : 2
    },
    {
      "token" : "国",
      "start_offset" : 3,
      "end_offset" : 4,
      "type" : "&lt;IDEOGRAPHIC&gt;",
      "position" : 3
    },
    {
      "token" : "人",
      "start_offset" : 4,
      "end_offset" : 5,
      "type" : "&lt;IDEOGRAPHIC&gt;",
      "position" : 4
    }
  ]
}
</code></pre></div></div>

<p>使用ik_smart分词器, 智能分词</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET my_index/_analyze

{
   "analyzer": "ik_smart", 
   "text":"我是中国人"
}

// 结果
{
  "tokens" : [
    {
      "token" : "我",
      "start_offset" : 0,
      "end_offset" : 1,
      "type" : "CN_CHAR",
      "position" : 0
    },
    {
      "token" : "是",
      "start_offset" : 1,
      "end_offset" : 2,
      "type" : "CN_CHAR",
      "position" : 1
    },
    {
      "token" : "中国人",
      "start_offset" : 2,
      "end_offset" : 5,
      "type" : "CN_WORD",
      "position" : 2
    }
  ]
}
</code></pre></div></div>

<p>ik_max_word分词器, 获取最大单词组合</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET my_index/_analyze

{
   "analyzer": "ik_max_word", 
   "text":"我是中国人"
}

// 结果
{
  "tokens" : [
    {
      "token" : "我",
      "start_offset" : 0,
      "end_offset" : 1,
      "type" : "CN_CHAR",
      "position" : 0
    },
    {
      "token" : "是",
      "start_offset" : 1,
      "end_offset" : 2,
      "type" : "CN_CHAR",
      "position" : 1
    },
    {
      "token" : "中国人",
      "start_offset" : 2,
      "end_offset" : 5,
      "type" : "CN_WORD",
      "position" : 2
    },
    {
      "token" : "中国",
      "start_offset" : 2,
      "end_offset" : 4,
      "type" : "CN_WORD",
      "position" : 3
    },
    {
      "token" : "国人",
      "start_offset" : 3,
      "end_offset" : 5,
      "type" : "CN_WORD",
      "position" : 4
    }
  ]
}
</code></pre></div></div>

<h4 id="3自定义词库">（3）自定义词库</h4>

<p>先安装nginx， 见 <a href="https://slienceme.cn/2025/02/22/Docker/">我的博客(基于docker)</a></p>

<p>然后在<code class="language-plaintext highlighter-rouge">/home/slienceme/docker/nginx/html/</code>创建文件夹<code class="language-plaintext highlighter-rouge">es</code></p>

<p>创建文件<code class="language-plaintext highlighter-rouge">fenci.txt</code>, 执行指令<code class="language-plaintext highlighter-rouge">vim fenci.txt</code>，写入例如如下内容</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>slience_me
尚硅谷
巧碧螺
</code></pre></div></div>

<p>访问<code class="language-plaintext highlighter-rouge">http://ngix所在主机的IP:80/es/fenci.txt</code>测试是否配置成功</p>

<p>修改<code class="language-plaintext highlighter-rouge">/usr/share/elasticsearch/plugins/ik/config</code>中的<code class="language-plaintext highlighter-rouge">IKAnalyzer.cfg.xml</code> ，打开远程拓展的注释，放入nginx配置的</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;</span>
<span class="nt">&lt;properties&gt;</span>
	<span class="nt">&lt;comment&gt;</span>IK Analyzer 扩展配置<span class="nt">&lt;/comment&gt;</span>
	<span class="c">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span>
	<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"ext_dict"</span><span class="nt">&gt;&lt;/entry&gt;</span>
	 <span class="c">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span>
	<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"ext_stopwords"</span><span class="nt">&gt;&lt;/entry&gt;</span>
	<span class="c">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span>
	<span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"remote_ext_dict"</span><span class="nt">&gt;</span>http://192.168.50.2/es/fenci.txt<span class="nt">&lt;/entry&gt;</span> 
	<span class="c">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span>
	<span class="c">&lt;!-- &lt;entry key="remote_ext_stopwords"&gt;words_location&lt;/entry&gt; --&gt;</span>
<span class="nt">&lt;/properties&gt;</span>
</code></pre></div></div>

<p>测试分词效果:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET my_index/_analyze

{
   "analyzer": "ik_max_word", 
   "text":"slience_me你好巧碧螺"
}

// 返回结果
{
  "tokens" : [
    {
      "token" : "slience_me",
      "start_offset" : 0,
      "end_offset" : 10,
      "type" : "LETTER",
      "position" : 0
    },
    {
      "token" : "slience",
      "start_offset" : 0,
      "end_offset" : 7,
      "type" : "ENGLISH",
      "position" : 1
    },
    {
      "token" : "me",
      "start_offset" : 8,
      "end_offset" : 10,
      "type" : "ENGLISH",
      "position" : 2
    },
    {
      "token" : "你好",
      "start_offset" : 10,
      "end_offset" : 12,
      "type" : "CN_WORD",
      "position" : 3
    },
    {
      "token" : "好巧",
      "start_offset" : 11,
      "end_offset" : 13,
      "type" : "CN_WORD",
      "position" : 4
    },
    {
      "token" : "巧碧螺",
      "start_offset" : 12,
      "end_offset" : 15,
      "type" : "CN_WORD",
      "position" : 5
    }
  ]
}
</code></pre></div></div>

<h2 id="4-elasticsearch-rest-client">4. elasticsearch-Rest-Client</h2>

<h3 id="41-9300tcp">4.1 9300:TCP</h3>

<ul>
  <li>spring-data-elasticsearch:transport-api.jar;
    <ul>
      <li>springboot版本不同，ransport-api.jar不同，不能适配es版本</li>
      <li>7.x已经不建议使用，8以后就要废弃</li>
    </ul>
  </li>
</ul>

<h3 id="42-9200http">4.2 9200:HTTP</h3>

<ul>
  <li>jestClient: 非官方，更新慢；</li>
  <li>RestTemplate：模拟HTTP请求，ES很多操作需要自己封装，麻烦；</li>
  <li>HttpClient：同上；</li>
  <li>Elasticsearch-Rest-Client：官方RestClient，封装了ES操作，API层次分明，上手简单； 最终选择Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）； https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</li>
</ul>]]></content><author><name>slience_me</name></author><category term="服务器" /><category term="Linux" /><category term="ElasticSearch" /><summary type="html"><![CDATA[ElasticSearch的使用]]></summary></entry><entry><title type="html">服务器｜【指令集】Docker</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/22/Docker/" rel="alternate" type="text/html" title="服务器｜【指令集】Docker" /><published>2025-02-22T00:00:00+08:00</published><updated>2025-02-22T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/22/Docker</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/22/Docker/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="docker">Docker</h1>

<p><a href="https://hub.docker.com/">docker镜像地址</a></p>

<p><a href="https://docs.docker.com/desktop/setup/install/">docker官网</a></p>

<p>使用阿里云进行镜像加速</p>

<h2 id="1-docker安装">1. docker安装</h2>

<h3 id="centos">【centos】</h3>

<blockquote>
  <p>PS: centos7官网镜像源已经不能用了,需要使用阿里云镜像源,使用下面方案解决</p>

  <p><a href="https://blog.csdn.net/qq_67177419/article/details/144096396">发现系统没有wget: 参考解决方案</a></p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 【centos7】</span>
<span class="c"># 卸载旧版本</span>
<span class="nb">sudo </span>yum remove docker <span class="se">\</span>
                docker-client <span class="se">\</span>
                docker-client-latest <span class="se">\</span>
                docker-common <span class="se">\</span>
                docker-latest <span class="se">\</span>
                docker-latest-logrotate <span class="se">\</span>
                docker-logrotate <span class="se">\</span>
                docker-engine
                
<span class="c"># 安装依赖</span>
<span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> yum-utils <span class="se">\</span>
  device-mapper-persistent-data <span class="se">\</span>
  lvm2
  
<span class="c"># 设置镜像源</span>
<span class="nb">sudo </span>yum-config-manager <span class="nt">--add-repo</span> https://download.docker.com/linux/centos/docker-ce.repo
        
<span class="c"># 安装docker</span>
<span class="nb">sudo </span>yum <span class="nb">install </span>docker-ce docker-ce-cli containerd.io

<span class="nb">sudo </span>systemctl start docker <span class="c"># 启动docker</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>docker <span class="c"># 设置开机自启</span>

<span class="c"># 测试</span>
<span class="nb">sudo </span>docker run hello-world
<span class="c"># 安装mysql</span>
<span class="nb">sudo </span>docker pull mysql:5.7
</code></pre></div></div>

<h3 id="ubuntu">【ubuntu】</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#----------------------------------------------------------------</span>
<span class="c"># 【ubuntu】</span>
<span class="c"># 卸载旧版本 Docker</span>
<span class="nb">sudo </span>apt remove docker <span class="se">\</span>
                    docker-engine <span class="se">\</span>
                    docker.io <span class="se">\</span>
                    containerd <span class="se">\</span>
                    runc
                    
<span class="c"># 安装依赖，安装必要的软件包，以允许apt通过HTTPS使用仓库：</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>apt-transport-https ca-certificates curl gnupg-agent software-properties-common

<span class="c"># 添加Docker的官方GPG密钥  添加Docker的稳定仓库</span>
curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>apt-key add -

<span class="c"># 使用以下命令设置存储库</span>
<span class="nb">sudo </span>add-apt-repository <span class="s2">"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span>

<span class="c"># 安装 Docker</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>docker-ce docker-ce-cli containerd.io

<span class="c"># 如果想要指定版本</span>
apt list <span class="nt">-a</span> docker-ce
<span class="nb">sudo </span>apt <span class="nb">install </span>docker-ce<span class="o">=</span>&lt;VERSION&gt; docker-ce-cli<span class="o">=</span>&lt;VERSION&gt; containerd.io

<span class="c"># 启动 Docker 并设置开机自启</span>
<span class="nb">sudo </span>systemctl start docker
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>docker

<span class="c"># 测试 Docker 安装</span>
<span class="nb">sudo </span>docker run hello-world

<span class="c"># 安装 MySQL</span>
<span class="nb">sudo </span>docker pull mysql:5.7
</code></pre></div></div>

<h2 id="2-docker常用指令">2. docker常用指令</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker version <span class="c"># 查看docker版本</span>
docker <span class="nt">-v</span>
<span class="nb">sudo </span>docker info <span class="c">#  查看docker信息</span>
<span class="nb">sudo </span>docker ps <span class="nt">-a</span> <span class="c"># 查看docker容器</span>
<span class="nb">sudo </span>docker images <span class="c"># 查看docker镜像</span>
<span class="nb">sudo </span>docker logs container_id <span class="c"># 查看docker容器日志</span>
<span class="nb">sudo </span>docker logs <span class="nb">tail </span>100 container_id
<span class="nb">sudo </span>docker logs <span class="nt">-fnt</span> container_id
<span class="nb">sudo </span>docker port container_id <span class="c"># 查看docker容器端口映射</span>
<span class="nb">sudo </span>docker top container_id <span class="c"># 查看docker容器进程</span>
<span class="nb">sudo </span>docker inspect container_id <span class="c"># 查看docker容器详细信息</span>
<span class="nb">sudo </span>docker start container_id <span class="c"># 启动docker容器</span>
<span class="nb">sudo </span>docker stop container_id <span class="c"># 停止docker容器</span>
<span class="nb">sudo </span>docker restart container_id <span class="c"># 重启docker容器</span>
<span class="nb">sudo </span>docker <span class="nb">rm </span>container_id <span class="c"># 删除docker容器</span>
<span class="nb">sudo </span>docker rmi image_id <span class="c"># 删除docker镜像</span>
</code></pre></div></div>

<h2 id="3-镜像加速">3. 镜像加速</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/docker
<span class="nb">sudo tee</span> /etc/docker/daemon.json <span class="o">&lt;&lt;-</span><span class="sh">'</span><span class="no">EOF</span><span class="sh">'
{
    "registry-mirrors": [
        "https://do.nark.eu.org",
        "https://dc.j8.work",
        "https://docker.m.daocloud.io",
        "https://dockerproxy.com",
        "https://docker.mirrors.ustc.edu.cn",
        "https://docker.nju.edu.cn",
        "https://mirrors.tuna.tsinghua.edu.cn",
        "https://ustc-edu-cn.mirror.aliyuncs.com",
        "https://ccr.ccs.tencentyun.com",
        "https://docker.m.daocloud.io",
        "https://docker.awsl9527.cn"
    ]
}
</span><span class="no">EOF
</span><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart docker
</code></pre></div></div>

<h2 id="4-docker安装mysql">4. docker安装mysql</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 拉取镜像</span>
docker pull mysql:5.7

<span class="c"># 2. 创建容器</span>
<span class="c"># 创建并准备必要的宿主机目录： 确保宿主机上的目录</span>
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/mysql/log /home/slienceme/docker/mysql/data /home/slienceme/docker/mysql/conf

<span class="c"># 注意这个路径一定要对应上</span>
<span class="nb">sudo </span>docker run <span class="nt">-p</span> 3306:3306 <span class="nt">--name</span> mysql <span class="se">\</span>
<span class="nt">-v</span> /home/slienceme/docker/mysql/log:/var/log/mysql <span class="se">\</span>
<span class="nt">-v</span> /home/slienceme/docker/mysql/data:/var/lib/mysql <span class="se">\</span>
<span class="nt">-v</span> /home/slienceme/docker/mysql/conf:/etc/mysql/conf.d <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>123456 <span class="se">\</span>
<span class="nt">-d</span> mysql:5.7

<span class="c"># -p 3306:3306 将主机的 3306 端口映射到容器的 3306 端口</span>
<span class="c"># --name mysql 设置容器名称为 mysql</span>
<span class="c"># -v /mydata/mysql/log:/var/log/mysql 将日志目录挂载到主机</span>
<span class="c"># -v /mydata/mysql/data:/var/lib/mysql 将数据目录挂载到主机</span>
<span class="c"># -v /mydata/mysql/conf:/etc/mysql 将配置目录挂载到主机</span>
<span class="c"># -e MYSQL_ROOT_PASSWORD=123456 设置 root 用户的密码为 root</span>
<span class="c"># -d mysql:5.7 后台运行容器，并返回容器 ID</span>

<span class="c"># 3. 进入容器</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> mysql /bin/bash
<span class="c"># 4. 登录mysql</span>
mysql <span class="nt">-uroot</span> <span class="nt">-p123456</span>
<span class="c"># 5. 创建数据库</span>
create database <span class="nb">test</span>
<span class="c"># 6. 创建用户</span>
create user <span class="s1">'test'</span>@<span class="s1">'%'</span> identified by <span class="s1">'123456'</span>
<span class="c"># 7. 授权用户</span>
grant all privileges on test.<span class="k">*</span> to <span class="s1">'test'</span>@<span class="s1">'%'</span>
<span class="c"># 8. 刷新权限</span>
flush privileges

<span class="c"># 修改配置文件</span>
vi /home/slienceme/docker/mysql/conf/my.cnf
<span class="c"># ============================开始=============================</span>
<span class="o">[</span>client]
default-character-set<span class="o">=</span>utf8

<span class="o">[</span>mysql]
default-character-set<span class="o">=</span>utf8

<span class="o">[</span>mysqld]
<span class="nv">init_connect</span><span class="o">=</span><span class="s1">'SET collation_connection = utf8_unicode_ci'</span>
<span class="nv">init_connect</span><span class="o">=</span><span class="s1">'SET NAMES utf8'</span>
character-set-server<span class="o">=</span>utf8
collation-server<span class="o">=</span>utf8_unicode_ci
skip-character-set-client-handshake
skip-name-resolve
<span class="c"># ============================结束============================</span>

<span class="c"># 设置自动启动</span>
docker update mysql <span class="nt">--restart</span><span class="o">=</span>always 
</code></pre></div></div>

<h2 id="5-docker安装redis">5. docker安装redis</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 拉取镜像</span>
docker pull redis
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/redis/conf
<span class="nb">touch</span> /home/slienceme/docker/redis/conf/redis.conf

<span class="c"># 2. 创建容器</span>
docker run <span class="nt">-p</span> 6379:6379 <span class="nt">--name</span> redis <span class="nt">-v</span> /home/slienceme/docker/redis/data:/data <span class="se">\</span>
    <span class="nt">-v</span> /home/slienceme/docker/redis/conf/redis.conf:/etc/redis/redis.conf <span class="se">\</span>
    <span class="nt">-d</span> redis redis-server /etc/redis/redis.conf
    
<span class="c"># 3. 进入容器</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> redis redis-cli

<span class="c"># 设置自动启动</span>
docker update redis <span class="nt">--restart</span><span class="o">=</span>always
</code></pre></div></div>

<h2 id="6-docker安装elasticsearchkibana">6. docker安装ElasticSearch&amp;kibana</h2>

<p><strong>安装ElasticSearch</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 拉取镜像</span>
docker pull elasticsearch:7.4.2   <span class="c"># 存储和检索数据</span>

<span class="c"># 2. 创建容器</span>
<span class="c"># 创建并准备必要的宿主机目录： 确保宿主机上的目录</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/elasticsearch/config
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/elasticsearch/data
<span class="nb">echo</span> <span class="s2">"http.host: 0.0.0.0"</span> <span class="o">&gt;&gt;</span> /home/slienceme/docker/elasticsearch/config/elasticsearch.yml

<span class="c"># 9200: 发送HTTP请求 RESTAPI 向elasticsearch的请求端口</span>
<span class="c"># 9300：在分布式集群下 节点间的通讯端口</span>
docker run <span class="nt">-p</span> 9200:9200 <span class="nt">-p</span> 9300:9300 <span class="nt">--name</span> elasticsearch <span class="se">\</span>
	<span class="nt">-e</span> <span class="s2">"discovery.type=single-node"</span> <span class="se">\</span>
	<span class="nt">-e</span> <span class="nv">ES_JAVA_OPTS</span><span class="o">=</span><span class="s2">"-Xms1024m -Xmx2048m"</span> <span class="se">\</span>
	<span class="nt">-v</span> /home/slienceme/docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <span class="se">\</span>
    <span class="nt">-v</span> /home/slienceme/docker/elasticsearch/data:/usr/share/elasticsearch/data <span class="se">\</span>
    <span class="nt">-v</span> /home/slienceme/docker/elasticsearch/plugins:/usr/share/elasticsearch/plugins <span class="se">\</span>
    <span class="nt">-d</span> elasticsearch:7.4.2

<span class="c"># 3. 设置开机启动</span>
docker update elasticsearch <span class="nt">--restart</span><span class="o">=</span>always

<span class="c"># 4. 测试</span>
<span class="c"># 查看elasticsearch版本信息： 访问 http://虚拟机IP:9200/</span>
</code></pre></div></div>

<p><strong>安装kibana</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 拉取镜像</span>
docker pull kibana:7.4.2          <span class="c"># 可视化检索数据</span>

<span class="c"># 2. 创建容器  虚拟机IP:这个IP需要是docker内部IP </span>
<span class="c"># 通过 下面指令查询</span>
docker ps
docker inspect 容器id
<span class="c">#"Networks": {</span>
<span class="c">#     "bridge": {</span>
<span class="c">#         ...</span>
<span class="c">#         "IPAddress": "`172.17.0.4`",</span>
<span class="c">#         ...</span>
<span class="c">#     }</span>

docker run <span class="nt">-p</span> 5601:5601 <span class="nt">--name</span> kibana 
	<span class="nt">-e</span> <span class="nv">ELASTICSEARCH_HOSTS</span><span class="o">=</span>http://容器内部IP:9200 <span class="se">\</span>
	<span class="nt">-d</span> kibana:7.4.2

<span class="c"># 3. 设置开机启动</span>
docker update kibana <span class="nt">--restart</span><span class="o">=</span>always

<span class="c"># 4. 测试</span>
<span class="c"># 访问Kibana： http://虚拟机IP:5601/app/kibana</span>
</code></pre></div></div>

<h2 id="7-docker安装nginx">7. docker安装nginx</h2>

<p>这种运行会出现问题, 因为需要先把配置文件复制出来才能正常run，所以直接按照第二种方案操作</p>

<blockquote>
  <p>[Nginx in docker - <a href="https://forums.docker.com/t/nginx-in-docker-emerg-1-1-open-etc-nginx-nginx-conf-failed-2-no-such-file-or-directory/103325">emerg] 1#1: open() “/etc/nginx/nginx.conf” failed (2: No such file or directory)</a></p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1. 拉取镜像</span>
docker pull nginx:1.10

<span class="c"># 2. 创建容器</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/html  <span class="c"># 创建多级文件夹</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/logs
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/conf

docker run <span class="nt">-p</span> 80:80 <span class="nt">--name</span> nginx <span class="se">\</span>
 <span class="nt">-v</span> /home/slienceme/docker/nginx/html:/usr/share/nginx/html <span class="se">\</span>
 <span class="nt">-v</span> /home/slienceme/docker/nginx/logs:/var/log/nginx <span class="se">\</span>
 <span class="nt">-v</span> /home/slienceme/docker/nginx/conf:/etc/nginx <span class="se">\</span>
 <span class="nt">-d</span> nginx:1.10

docker run <span class="nt">--name</span> my-custom-nginx-container <span class="se">\</span>
	<span class="nt">-v</span> /host/path/nginx.conf:/etc/nginx/nginx.conf:ro <span class="nt">-d</span> nginx

<span class="c"># 3. 设置开机启动</span>
docker update nginx <span class="nt">--restart</span><span class="o">=</span>always
</code></pre></div></div>

<p>教程其他操作：PS：感觉没啥用，还多出很多操作，我喜欢上面的操作</p>

<blockquote>
  <p>唉，上面教程出问题了，报错，我试试第二种</p>

  <p>10min后~</p>

  <p>怪我太年轻，还得是第二种</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 另外也可以先不拉取镜像，直接run，docker发现没有会自动拉取</span>
<span class="c"># 随便启动一个nginx实例，只是为了复制出配置</span>
docker run <span class="nt">-p80</span>:80 <span class="nt">--name</span> nginx <span class="nt">-d</span> nginx:1.10   

<span class="c"># 创建映射文件夹</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/html
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/logs
<span class="nb">mkdir</span> <span class="nt">-p</span> /home/slienceme/docker/nginx/conf

<span class="c"># 将容器内的配置文件拷贝到/home/slienceme/docker/nginx/conf/ 下</span>
docker container <span class="nb">cp </span>nginx:/etc/nginx/  /home/slienceme/docker/nginx/conf/ 

<span class="c"># 这里复杂成功了，但是移动可能会出现权限问题nginx是root</span>
<span class="c"># 递归修改文件及子目录和文件权限</span>
<span class="nb">sudo chown</span> <span class="nt">-R</span> slienceme:slienceme /home/slienceme/docker/nginx/conf/nginx

<span class="c">#由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中</span>
<span class="nb">mv</span> /home/slienceme/docker/nginx/conf/nginx/<span class="k">*</span> /home/slienceme/docker/nginx/conf/
<span class="nb">rm</span> <span class="nt">-rf</span> /home/slienceme/docker/nginx/conf/nginx

<span class="c"># 终止原容器</span>
docker stop nginx

<span class="c"># 执行命令删除原容器</span>
docker <span class="nb">rm </span>nginx

<span class="c"># 创建新的Nginx，执行以下命令</span>
docker run <span class="nt">-p</span> 80:80 <span class="nt">--name</span> nginx <span class="se">\</span>
 <span class="nt">-v</span> /mydata/nginx/html:/usr/share/nginx/html <span class="se">\</span>
 <span class="nt">-v</span> /mydata/nginx/logs:/var/log/nginx <span class="se">\</span>
 <span class="nt">-v</span> /mydata/nginx/conf/:/etc/nginx <span class="se">\</span>
 <span class="nt">-d</span> nginx:1.10
 
<span class="c"># 设置开机启动nginx</span>
docker update nginx <span class="nt">--restart</span><span class="o">=</span>always

<span class="c"># 创建“/mydata/nginx/html/index.html”文件，测试是否能够正常访问</span>
<span class="nb">echo</span> <span class="s1">'&lt;h2&gt;hello nginx!&lt;/h2&gt;'</span> <span class="o">&gt;</span>index.html

<span class="c"># 访问：http://ngix所在主机的IP:80/index.html</span>
</code></pre></div></div>]]></content><author><name>slience_me</name></author><category term="服务器" /><category term="Linux" /><category term="指令汇总" /><summary type="html"><![CDATA[Docker的安装与使用]]></summary></entry><entry><title type="html">服务器｜FRP内网穿透</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/19/frp/" rel="alternate" type="text/html" title="服务器｜FRP内网穿透" /><published>2025-02-19T00:00:00+08:00</published><updated>2025-02-19T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/19/frp</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/19/frp/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<blockquote>
  <p>PS: 由于我有一台闲置的ThinkPad笔记本4c16g和一个低性能的云服务器2c2g，所以采用FRP去使用高性能的本地服务器</p>
</blockquote>

<h1 id="frp内网穿透">FRP内网穿透</h1>

<h2 id="一-frp简介">一. Frp简介</h2>

<p>frp（Fast Reverse Proxy）是一款高性能的反向代理应用，专为内网穿透设计。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，同时也具备 P2P（点对点）通信功能。通过在一个具有公网 IP 地址的中转节点上运行 frp，用户可以将内网服务暴露到公网，从而简化内网访问和管理的复杂性。</p>

<p>在实际应用中，frp 能够有效解决内网服务无法直接访问的问题。无论是个人用户在家搭建的 Web 服务，还是公司内部的开发环境，只需要在内网一端运行 frp 客户端，通过公网节点中转，即可实现内网服务的远程访问。这样的配置既安全可靠，又能大幅降低网络架构的复杂度。</p>

<p>除了常见的 Web 服务，frp 还支持一系列高级功能，包括：</p>

<ul>
  <li>通过端口映射将多个内网服务暴露到外部；</li>
  <li>支持多种认证方式和加密传输，确保数据的安全性；</li>
  <li>支持基于域名的路由分发，将不同域名映射到不同的内网服务；</li>
  <li>提供自动重连和断点续传等稳定性和容错机制。</li>
</ul>

<p>frp 的高效性和灵活性使其广泛应用于开发、运维、远程访问、物联网（IoT）设备接入等场景，是解决内网穿透需求的理想工具。</p>

<p>frp 项目地址：https://github.com/fatedier/frp</p>

<h2 id="二-frp特性">二. Frp特性</h2>

<p>通过在具有公网 IP 地址的节点上部署 frp 服务端，用户可以轻松实现内网服务的公网穿透，同时享受以下多种专业功能特性：</p>

<ul>
  <li><strong>多协议支持</strong>：客户端与服务端之间支持 TCP、QUIC、KCP、WebSocket 等多种协议，灵活应对不同的应用需求。</li>
  <li><strong>TCP连接流式复用</strong>：采用流式复用技术，在单一连接中承载更多请求，显著降低连接建立时间和请求延迟。</li>
  <li><strong>负载均衡</strong>：支持代理组间的负载均衡，优化资源分配，提高服务性能和可靠性。</li>
  <li><strong>端口复用</strong>：多个服务可以通过同一个服务端端口进行暴露，节省端口资源，简化配置。</li>
  <li><strong>P2P通信</strong>：支持 P2P 通信模式，流量绕过服务器中转，充分利用带宽资源，降低延迟。</li>
  <li><strong>原生客户端插件支持</strong>：提供多个原生客户端插件，例如静态文件查看、HTTPS/HTTP 协议转换、HTTP/SOCKS5 代理等，便于独立使用 frp 客户端完成特定任务。</li>
  <li><strong>高度可扩展的插件系统</strong>：服务端插件系统具备高度的扩展性，用户可以根据需求扩展功能。</li>
  <li><strong>UI支持</strong>：提供服务端和客户端的图形界面（UI），使配置和管理更加简便直观。</li>
</ul>

<p>这些特性使得 frp 在企业级应用、远程办公、云计算等领域具有广泛的应用场景，成为一款功能全面、稳定高效的内网穿透解决方案。</p>

<h2 id="三-架构与工作原理">三. 架构与工作原理</h2>

<p>frp 由两个核心组件构成：客户端 (frpc) 和 服务端 (frps)。通常情况下，服务端（frps）部署在具有公网 IP 地址的服务器上，而客户端（frpc）则运行在需要穿透的内网机器上。</p>

<h3 id="41-架构概述">4.1. 架构概述</h3>

<p>在典型的应用场景中，内网机器通常无法直接与外网进行通信，因为它们没有公网 IP 地址。因此，这些机器上的服务（如 Web 服务、数据库、SSH 连接等）无法被外部用户直接访问。frp 通过建立客户端与服务端的连接，解决了这一问题。</p>

<ul>
  <li><strong>服务端（frps）</strong>：部署在公网可访问的服务器上，负责接收来自外部的请求，并将这些请求转发到连接到该服务端的内网客户端。服务端是整个架构的“网关”，它负责处理所有外部的网络请求。</li>
  <li><strong>客户端（frpc）</strong>：运行在内网的机器上，负责与服务端建立连接并保持通信。客户端通过 frp 配置文件指定需要暴露的内网服务端口或应用，服务端接收到请求后，会通过已经建立的连接将请求转发到对应的内网服务。</li>
</ul>

<h3 id="42-工作原理">4.2. 工作原理</h3>

<ol>
  <li><strong>连接建立</strong>：当客户端启动时，frpc 会通过预先配置好的设置与服务端（frps）建立一个稳定的长连接。这个连接通常是 TCP 或 UDP 类型，确保客户端和服务端之间的持续通信。</li>
  <li><strong>请求转发</strong>：外部用户访问服务端的公网 IP 地址时，frps 会根据请求的端口、协议或域名等信息，判断请求应当转发到哪个内网客户端。frps 通过已经建立的连接，将请求转发到相应的 frpc 客户端。</li>
  <li><strong>内网服务响应</strong>：内网的 frpc 客户端收到请求后，将请求转发到本地运行的服务（如 Web 服务器、数据库、SSH 等），并获取响应数据。之后，frpc 将响应数据通过已建立的长连接返回给服务端，服务端再将响应数据传递给外部用户。</li>
  <li><strong>双向通信</strong>：通过上述过程，外部用户能够像访问公网服务一样与内网服务进行通信，而内网服务也可以通过服务端与外部进行双向交互。整个过程中，内网机器无需直接暴露给外网，大大增强了安全性。</li>
</ol>

<h3 id="43-特点与优势">4.3. 特点与优势</h3>

<ul>
  <li><strong>简化网络架构</strong>：frp 将内网服务暴露到外网的过程完全透明，用户不需要进行复杂的端口映射或公网 IP 配置，极大简化了网络架构。</li>
  <li><strong>灵活的路由机制</strong>：服务端根据不同的请求信息（如端口、域名等），智能地将请求路由到相应的内网服务。通过域名和端口映射，用户可以将多个不同的内网服务暴露到公网。</li>
  <li><strong>高效的连接管理</strong>：frp 利用持久的连接和流式复用技术，最大限度地减少了连接的建立和中转延迟，使得内外网通信更加高效。</li>
  <li><strong>安全可靠</strong>：通过加密传输、身份认证等机制，frp 确保数据的安全性。此外，客户端与服务端的长连接和断点续传功能，使得即使在网络中断时也能够自动恢复，保障了稳定性。</li>
</ul>

<p><img src="/images/posts/architecture.png" alt="img" /></p>

<h2 id="四-相关概念">四. 相关概念</h2>

<h3 id="41-代理">4.1. 代理</h3>

<p>在 frp 中，<strong>代理</strong>是指将内网服务暴露到公网的配置项。每个代理对应一个内网服务，负责将外部请求转发到该内网服务上。通过配置不同的代理，用户可以将多个内网服务同时暴露到外部网络。例如，用户可以同时将 Web 服务、SSH 服务和数据库服务通过不同的代理进行暴露。</p>

<p>一个客户端（frpc）可以同时配置多个代理，以满足多种不同的需求。这使得 frp 在复杂网络环境中，能够灵活地支持多种应用场景，帮助用户高效地管理和访问不同的内网服务。</p>

<h3 id="42-代理类型">4.2. 代理类型</h3>

<p>frp 提供了多种代理类型，以适应不同的应用需求和使用场景。以下是一些常见的代理类型：</p>

<ul>
  <li><strong>TCP</strong>：提供传统的 TCP 端口映射功能。通过 TCP 代理，服务端可以根据请求的端口将流量转发到不同的内网服务。适用于需要在外网访问 TCP 协议的服务，如 Web 服务、SSH 等。</li>
  <li><strong>UDP</strong>：与 TCP 代理类似，但专为 UDP 流量设计。UDP 代理可以将外部的 UDP 请求转发到内网的 UDP 服务，适用于实时通信、视频流、VoIP 等场景。</li>
  <li><strong>HTTP</strong>：专门为 HTTP 协议设计的代理，支持通过 HTTP 请求转发流量。除了基本的端口映射功能外，HTTP 代理还可以进行额外的处理，如修改 Host Header 和增加访问鉴权功能。这对于 Web 应用场景非常有用，特别是在需要进行反向代理或负载均衡时。</li>
  <li><strong>HTTPS</strong>：与 HTTP 代理类似，HTTPS 代理专为处理加密的 HTTPS 流量设计。它不仅能够转发 HTTPS 请求，还能提供 SSL/TLS 终止，帮助用户实现更加安全的内网服务暴露。</li>
  <li><strong>STCP</strong>：提供安全的 TCP 内网代理。STCP 代理使用加密技术来保护数据传输，确保流量的安全性。在 STCP 代理中，数据通过加密隧道传输，因此无需在服务端暴露端口，也能保证通信的安全性。STCP 适用于需要高安全性的环境。</li>
  <li><strong>SUDP</strong>：与 STCP 类似，SUDP 提供安全的 UDP 内网代理。它同样使用加密隧道来保护 UDP 流量，在无需在服务端暴露端口的情况下实现安全的 UDP 内网穿透。这对于需要加密保护的实时流量非常适用。</li>
  <li><strong>XTCP</strong>：点对点（P2P）内网穿透代理。XTCP 代理不需要通过服务端进行流量中转，而是直接建立内网客户端之间的连接，利用点对点技术进行通信。通过 XTPC，内网服务可以在不通过公网服务器的情况下直接连接，减少延迟并提高带宽利用率。适用于需要高效、低延迟的通信场景。</li>
  <li><strong>TCPMUX</strong>：提供服务端 TCP 端口的多路复用。通过 TCPMUX，多个内网服务可以共享同一个服务端端口。请求通过不同的标识符（如端口号或协议）来区分，从而访问不同的内网服务。这种方式能够显著减少对公网端口的需求，优化资源使用。</li>
</ul>

<h3 id="43-代理类型选择">4.3. 代理类型选择</h3>

<p>每种代理类型针对特定的需求和场景进行优化，因此用户应根据实际使用情况选择最合适的代理类型。例如，如果需要在外部访问 Web 服务，HTTP 或 HTTPS 代理将是最好的选择；如果需要实现加密传输和提高安全性，则 STCP 或 SUDP 会更为合适；对于高性能和低延迟的场景，XTCP 可以提供更优的体验。</p>

<p>通过合理选择代理类型，用户能够更加灵活地配置 frp，满足不同的网络穿透需求。</p>

<h2 id="五-安装">五. 安装</h2>

<h3 id="51-需求描述">5.1. 需求描述</h3>

<p>公司内部有一台位于内网的服务器 A 和一台拥有公网 IP 地址的云服务器 B。在内网服务器 A 上运行着 web服务，现在需要将 web服务通过公网暴露出来，以便外部用户能够通过云服务器 B 的公网 IP 进行访问。</p>

<blockquote>
  <p>PS: 我有一台位于内网的ThinkPad服务器A和一台拥有公网IP地址的云服务器B。在内网服务器A上运行着web服务，现在需要将web务通过公网暴露出来，以便外部用户能够通过云服务器 B 的公网 IP 进行访问。</p>
</blockquote>

<h3 id="52-下载安装包">5.2. 下载安装包</h3>

<p>从官方 GitHub Release 页面下载 frp 的最新二进制安装包：<a href="https://github.com/fatedier/frp/releases">frp Releases</a>。截至目前，最新版本为 v0.54.0。Linux 版本的下载链接为：<a href="https://github.com/fatedier/frp/releases/download/v0.54.0/frp_0.54.0_linux_amd64.tar.gz">frp_0.54.0_linux_amd64.tar.gz</a>。</p>

<h3 id="53-公网服务器部署-frp">5.3. 公网服务器部署 frp</h3>

<blockquote>
  <p>当前服务器的公网IP：xxx.xxx.xxx.xxx</p>
</blockquote>

<h4 id="1-上传安装包并解压">(1) 上传安装包并解压</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-xf</span> frp_0.54.0_linux_amd64.tar.gz
<span class="nb">mv </span>frp_0.54.0_linux_amd64 frp
<span class="nb">cd </span>frp
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 目录结构
frp
├── frpc
├── frpc.toml
├── frps
├── frps.log
├── frps.toml
├── LICENSE
└── logs
    └── frps.log
</code></pre></div></div>

<h4 id="2-修改配置">(2) 修改配置</h4>

<p>编辑 <code class="language-plaintext highlighter-rouge">frps.toml</code> 配置文件，设置服务端的相关参数。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim frps.toml
</code></pre></div></div>

<p>配置内容：</p>

<blockquote>
  <p>现在需要详细的介绍一下：
<code class="language-plaintext highlighter-rouge">bindAddr</code>：服务端监听地址，用于接收 frpc 的连接，默认监听 0.0.0.0</p>

  <p><code class="language-plaintext highlighter-rouge">bindPort</code>：服务端监听端口，默认值为 7000</p>

  <p><code class="language-plaintext highlighter-rouge">auth.method</code>：鉴权方式，可选值为 token 或 oidc，默认为 token</p>

  <p><code class="language-plaintext highlighter-rouge">auth.token</code>：在 method 为 token 时生效，客户端需要设置一样的值才能鉴权通过</p>

  <p><code class="language-plaintext highlighter-rouge">webServer</code>：用于服务器端的web界面显示</p>
</blockquote>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 服务绑定的IP与端口</span>
<span class="py">bindAddr</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>
<span class="py">bindPort</span> <span class="p">=</span> <span class="mi">7000</span>

<span class="c"># Web Dashboard 配置</span>
<span class="py">webServer.addr</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>
<span class="py">webServer.port</span> <span class="p">=</span> <span class="mi">7500</span>
<span class="py">webServer.user</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="py">webServer.password</span> <span class="p">=</span> <span class="s">"admin"</span>

<span class="c"># 启用 Prometheus 监控指标</span>
<span class="py">enablePrometheus</span> <span class="p">=</span> <span class="kc">true</span>

<span class="c"># Token 权限验证，需与客户端配置一致</span>
<span class="py">auth.method</span> <span class="p">=</span> <span class="s">"token"</span>
<span class="py">auth.token</span> <span class="p">=</span> <span class="s">"123456"</span>

<span class="c"># 日志配置</span>
<span class="py">log.to</span> <span class="p">=</span> <span class="s">"/app/frp/logs/frps.log"</span>
<span class="py">log.level</span> <span class="p">=</span> <span class="s">"info"</span>
<span class="py">log.maxDays</span> <span class="p">=</span> <span class="mi">3</span>
</code></pre></div></div>

<h4 id="3-创建日志目录">(3) 创建日志目录</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /app/frp/logs
</code></pre></div></div>

<h4 id="4-启动服务">(4) 启动服务</h4>

<ol>
  <li>
    <p><strong>命令行方式启动</strong>：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./frps <span class="nt">-c</span> ./frps.toml
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>后台启动</strong>：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">nohup</span> ./frps <span class="nt">-c</span> ./frps.toml &amp;&gt; /dev/null &amp;
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>使用 systemd 启动</strong>：</p>

    <ul>
      <li>创建 <code class="language-plaintext highlighter-rouge">frps.service</code> 启动文件：</li>
    </ul>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> vim /etc/systemd/system/frps.service
</code></pre></div>    </div>
  </li>
</ol>

<p>配置文件内容：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="c"># 服务名称，可自定义
</span><span class="py">Description</span> <span class="p">=</span> <span class="s">frp server</span>
<span class="py">After</span> <span class="p">=</span> <span class="s">network.target syslog.target</span>
<span class="py">Wants</span> <span class="p">=</span> <span class="s">network.target</span>

<span class="nn">[Service]</span>
<span class="py">Type</span> <span class="p">=</span> <span class="s">simple</span>
<span class="c"># 启动 frps 的命令，需修改为您的 frps 安装路径
</span><span class="py">ExecStart</span> <span class="p">=</span> <span class="s">/app/frp/frps -c /app/frp/frps.toml</span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span> <span class="p">=</span> <span class="s">multi-user.target</span>
</code></pre></div></div>

<ul>
  <li>启动服务：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl start frps
</code></pre></div></div>

<h4 id="5-开放防火墙">(5) 开放防火墙</h4>

<blockquote>
  <p>去 <code class="language-plaintext highlighter-rouge">云服务器</code> 后台的 <code class="language-plaintext highlighter-rouge">安全组</code> 开放端口</p>
</blockquote>

<h4 id="6-测试服务端后台">(6) 测试服务端后台</h4>

<blockquote>
  <p>访问：<code class="language-plaintext highlighter-rouge">http://xxx.xxx.xxx.xxx:7500</code></p>

  <p>用户名：<code class="language-plaintext highlighter-rouge">admin</code></p>

  <p>密码：<code class="language-plaintext highlighter-rouge">admin</code></p>
</blockquote>

<p><img src="/images/posts/image-20250219182117453.png" alt="image-20250219182117453" /></p>

<p><img src="/images/posts/image-20250219182229288.png" alt="image-20250219182229288" /></p>

<h3 id="54-内网服务器部署-frp">5.4. 内网服务器部署 frp</h3>

<blockquote>
  <p>当前服务器的内网IP：127.0.0.1</p>
</blockquote>

<h4 id="1-上传安装包并解压-1">(1) 上传安装包并解压</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-xf</span> frp_0.54.0_linux_amd64.tar.gz
<span class="nb">mv </span>frp_0.54.0_linux_amd64 frp
<span class="nb">cd </span>frp
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 目录结构</span>
frp
├── conf.d
│└── purecolor.toml
├── frpc
├── frpc.toml
├── frps
├── frps.toml
├── LICENSE
└── logs
    └── frpc.log
</code></pre></div></div>

<h4 id="2-创建代理配置目录与日志存储目录">(2) 创建代理配置目录与日志存储目录</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>logs conf.d
</code></pre></div></div>

<h4 id="3-修改配置">(3) 修改配置</h4>

<p>编辑 <code class="language-plaintext highlighter-rouge">frpc.toml</code> 配置文件，设置客户端的相关参数。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim frpc.toml
</code></pre></div></div>

<p>配置内容：</p>

<blockquote>
  <p>现在需要详细的介绍一下：
<code class="language-plaintext highlighter-rouge">serverAddr</code>：连接服务端的地址</p>

  <p><code class="language-plaintext highlighter-rouge">serverPort</code>：连接服务端的端口，默认为 7000</p>

  <p><code class="language-plaintext highlighter-rouge">auth.method</code>：鉴权方式，可选值为 token 或 oidc，默认为 token</p>

  <p><code class="language-plaintext highlighter-rouge">auth.token</code>：在 method 为 token 时生效，客户端需要设置一样的值才能鉴权通过</p>

  <p><code class="language-plaintext highlighter-rouge">webServer</code>：用于服务器端的web界面显示</p>

  <p><code class="language-plaintext highlighter-rouge">./conf.d/</code>：这里面存放不同的代理配置</p>
</blockquote>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 配置公网服务器上 frp 服务的 IP 与端口</span>
<span class="py">serverAddr</span> <span class="p">=</span> <span class="s">"xxx.xxx.xxx.xxx"</span>  <span class="c"># 填写公网服务器 IP</span>
<span class="py">serverPort</span> <span class="p">=</span> <span class="mi">7000</span>

<span class="c"># Web Dashboard 配置</span>
<span class="py">webServer.addr</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>
<span class="py">webServer.port</span> <span class="p">=</span> <span class="mi">7400</span>
<span class="py">webServer.user</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="py">webServer.password</span> <span class="p">=</span> <span class="s">"admin"</span>

<span class="c"># 日志配置</span>
<span class="py">log.to</span> <span class="p">=</span> <span class="s">"/app/frp/logs/frpc.log"</span>
<span class="py">log.level</span> <span class="p">=</span> <span class="s">"info"</span>
<span class="py">log.maxDays</span> <span class="p">=</span> <span class="mi">3</span>

<span class="c"># Token 权限验证，需与服务端配置一致</span>
<span class="py">auth.method</span> <span class="p">=</span> <span class="s">"token"</span>
<span class="py">auth.token</span> <span class="p">=</span> <span class="s">"123456"</span>

<span class="c"># 代理配置，这里使用引用文件的方式</span>
<span class="py">includes</span> <span class="p">=</span> <span class="nn">["./conf.d/*.toml"]</span>
</code></pre></div></div>

<p>编辑代理配置文件 <code class="language-plaintext highlighter-rouge">webapp.toml</code>，将内网 Jenkins 服务暴露到公网。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ./conf.d/webapp.toml
</code></pre></div></div>

<p>配置内容：</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"mywebapp"</span>           <span class="c"># 代理名称</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>                <span class="c"># 代理类型，TCP</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>       <span class="c"># 内网服务的 IP</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">8080</span>            <span class="c"># 服务监听的端口(即内网web项目服务的端口)</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">8500</span>           <span class="c"># 公网服务器上监听的端口(设置服务器所对应的端口)</span>
</code></pre></div></div>

<blockquote>
  <p>(内网)127.0.0.1:8080 -&gt; (公网) xxx.xxx.xxx.xxx:8500</p>
</blockquote>

<h4 id="4-启动服务-1">(4) 启动服务</h4>

<ol>
  <li><strong>命令行方式启动</strong>：</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./frpc <span class="nt">-c</span> ./frpc.toml
</code></pre></div></div>

<ol>
  <li><strong>后台启动</strong>：</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">nohup</span> ./frpc <span class="nt">-c</span> ./frpc.toml &amp;&gt; /dev/null &amp;
</code></pre></div></div>

<ol>
  <li><strong>使用 systemd 启动</strong>：</li>
</ol>

<ul>
  <li>创建 <code class="language-plaintext highlighter-rouge">frpc.service</code> 启动文件：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/systemd/system/frpc.service
</code></pre></div></div>

<p>配置文件内容：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="c"># 服务名称，可自定义
</span><span class="py">Description</span> <span class="p">=</span> <span class="s">frp client</span>
<span class="py">After</span> <span class="p">=</span> <span class="s">network.target syslog.target</span>
<span class="py">Wants</span> <span class="p">=</span> <span class="s">network.target</span>

<span class="nn">[Service]</span>
<span class="py">Type</span> <span class="p">=</span> <span class="s">simple</span>
<span class="c"># 启动 frpc 的命令，需修改为您的 frpc 安装路径
</span><span class="py">ExecStart</span> <span class="p">=</span> <span class="s">/app/frp/frpc -c /app/frp/frpc.toml</span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span> <span class="p">=</span> <span class="s">multi-user.target</span>
</code></pre></div></div>

<ul>
  <li>启动服务：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl start frpc
</code></pre></div></div>

<h4 id="5-开放防火墙-1">(5) 开放防火墙</h4>

<blockquote>
  <p>去 <code class="language-plaintext highlighter-rouge">本地服务器</code> 的开放端口</p>

  <p><code class="language-plaintext highlighter-rouge">ufw allow xxxx</code></p>
</blockquote>

<h4 id="6-测试服务端后台-1">(6) 测试服务端后台</h4>

<blockquote>
  <p>访问：<code class="language-plaintext highlighter-rouge">http://127.0.0.1:7400</code></p>

  <p>用户名：<code class="language-plaintext highlighter-rouge">admin</code></p>

  <p>密码：<code class="language-plaintext highlighter-rouge">admin</code></p>
</blockquote>

<p><img src="/images/posts/image-20250219185741385.png" alt="image-20250219185741385" /></p>

<h3 id="55-访问测试汇总">5.5. 访问测试汇总</h3>

<ul>
  <li>在浏览器中访问公网服务器的 web 服务：
 <code class="language-plaintext highlighter-rouge">http://xxx.xxx.xxx.xxx:8500</code>
 即可访问到内网的 web服务。</li>
  <li>公网服务器的 Web Dashboard：
 <code class="language-plaintext highlighter-rouge">http://xxx.xxx.xxx.xxx:7500</code>
 登录界面将显示为 <code class="language-plaintext highlighter-rouge">admin</code> 用户，密码为 <code class="language-plaintext highlighter-rouge">admin</code>。</li>
  <li>公网服务器的 Prometheus 监控指标：
 <code class="language-plaintext highlighter-rouge">http://xxx.xxx.xxx.xxx:7500/metrics</code>
 用于查看服务的实时监控数据。</li>
</ul>

<blockquote>
  <p><strong>注意：</strong> 如果公网服务器启用了安全组或防火墙，请确保相应的端口已开放。</p>
</blockquote>

<h2 id="六-附录">六. 附录：</h2>

<p>从官网下载了服务端与客户端的全配置文件，仅供参考</p>

<h3 id="61-服务端全配置文件">6.1. 服务端全配置文件</h3>

<p>frps_full_example.toml</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues.</span>

<span class="c"># A literal address or host name for IPv6 must be enclosed</span>
<span class="c"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"</span>
<span class="c"># For single "bindAddr" field, no need square brackets, like `bindAddr = "::"`.</span>
<span class="py">bindAddr</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>
<span class="py">bindPort</span> <span class="p">=</span> <span class="mi">7000</span>

<span class="c"># udp port used for kcp protocol, it can be same with 'bindPort'.</span>
<span class="c"># if not set, kcp is disabled in frps.</span>
<span class="py">kcpBindPort</span> <span class="p">=</span> <span class="mi">7000</span>

<span class="c"># udp port used for quic protocol.</span>
<span class="c"># if not set, quic is disabled in frps.</span>
<span class="c"># quicBindPort = 7002</span>

<span class="c"># Specify which address proxy will listen for, default value is same with bindAddr</span>
<span class="c"># proxyBindAddr = "127.0.0.1"</span>

<span class="c"># quic protocol options</span>
<span class="c"># transport.quic.keepalivePeriod = 10</span>
<span class="c"># transport.quic.maxIdleTimeout = 30</span>
<span class="c"># transport.quic.maxIncomingStreams = 100000</span>

<span class="c"># Heartbeat configure, it's not recommended to modify the default value</span>
<span class="c"># The default value of heartbeatTimeout is 90. Set negative value to disable it.</span>
<span class="c"># transport.heartbeatTimeout = 90</span>

<span class="c"># Pool count in each proxy will keep no more than maxPoolCount.</span>
<span class="py">transport.maxPoolCount</span> <span class="p">=</span> <span class="mi">5</span>

<span class="c"># If tcp stream multiplexing is used, default is true</span>
<span class="c"># transport.tcpMux = true</span>

<span class="c"># Specify keep alive interval for tcp mux.</span>
<span class="c"># only valid if tcpMux is true.</span>
<span class="c"># transport.tcpMuxKeepaliveInterval = 60</span>

<span class="c"># tcpKeepalive specifies the interval between keep-alive probes for an active network connection between frpc and frps.</span>
<span class="c"># If negative, keep-alive probes are disabled.</span>
<span class="c"># transport.tcpKeepalive = 7200</span>

<span class="c"># transport.tls.force specifies whether to only accept TLS-encrypted connections. By default, the value is false.</span>
<span class="py">transport.tls.force</span> <span class="p">=</span> <span class="kc">false</span>

<span class="c"># transport.tls.certFile = "server.crt"</span>
<span class="c"># transport.tls.keyFile = "server.key"</span>
<span class="c"># transport.tls.trustedCaFile = "ca.crt"</span>

<span class="c"># If you want to support virtual host, you must set the http port for listening (optional)</span>
<span class="c"># Note: http port and https port can be same with bindPort</span>
<span class="py">vhostHTTPPort</span> <span class="p">=</span> <span class="mi">80</span>
<span class="py">vhostHTTPSPort</span> <span class="p">=</span> <span class="mi">443</span>

<span class="c"># Response header timeout(seconds) for vhost http server, default is 60s</span>
<span class="c"># vhostHTTPTimeout = 60</span>

<span class="c"># tcpmuxHTTPConnectPort specifies the port that the server listens for TCP</span>
<span class="c"># HTTP CONNECT requests. If the value is 0, the server will not multiplex TCP</span>
<span class="c"># requests on one single port. If it's not - it will listen on this value for</span>
<span class="c"># HTTP CONNECT requests. By default, this value is 0.</span>
<span class="c"># tcpmuxHTTPConnectPort = 1337</span>

<span class="c"># If tcpmuxPassthrough is true, frps won't do any update on traffic.</span>
<span class="c"># tcpmuxPassthrough = false</span>

<span class="c"># Configure the web server to enable the dashboard for frps.</span>
<span class="c"># dashboard is available only if webServer.port is set.</span>
<span class="py">webServer.addr</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">webServer.port</span> <span class="p">=</span> <span class="mi">7500</span>
<span class="py">webServer.user</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="py">webServer.password</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="c"># webServer.tls.certFile = "server.crt"</span>
<span class="c"># webServer.tls.keyFile = "server.key"</span>
<span class="c"># dashboard assets directory(only for debug mode)</span>
<span class="c"># webServer.assetsDir = "./static"</span>

<span class="c"># Enable golang pprof handlers in dashboard listener.</span>
<span class="c"># Dashboard port must be set first</span>
<span class="py">webServer.pprofEnable</span> <span class="p">=</span> <span class="kc">false</span>

<span class="c"># enablePrometheus will export prometheus metrics on webServer in /metrics api.</span>
<span class="py">enablePrometheus</span> <span class="p">=</span> <span class="kc">true</span>

<span class="c"># console or real logFile path like ./frps.log</span>
<span class="py">log.to</span> <span class="p">=</span> <span class="s">"./frps.log"</span>
<span class="c"># trace, debug, info, warn, error</span>
<span class="py">log.level</span> <span class="p">=</span> <span class="s">"info"</span>
<span class="py">log.maxDays</span> <span class="p">=</span> <span class="mi">3</span>
<span class="c"># disable log colors when log.to is console, default is false</span>
<span class="py">log.disablePrintColor</span> <span class="p">=</span> <span class="kc">false</span>

<span class="c"># DetailedErrorsToClient defines whether to send the specific error (with debug info) to frpc. By default, this value is true.</span>
<span class="py">detailedErrorsToClient</span> <span class="p">=</span> <span class="kc">true</span>

<span class="c"># auth.method specifies what authentication method to use authenticate frpc with frps.</span>
<span class="c"># If "token" is specified - token will be read into login message.</span>
<span class="c"># If "oidc" is specified - OIDC (Open ID Connect) token will be issued using OIDC settings. By default, this value is "token".</span>
<span class="py">auth.method</span> <span class="p">=</span> <span class="s">"token"</span>

<span class="c"># auth.additionalScopes specifies additional scopes to include authentication information.</span>
<span class="c"># Optional values are HeartBeats, NewWorkConns.</span>
<span class="c"># auth.additionalScopes = ["HeartBeats", "NewWorkConns"]</span>

<span class="c"># auth token</span>
<span class="py">auth.token</span> <span class="p">=</span> <span class="s">"12345678"</span>

<span class="c"># oidc issuer specifies the issuer to verify OIDC tokens with.</span>
<span class="py">auth.oidc.issuer</span> <span class="p">=</span> <span class="s">""</span>
<span class="c"># oidc audience specifies the audience OIDC tokens should contain when validated.</span>
<span class="py">auth.oidc.audience</span> <span class="p">=</span> <span class="s">""</span>
<span class="c"># oidc skipExpiryCheck specifies whether to skip checking if the OIDC token is expired.</span>
<span class="py">auth.oidc.skipExpiryCheck</span> <span class="p">=</span> <span class="kc">false</span>
<span class="c"># oidc skipIssuerCheck specifies whether to skip checking if the OIDC token's issuer claim matches the issuer specified in OidcIssuer.</span>
<span class="py">auth.oidc.skipIssuerCheck</span> <span class="p">=</span> <span class="kc">false</span>

<span class="c"># userConnTimeout specifies the maximum time to wait for a work connection.</span>
<span class="c"># userConnTimeout = 10</span>

<span class="c"># Only allow frpc to bind ports you list. By default, there won't be any limit.</span>
<span class="py">allowPorts</span> <span class="p">=</span> <span class="p">[</span>
  <span class="err">{</span> <span class="py">start</span> <span class="p">=</span> <span class="mi">2000</span><span class="p">,</span> <span class="py">end</span> <span class="p">=</span> <span class="mi">3000</span> <span class="err">}</span><span class="p">,</span>
  <span class="err">{</span> <span class="py">single</span> <span class="p">=</span> <span class="mi">3001</span> <span class="err">}</span><span class="p">,</span>
  <span class="err">{</span> <span class="py">single</span> <span class="p">=</span> <span class="mi">3003</span> <span class="err">}</span><span class="p">,</span>
  <span class="err">{</span> <span class="py">start</span> <span class="p">=</span> <span class="mi">4000</span><span class="p">,</span> <span class="py">end</span> <span class="p">=</span> <span class="mi">50000</span> <span class="err">}</span>
<span class="p">]</span>

<span class="c"># Max ports can be used for each client, default value is 0 means no limit</span>
<span class="py">maxPortsPerClient</span> <span class="p">=</span> <span class="mi">0</span>

<span class="c"># If subDomainHost is not empty, you can set subdomain when type is http or https in frpc's configure file</span>
<span class="c"># When subdomain is test, the host used by routing is test.frps.com</span>
<span class="py">subDomainHost</span> <span class="p">=</span> <span class="s">"frps.com"</span>

<span class="c"># custom 404 page for HTTP requests</span>
<span class="c"># custom404Page = "/path/to/404.html"</span>

<span class="c"># specify udp packet size, unit is byte. If not set, the default value is 1500.</span>
<span class="c"># This parameter should be same between client and server.</span>
<span class="c"># It affects the udp and sudp proxy.</span>
<span class="py">udpPacketSize</span> <span class="p">=</span> <span class="mi">1500</span>

<span class="c"># Retention time for NAT hole punching strategy data.</span>
<span class="py">natholeAnalysisDataReserveHours</span> <span class="p">=</span> <span class="mi">168</span>

<span class="c"># ssh tunnel gateway</span>
<span class="c"># If you want to enable this feature, the bindPort parameter is required, while others are optional.</span>
<span class="c"># By default, this feature is disabled. It will be enabled if bindPort is greater than 0.</span>
<span class="c"># sshTunnelGateway.bindPort = 2200</span>
<span class="c"># sshTunnelGateway.privateKeyFile = "/home/frp-user/.ssh/id_rsa"</span>
<span class="c"># sshTunnelGateway.autoGenPrivateKeyPath = ""</span>
<span class="c"># sshTunnelGateway.authorizedKeysFile = "/home/frp-user/.ssh/authorized_keys"</span>

<span class="nn">[[httpPlugins]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"user-manager"</span>
<span class="py">addr</span> <span class="p">=</span> <span class="s">"127.0.0.1:9000"</span>
<span class="py">path</span> <span class="p">=</span> <span class="s">"/handler"</span>
<span class="py">ops</span> <span class="p">=</span> <span class="nn">["Login"]</span>

<span class="nn">[[httpPlugins]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"port-manager"</span>
<span class="py">addr</span> <span class="p">=</span> <span class="s">"127.0.0.1:9001"</span>
<span class="py">path</span> <span class="p">=</span> <span class="s">"/handler"</span>
<span class="py">ops</span> <span class="p">=</span> <span class="nn">["NewProxy"]</span>
</code></pre></div></div>

<h3 id="62-客户端全配置文件">6.2. 客户端全配置文件</h3>

<p><strong>frpc_full_example.toml</strong></p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues.</span>

<span class="c"># your proxy name will be changed to {user}.{proxy}</span>
<span class="py">user</span> <span class="p">=</span> <span class="s">"your_name"</span>

<span class="c"># A literal address or host name for IPv6 must be enclosed</span>
<span class="c"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"</span>
<span class="c"># For single serverAddr field, no need square brackets, like serverAddr = "::".</span>
<span class="py">serverAddr</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>
<span class="py">serverPort</span> <span class="p">=</span> <span class="mi">7000</span>

<span class="c"># STUN server to help penetrate NAT hole.</span>
<span class="c"># natHoleStunServer = "stun.easyvoip.com:3478"</span>

<span class="c"># Decide if exit program when first login failed, otherwise continuous relogin to frps</span>
<span class="c"># default is true</span>
<span class="py">loginFailExit</span> <span class="p">=</span> <span class="kc">true</span>

<span class="c"># console or real logFile path like ./frpc.log</span>
<span class="py">log.to</span> <span class="p">=</span> <span class="s">"./frpc.log"</span>
<span class="c"># trace, debug, info, warn, error</span>
<span class="py">log.level</span> <span class="p">=</span> <span class="s">"info"</span>
<span class="py">log.maxDays</span> <span class="p">=</span> <span class="mi">3</span>
<span class="c"># disable log colors when log.to is console, default is false</span>
<span class="py">log.disablePrintColor</span> <span class="p">=</span> <span class="kc">false</span>

<span class="py">auth.method</span> <span class="p">=</span> <span class="s">"token"</span>
<span class="c"># auth.additionalScopes specifies additional scopes to include authentication information.</span>
<span class="c"># Optional values are HeartBeats, NewWorkConns.</span>
<span class="c"># auth.additionalScopes = ["HeartBeats", "NewWorkConns"]</span>

<span class="c"># auth token</span>
<span class="py">auth.token</span> <span class="p">=</span> <span class="s">"12345678"</span>

<span class="c"># oidc.clientID specifies the client ID to use to get a token in OIDC authentication.</span>
<span class="c"># auth.oidc.clientID = ""</span>
<span class="c"># oidc.clientSecret specifies the client secret to use to get a token in OIDC authentication.</span>
<span class="c"># auth.oidc.clientSecret = ""</span>
<span class="c"># oidc.audience specifies the audience of the token in OIDC authentication.</span>
<span class="c"># auth.oidc.audience = ""</span>
<span class="c"># oidc.scope specifies the permissions of the token in OIDC authentication if AuthenticationMethod == "oidc". By default, this value is "".</span>
<span class="c"># auth.oidc.scope = ""</span>
<span class="c"># oidc.tokenEndpointURL specifies the URL which implements OIDC Token Endpoint.</span>
<span class="c"># It will be used to get an OIDC token.</span>
<span class="c"># auth.oidc.tokenEndpointURL = ""</span>

<span class="c"># oidc.additionalEndpointParams specifies additional parameters to be sent to the OIDC Token Endpoint.</span>
<span class="c"># For example, if you want to specify the "audience" parameter, you can set as follow.</span>
<span class="c"># frp will add "audience=&lt;value&gt;" "var1=&lt;value&gt;" to the additional parameters.</span>
<span class="c"># auth.oidc.additionalEndpointParams.audience = "https://dev.auth.com/api/v2/"</span>
<span class="c"># auth.oidc.additionalEndpointParams.var1 = "foobar"</span>

<span class="c"># Set admin address for control frpc's action by http api such as reload</span>
<span class="py">webServer.addr</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">webServer.port</span> <span class="p">=</span> <span class="mi">7400</span>
<span class="py">webServer.user</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="py">webServer.password</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="c"># Admin assets directory. By default, these assets are bundled with frpc.</span>
<span class="c"># webServer.assetsDir = "./static"</span>

<span class="c"># Enable golang pprof handlers in admin listener.</span>
<span class="py">webServer.pprofEnable</span> <span class="p">=</span> <span class="kc">false</span>

<span class="c"># The maximum amount of time a dial to server will wait for a connect to complete. Default value is 10 seconds.</span>
<span class="c"># transport.dialServerTimeout = 10</span>

<span class="c"># dialServerKeepalive specifies the interval between keep-alive probes for an active network connection between frpc and frps.</span>
<span class="c"># If negative, keep-alive probes are disabled.</span>
<span class="c"># transport.dialServerKeepalive = 7200</span>

<span class="c"># connections will be established in advance, default value is zero</span>
<span class="py">transport.poolCount</span> <span class="p">=</span> <span class="mi">5</span>

<span class="c"># If tcp stream multiplexing is used, default is true, it must be same with frps</span>
<span class="c"># transport.tcpMux = true</span>

<span class="c"># Specify keep alive interval for tcp mux.</span>
<span class="c"># only valid if tcpMux is enabled.</span>
<span class="c"># transport.tcpMuxKeepaliveInterval = 60</span>

<span class="c"># Communication protocol used to connect to server</span>
<span class="c"># supports tcp, kcp, quic, websocket and wss now, default is tcp</span>
<span class="py">transport.protocol</span> <span class="p">=</span> <span class="s">"tcp"</span>

<span class="c"># set client binding ip when connect server, default is empty.</span>
<span class="c"># only when protocol = tcp or websocket, the value will be used.</span>
<span class="py">transport.connectServerLocalIP</span> <span class="p">=</span> <span class="s">"0.0.0.0"</span>

<span class="c"># if you want to connect frps by http proxy or socks5 proxy or ntlm proxy, you can set proxyURL here or in global environment variables</span>
<span class="c"># it only works when protocol is tcp</span>
<span class="c"># transport.proxyURL = "http://user:passwd@192.168.1.128:8080"</span>
<span class="c"># transport.proxyURL = "socks5://user:passwd@192.168.1.128:1080"</span>
<span class="c"># transport.proxyURL = "ntlm://user:passwd@192.168.1.128:2080"</span>

<span class="c"># quic protocol options</span>
<span class="c"># transport.quic.keepalivePeriod = 10</span>
<span class="c"># transport.quic.maxIdleTimeout = 30</span>
<span class="c"># transport.quic.maxIncomingStreams = 100000</span>

<span class="c"># If tls.enable is true, frpc will connect frps by tls.</span>
<span class="c"># Since v0.50.0, the default value has been changed to true, and tls is enabled by default.</span>
<span class="py">transport.tls.enable</span> <span class="p">=</span> <span class="kc">true</span>

<span class="c"># transport.tls.certFile = "client.crt"</span>
<span class="c"># transport.tls.keyFile = "client.key"</span>
<span class="c"># transport.tls.trustedCaFile = "ca.crt"</span>
<span class="c"># transport.tls.serverName = "example.com"</span>

<span class="c"># If the disableCustomTLSFirstByte is set to false, frpc will establish a connection with frps using the</span>
<span class="c"># first custom byte when tls is enabled.</span>
<span class="c"># Since v0.50.0, the default value has been changed to true, and the first custom byte is disabled by default.</span>
<span class="c"># transport.tls.disableCustomTLSFirstByte = true</span>

<span class="c"># Heartbeat configure, it's not recommended to modify the default value.</span>
<span class="c"># The default value of heartbeatInterval is 10 and heartbeatTimeout is 90. Set negative value</span>
<span class="c"># to disable it.</span>
<span class="c"># transport.heartbeatInterval = 30</span>
<span class="c"># transport.heartbeatTimeout = 90</span>

<span class="c"># Specify a dns server, so frpc will use this instead of default one</span>
<span class="c"># dnsServer = "8.8.8.8"</span>

<span class="c"># Proxy names you want to start.</span>
<span class="c"># Default is empty, means all proxies.</span>
<span class="c"># start = ["ssh", "dns"]</span>

<span class="c"># Specify udp packet size, unit is byte. If not set, the default value is 1500.</span>
<span class="c"># This parameter should be same between client and server.</span>
<span class="c"># It affects the udp and sudp proxy.</span>
<span class="py">udpPacketSize</span> <span class="p">=</span> <span class="mi">1500</span>

<span class="c"># Additional metadatas for client.</span>
<span class="py">metadatas.var1</span> <span class="p">=</span> <span class="s">"abc"</span>
<span class="py">metadatas.var2</span> <span class="p">=</span> <span class="s">"123"</span>

<span class="c"># Include other config files for proxies.</span>
<span class="c"># includes = ["./confd/*.ini"]</span>

<span class="nn">[[proxies]]</span>
<span class="c"># 'ssh' is the unique proxy name</span>
<span class="c"># If global user is not empty, it will be changed to {user}.{proxy} such as 'your_name.ssh'</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"ssh"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">22</span>
<span class="c"># Limit bandwidth for this proxy, unit is KB and MB</span>
<span class="py">transport.bandwidthLimit</span> <span class="p">=</span> <span class="s">"1MB"</span>
<span class="c"># Where to limit bandwidth, can be 'client' or 'server', default is 'client'</span>
<span class="py">transport.bandwidthLimitMode</span> <span class="p">=</span> <span class="s">"client"</span>
<span class="c"># If true, traffic of this proxy will be encrypted, default is false</span>
<span class="py">transport.useEncryption</span> <span class="p">=</span> <span class="kc">false</span>
<span class="c"># If true, traffic will be compressed</span>
<span class="py">transport.useCompression</span> <span class="p">=</span> <span class="kc">false</span>
<span class="c"># Remote port listen by frps</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6001</span>
<span class="c"># frps will load balancing connections for proxies in same group</span>
<span class="py">loadBalancer.group</span> <span class="p">=</span> <span class="s">"test_group"</span>
<span class="c"># group should have same group key</span>
<span class="py">loadBalancer.groupKey</span> <span class="p">=</span> <span class="s">"123456"</span>
<span class="c"># Enable health check for the backend service, it supports 'tcp' and 'http' now.</span>
<span class="c"># frpc will connect local service's port to detect it's healthy status</span>
<span class="py">healthCheck.type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="c"># Health check connection timeout</span>
<span class="py">healthCheck.timeoutSeconds</span> <span class="p">=</span> <span class="mi">3</span>
<span class="c"># If continuous failed in 3 times, the proxy will be removed from frps</span>
<span class="py">healthCheck.maxFailed</span> <span class="p">=</span> <span class="mi">3</span>
<span class="c"># Every 10 seconds will do a health check</span>
<span class="py">healthCheck.intervalSeconds</span> <span class="p">=</span> <span class="mi">10</span>
<span class="c"># Additional meta info for each proxy. It will be passed to the server-side plugin for use.</span>
<span class="py">metadatas.var1</span> <span class="p">=</span> <span class="s">"abc"</span>
<span class="py">metadatas.var2</span> <span class="p">=</span> <span class="s">"123"</span>
<span class="c"># You can add some extra information to the proxy through annotations.</span>
<span class="c"># These annotations will be displayed on the frps dashboard.</span>
<span class="nn">[proxies.annotations]</span>
<span class="py">key1</span> <span class="p">=</span> <span class="s">"value1"</span>
<span class="py">"prefix/key2"</span> <span class="p">=</span> <span class="s">"value2"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"ssh_random"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"192.168.31.100"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">22</span>
<span class="c"># If remotePort is 0, frps will assign a random port for you</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">0</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"dns"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"udp"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"114.114.114.114"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">53</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6002</span>

<span class="c"># Resolve your domain names to [serverAddr] so you can use http://web01.yourdomain.com to browse web01 and http://web02.yourdomain.com to browse web02</span>
<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"web01"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"http"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">80</span>
<span class="c"># http username and password are safety certification for http protocol</span>
<span class="c"># if not set, you can access this customDomains without certification</span>
<span class="py">httpUser</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="py">httpPassword</span> <span class="p">=</span> <span class="s">"admin"</span>
<span class="c"># if domain for frps is frps.com, then you can access [web01] proxy by URL http://web01.frps.com</span>
<span class="py">subdomain</span> <span class="p">=</span> <span class="s">"web01"</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["web01.yourdomain.com"]</span>
<span class="c"># locations is only available for http type</span>
<span class="py">locations</span> <span class="p">=</span> <span class="p">[</span><span class="s">"/"</span><span class="p">,</span> <span class="s">"/pic"</span><span class="p">]</span>
<span class="c"># route requests to this service if http basic auto user is abc</span>
<span class="c"># routeByHTTPUser = abc</span>
<span class="py">hostHeaderRewrite</span> <span class="p">=</span> <span class="s">"example.com"</span>
<span class="py">requestHeaders.set.x-from-where</span> <span class="p">=</span> <span class="s">"frp"</span>
<span class="py">healthCheck.type</span> <span class="p">=</span> <span class="s">"http"</span>
<span class="c"># frpc will send a GET http request '/status' to local http service</span>
<span class="c"># http service is alive when it return 2xx http response code</span>
<span class="py">healthCheck.path</span> <span class="p">=</span> <span class="s">"/status"</span>
<span class="py">healthCheck.intervalSeconds</span> <span class="p">=</span> <span class="mi">10</span>
<span class="py">healthCheck.maxFailed</span> <span class="p">=</span> <span class="mi">3</span>
<span class="py">healthCheck.timeoutSeconds</span> <span class="p">=</span> <span class="mi">3</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"web02"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"https"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">8000</span>
<span class="py">subdomain</span> <span class="p">=</span> <span class="s">"web02"</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["web02.yourdomain.com"]</span>
<span class="c"># if not empty, frpc will use proxy protocol to transfer connection info to your local service</span>
<span class="c"># v1 or v2 or empty</span>
<span class="py">transport.proxyProtocolVersion</span> <span class="p">=</span> <span class="s">"v2"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"tcpmuxhttpconnect"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcpmux"</span>
<span class="py">multiplexer</span> <span class="p">=</span> <span class="s">"httpconnect"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">10701</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["tunnel1"]</span>
<span class="c"># routeByHTTPUser = "user1"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_unix_domain_socket"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6003</span>
<span class="c"># if plugin is defined, localIP and localPort is useless</span>
<span class="c"># plugin will handle connections got from frps</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"unix_domain_socket"</span>
<span class="py">unixPath</span> <span class="p">=</span> <span class="s">"/var/run/docker.sock"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_http_proxy"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6004</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"http_proxy"</span>
<span class="py">httpUser</span> <span class="p">=</span> <span class="s">"abc"</span>
<span class="py">httpPassword</span> <span class="p">=</span> <span class="s">"abc"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_socks5"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6005</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"socks5"</span>
<span class="py">username</span> <span class="p">=</span> <span class="s">"abc"</span>
<span class="py">password</span> <span class="p">=</span> <span class="s">"abc"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_static_file"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"tcp"</span>
<span class="py">remotePort</span> <span class="p">=</span> <span class="mi">6006</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"static_file"</span>
<span class="py">localPath</span> <span class="p">=</span> <span class="s">"/var/www/blog"</span>
<span class="py">stripPrefix</span> <span class="p">=</span> <span class="s">"static"</span>
<span class="py">httpUser</span> <span class="p">=</span> <span class="s">"abc"</span>
<span class="py">httpPassword</span> <span class="p">=</span> <span class="s">"abc"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_https2http"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"https"</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["test.yourdomain.com"]</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"https2http"</span>
<span class="py">localAddr</span> <span class="p">=</span> <span class="s">"127.0.0.1:80"</span>
<span class="py">crtPath</span> <span class="p">=</span> <span class="s">"./server.crt"</span>
<span class="py">keyPath</span> <span class="p">=</span> <span class="s">"./server.key"</span>
<span class="py">hostHeaderRewrite</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">requestHeaders.set.x-from-where</span> <span class="p">=</span> <span class="s">"frp"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_https2https"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"https"</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["test.yourdomain.com"]</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"https2https"</span>
<span class="py">localAddr</span> <span class="p">=</span> <span class="s">"127.0.0.1:443"</span>
<span class="py">crtPath</span> <span class="p">=</span> <span class="s">"./server.crt"</span>
<span class="py">keyPath</span> <span class="p">=</span> <span class="s">"./server.key"</span>
<span class="py">hostHeaderRewrite</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">requestHeaders.set.x-from-where</span> <span class="p">=</span> <span class="s">"frp"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"plugin_http2https"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"http"</span>
<span class="py">customDomains</span> <span class="p">=</span> <span class="nn">["test.yourdomain.com"]</span>
<span class="nn">[proxies.plugin]</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"http2https"</span>
<span class="py">localAddr</span> <span class="p">=</span> <span class="s">"127.0.0.1:443"</span>
<span class="py">hostHeaderRewrite</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">requestHeaders.set.x-from-where</span> <span class="p">=</span> <span class="s">"frp"</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"secret_tcp"</span>
<span class="c"># If the type is secret tcp, remotePort is useless</span>
<span class="c"># Who want to connect local port should deploy another frpc with stcp proxy and role is visitor</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"stcp"</span>
<span class="c"># secretKey is used for authentication for visitors</span>
<span class="py">secretKey</span> <span class="p">=</span> <span class="s">"abcdefg"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">22</span>
<span class="c"># If not empty, only visitors from specified users can connect.</span>
<span class="c"># Otherwise, visitors from same user can connect. '*' means allow all users.</span>
<span class="py">allowUsers</span> <span class="p">=</span> <span class="nn">["*"]</span>

<span class="nn">[[proxies]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"p2p_tcp"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"xtcp"</span>
<span class="py">secretKey</span> <span class="p">=</span> <span class="s">"abcdefg"</span>
<span class="py">localIP</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="py">localPort</span> <span class="p">=</span> <span class="mi">22</span>
<span class="c"># If not empty, only visitors from specified users can connect.</span>
<span class="c"># Otherwise, visitors from same user can connect. '*' means allow all users.</span>
<span class="py">allowUsers</span> <span class="p">=</span> <span class="p">[</span><span class="s">"user1"</span><span class="p">,</span> <span class="s">"user2"</span><span class="p">]</span>

<span class="c"># frpc role visitor -&gt; frps -&gt; frpc role server</span>
<span class="nn">[[visitors]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"secret_tcp_visitor"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"stcp"</span>
<span class="c"># the server name you want to visitor</span>
<span class="py">serverName</span> <span class="p">=</span> <span class="s">"secret_tcp"</span>
<span class="py">secretKey</span> <span class="p">=</span> <span class="s">"abcdefg"</span>
<span class="c"># connect this address to visitor stcp server</span>
<span class="py">bindAddr</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="c"># bindPort can be less than 0, it means don't bind to the port and only receive connections redirected from</span>
<span class="c"># other visitors. (This is not supported for SUDP now)</span>
<span class="py">bindPort</span> <span class="p">=</span> <span class="mi">9000</span>

<span class="nn">[[visitors]]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"p2p_tcp_visitor"</span>
<span class="py">type</span> <span class="p">=</span> <span class="s">"xtcp"</span>
<span class="c"># if the server user is not set, it defaults to the current user</span>
<span class="py">serverUser</span> <span class="p">=</span> <span class="s">"user1"</span>
<span class="py">serverName</span> <span class="p">=</span> <span class="s">"p2p_tcp"</span>
<span class="py">secretKey</span> <span class="p">=</span> <span class="s">"abcdefg"</span>
<span class="py">bindAddr</span> <span class="p">=</span> <span class="s">"127.0.0.1"</span>
<span class="c"># bindPort can be less than 0, it means don't bind to the port and only receive connections redirected from</span>
<span class="c"># other visitors. (This is not supported for SUDP now)</span>
<span class="py">bindPort</span> <span class="p">=</span> <span class="mi">9001</span>
<span class="c"># when automatic tunnel persistence is required, set it to true</span>
<span class="py">keepTunnelOpen</span> <span class="p">=</span> <span class="kc">false</span>
<span class="c"># effective when keepTunnelOpen is set to true, the number of attempts to punch through per hour</span>
<span class="py">maxRetriesAnHour</span> <span class="p">=</span> <span class="mi">8</span>
<span class="py">minRetryInterval</span> <span class="p">=</span> <span class="mi">90</span>
<span class="c"># fallbackTo = "stcp_visitor"</span>
<span class="c"># fallbackTimeoutMs = 500</span>
</code></pre></div></div>

<h3 id="63-官网示例配置参考">6.3. 官网示例配置参考</h3>

<p>英文：https://github.com/fatedier/frp?tab=readme-ov-file#example-usage</p>

<p>中文：https://gofrp.org/zh-cn/docs/examples/</p>

<p>参考链接：</p>

<ol>
  <li><a href="https://www.cnblogs.com/hovin/p/18023593">使用Frp配置内网访问（穿透）</a></li>
  <li><a href="https://blog.csdn.net/m0_53721382/article/details/145725039">XXL-JOB通过内网穿透来实现执行器添加</a></li>
  <li><a href="https://sspai.com/post/85402">frp内网穿透教程，手把手教学</a></li>
  <li><a href="https://zhuanlan.zhihu.com/p/626471788">使用FRP实现内网穿透</a></li>
  <li><a href="https://note.slienceme.cn/CentOS/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%90%AD%E5%BB%BA.html">Frp内网穿透搭建</a></li>
</ol>]]></content><author><name>slience_me</name></author><category term="服务器" /><category term="内网穿透" /><category term="Linux" /><summary type="html"><![CDATA[FRP内网穿透]]></summary></entry><entry><title type="html">网站汇总｜编程技术栈导航</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/16/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%90%88%E9%9B%86/" rel="alternate" type="text/html" title="网站汇总｜编程技术栈导航" /><published>2025-02-16T00:00:00+08:00</published><updated>2025-02-16T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/16/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%90%88%E9%9B%86</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/16/%E6%8A%80%E6%9C%AF%E6%A0%88%E5%90%88%E9%9B%86/"><![CDATA[<h1 id="编程技术栈导航">编程技术栈导航</h1>

<p>欢迎来到我们的编程技术栈导航页面！</p>

<!-- 引入 Font Awesome 图标库 -->
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
</head>

<div style="display: flex; flex-wrap: wrap; gap: 20px; justify-content: center;">

<!-- Frontend Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #e3f2fd; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #1e88e5; text-align: center;">前端开发</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.docschina.org/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/docschina.png" alt="docschina" style="height: 30px; margin-right: 10px; vertical-align: middle;" />印记中文</a></li>
        <li><a href="https://weapp.iviewui.com/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/iview.svg" alt="iview" style="height: 30px; margin-right: 10px; vertical-align: middle;" />iView Weapp</a></li>
        <li><a href="https://buefy.org/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/buefy.png" alt="buefy" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Buefy</a></li>
        <li><a href="https://element.eleme.cn/#/zh-CN" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/element.svg" alt="element" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Element UI</a></li>
        <li><a href="https://vuetifyjs.com/zh-Hans/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/vuetify.png" alt="vuetify" style="height: 30px; margin-right: 10px; vertical-align: middle;" />VUETIFY</a></li>
        <li><a href="https://www.antdv.com/docs/vue/introduce-cn/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ant_design.png" alt="ant_design" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Ant Design Vue</a></li>
        <li><a href="https://www.runoob.com/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/runoob.png" alt="runoob" style="height: 30px; margin-right: 10px; vertical-align: middle;" />菜鸟教程</a></li>
        <li><a href="https://www.w3school.com.cn/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/w3school.png" alt="w3school" style="height: 30px; margin-right: 10px; vertical-align: middle;" />w3school</a></li>
        <li><a href="https://cn.vuejs.org/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/vue.png" alt="vue" style="height: 30px; margin-right: 10px; vertical-align: middle;" />vusjs</a></li>
        <li><a href="https://www.webpackjs.com/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/webpack.svg" alt="webpack" style="height: 30px; margin-right: 10px; vertical-align: middle;" />webpack</a></li>
        <li><a href="https://www.iconfont.cn/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/iconfont.png" alt="iconfont" style="height: 30px; margin-right: 10px; vertical-align: middle;" />矢量图标库</a></li>
        <li><a href="https://shields.io/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/shields.png" alt="shields" style="height: 30px; margin-right: 10px; vertical-align: middle;" />shields</a></li>
        <li><a href="https://mp.weixin.qq.com/" target="_blank" style="color: #0d47a1; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/wechat.svg" alt="wechat" style="height: 40px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>

<!-- Backend Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #f1f8e9; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #388e3c; text-align: center;">后端开发</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://baomidou.com/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/mybatisplus.svg" alt="mybatisplus" style="height: 30px; margin-right: 10px; vertical-align: middle;" />MyBatis-Plus</a></li>
        <li><a href="https://spring.io/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/spring.png" alt="spring" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Spring</a></li>
        <li><a href="https://www.redis.net.cn/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/redis.png" alt="redis" style="width: 40px; margin-right: 10px; vertical-align: middle;" />Redis中文网</a></li>
        <li><a href="https://www.renren.io/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/renren.png" alt="renren" style="height: 30px; margin-right: 10px; vertical-align: middle;" />人人开源</a></li>
        <li><a href="https://portal.cloud.hashicorp.com/vagrant/discover" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/vagrant.png" alt="vagrant" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Vagrant Boxes</a></li>
        <li><a href="https://archives.jenkins.io/war-stable/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/jenkins.svg" alt="jenkins" style="height: 40px; margin-right: 10px; vertical-align: middle;" />Jenkins</a></li>
        <li><a href="https://nginxserver.cn/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/nginx.png" alt="jenkins" style="height: 40px; margin-right: 10px; vertical-align: middle;" />Nginx中文文档</a></li>
        <li><a href="https://mvnrepository.com/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/maven.svg" alt="mvnrepository" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Maven仓库</a></li>
    </ul>
</div>

<!-- Database Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #fff3e0; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #f57c00; text-align: center;">云服务&amp;备案</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.aliyun.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/aliyun.svg" alt="aliyun" style="height: 20px; margin-right: 10px; vertical-align: middle;" />阿里云</a></li>
        <li><a href="https://www.aliyun.com/benefit" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/aliyun.svg" alt="aliyun" style="height: 20px; margin-right: 10px; vertical-align: middle;" />阿里云(优惠)</a></li>
        <li><a href="https://beian.mps.gov.cn/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/beian.png" alt="beian" style="height: 30px; margin-right: 10px; vertical-align: middle;" />全国互联网安全管理服务平台</a></li>
        <li><a href="https://www.ccopyright.com.cn/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/banquan.gif" alt="banquan" style="height: 50px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://ywtb.mps.gov.cn/authservice/login" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/gab_log.png" alt="gab_log" style="height: 50px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://dash.cloudflare.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cloudflare.png" alt="cloudflare" style="height: 30px; margin-right: 10px; vertical-align: middle;" />CloudFlare</a></li>
        <li><a href="https://www.autodl.com/home" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/autodl.png" alt="autodl" style="height: 30px; margin-right: 10px; vertical-align: middle;" />AutoDL AI算力云</a></li>
        <li><a href="https://www.gpushare.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/Gpushare.png" alt="Gpushare" style="height: 50px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>

<!-- Tools Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #e8f5e9; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #388e3c; text-align: center;">工具与框架</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="http://www.jsons.cn/utf8/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/jsons.cn.png" alt="jsons" style="height: 30px; margin-right: 10px; vertical-align: middle;" />编码解码工具</a></li>
        <li><a href="https://jsmin.bmcx.com/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/jszip.webp" alt="jszip" style="height: 30px; margin-right: 10px; vertical-align: middle;" />JS代码压缩</a></li>
        <li><a href="https://tools.jb51.net/color/get_color" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/color.png" alt="color" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线取色器</a></li>
        <li><a href="https://cron.qqe2.com/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/qqe2.png" alt="qqe2" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线Cron生成</a></li>
        <li><a href="https://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type%20Something" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ascll.png" alt="ascll" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Text to ASCll</a></li>
        <li><a href="http://www.network-science.de/ascii/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ascll_1.png" alt="ascll_1" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Text to ASCll</a></li>
        <li><a href="http://life.chacuo.net/convertphoto2char" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ascll_1.png" alt="ascll_1" style="height: 30px; margin-right: 10px; vertical-align: middle;" />图片转字符</a></li>
        <li><a href="https://generatedata.com/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/generatedata.png" alt="generatedata" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线数据生成</a></li>
        <li><a href="https://www.jyshare.com/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/JYSHARE-COM.png" alt="JYSHARE-COM" style="height: 30px; margin-right: 10px; vertical-align: middle;" />菜鸟工具</a></li>
        <li><a href="https://www.spidertools.cn/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/spidertools.png" alt="spidertools" style="height: 50px; margin-right: 10px; vertical-align: middle;" />爬虫工具库</a></li>
        <li><a href="https://convertio.co/zh/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/convertio.svg" alt="convertio" style="height: 30px; margin-right: 10px; vertical-align: middle;" />文件转换器</a></li>
        <li><a href="https://www.mazhuren.com/saoma/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/logo144.png" alt="logo144" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线二维码扫描</a></li>
        <li><a href="https://msdn.itellyou.cn/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/msdn.png" alt="msdn" style="height: 30px; margin-right: 10px; vertical-align: middle;" />MSDN微软工具箱</a></li>
        <li><a href="https://www.tunemymusic.com/zh-CN" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/tunemymusic.svg" alt="tunemymusic" style="height: 35px; margin-right: 10px; vertical-align: middle;" />歌单迁移</a></li>
        <li><a href="https://www.logosc.cn/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/biaoxiaozhi.svg" alt="biaoxiaozhi" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线LOGO生成</a></li>
        <li><a href="https://www.zngg.net/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/zngg.png" alt="zngg" style="height: 30px; margin-right: 10px; vertical-align: middle;" />ZNGG在线工具</a></li>
        <li><a href="https://checkcoverage.apple.com/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/apple.png" alt="apple" style="height: 40px; margin-right: 10px; vertical-align: middle;" />序列号查询</a></li>
        <li><a href="https://www.desmos.com/calculator?lang=zh-CN" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/Desmos.png" alt="Desmos" style="height: 30px; margin-right: 10px; vertical-align: middle;" />图形计算器</a></li>
        <li><a href="https://www.upscale.media/zh/upload" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/upscale.png" alt="upscale" style="height: 30px; margin-right: 10px; vertical-align: middle;" />图像增强</a></li>
        <li><a href="https://codebeautify.org/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/codebeauty.png" alt="codebeauty" style="height: 30px; margin-right: 10px; vertical-align: middle;" />代码美化</a></li>
        <li><a href="https://www.bejson.com/" target="_blank" style="color: #2c6f2c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/bejson.png" alt="jenkins" style="height: 30px; margin-right: 10px; vertical-align: middle;" />BEJSON</a></li>
        <li><a href="https://www.qtool.net/" target="_blank" style="color: #1b5e20; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/qtools.png" alt="qtool" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线印章</a></li>
    </ul>
</div>

<!-- Game Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #f0f4c3; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #fbc02d; text-align: center;">在线游戏</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.codingame.com/" target="_blank" style="color: #c8b900; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/codingame.png" alt="codingame" style="height: 30px; margin-right: 10px; vertical-align: middle;" />codingame</a></li>
        <li><a href="https://www.learnjavaonline.org/" target="_blank" style="color: #c8b900; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/learnjavaonline.org.png" alt="learnjavaonline" style="height: 30px; margin-right: 10px; vertical-align: middle;" />在线学习x语言</a></li>
        <li><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" style="color: #c8b900; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/git.png" alt="git" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Learn Git Branching</a></li>
        <li><a href="https://ra2web.com/" target="_blank" style="color: #c8b900; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ra2.png" alt="ra2" style="height: 30px; margin-right: 10px; vertical-align: middle;" />红色警戒</a></li>
        <li><a href="https://bruno-simon.com/" target="_blank" style="color: #c8b900; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/bruno_simon.png" alt="bruno_simon" style="height: 30px; margin-right: 10px; vertical-align: middle;" />bruno-simon(小车)</a></li>
    </ul>
</div>

<!-- IP Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #fffde7; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #f57f17; text-align: center;">IP测试</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.boce.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/boce.png" alt="boce" style="height: 30px; margin-right: 10px; vertical-align: middle;" />拨测</a></li>
        <li><a href="https://whatismyipaddress.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/whatismyipaddress.png" alt="whatismyipaddress" style="height: 35px; margin-right: 10px; vertical-align: middle;" />Ipv4&amp;Ipv6</a></li>
        <li><a href="https://bgp.he.net/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/bgp.he.gif" alt="bgp.he" style="height: 40px; margin-right: 10px; vertical-align: middle;" />IPv4</a></li>
        <li><a href="https://ip.zxinc.org/ipquery" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/zx.png" alt="zx" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Ipv4&amp;Ipv6</a></li>
        <li><a href="https://test-ipv6.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ipv6.png" alt="ipv6" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Ipv6</a></li>
        <li><a href="https://www.ipaddress.com/" target="_blank" style="color: #e65100; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ipaddress.png" alt="ipaddress" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Ipv4&amp;Ipv6</a></li>
    </ul>
</div>

<!-- Download Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #e1bee7; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #8e24aa; text-align: center;">下载资源</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://xiaomirom.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/xiaomirom.png" alt="xiaomirom" style="height: 30px; margin-right: 10px; vertical-align: middle;" />小米ROM</a></li>
        <li><a href="https://www.aiyoweia.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/aiyoweia.png" alt="aiyoweia" style="height: 30px; margin-right: 10px; vertical-align: middle;" />哎哟喂啊(网盘库)</a></li>
        <li><a href="https://www.zitijia.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/zitijia.png" alt="zitijia" style="height: 30px; margin-right: 10px; vertical-align: middle;" />字体库</a></li>
        <li><a href="http://www.netbian.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/netbian.png" alt="netbian" style="height: 30px; margin-right: 10px; vertical-align: middle;" />彼岸壁纸</a></li>
        <li><a href="https://s.jb51.net/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/jb51.gif" alt="jb51" style="height: 30px; margin-right: 10px; vertical-align: middle;" />脚本之家</a></li>
        <li><a href="https://www.yutu.cn/popsoft.html" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/yutu.png" alt="yutu" style="height: 30px; margin-right: 10px; vertical-align: middle;" />羽兔软件库</a></li>
        <li><a href="http://yuzhuyi.ysepan.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/yuzhuyi.png" alt="yuzhuyi" style="height: 30px; margin-right: 10px; vertical-align: middle;" />羽享平台</a></li>
        <li><a href="https://mirrors.cernet.edu.cn/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/mirrorz.svg" alt="mirrorz" style="height: 30px; margin-right: 10px; vertical-align: middle;" />校园网联合镜像站</a></li>
        <li><a href="https://www.ysjf.com/home" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ysjf.svg" alt="ysjf" style="height: 30px; margin-right: 10px; vertical-align: middle;" />影视飓风</a></li>
        <li><a href="https://otp.landian.vip/zh-cn/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/office_tool_plus.png" alt="office_tool_plus" style="height: 40px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>
<!-- IP Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #e0f7fa; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #00acc1; text-align: center;">常用邮箱</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://mail.163.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/163.png" alt="163" style="height: 30px; margin-right: 10px; vertical-align: middle;" />163邮箱</a></li>
        <li><a href="https://mail.qq.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/qq.png" alt="qq" style="height: 30px; margin-right: 10px; vertical-align: middle;" />QQ邮箱</a></li>
        <li><a href="https://outlook.live.com/mail/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/microsoft.png" alt="microsoft" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Outlook</a></li>
        <li><a href="https://mail.cauc.edu.cn/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cauc_email.png" alt="cauc_email" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://mail.google.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/google.png" alt="google" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Gmail</a></li>
        <li><a href="https://mailh.qiye.163.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/qiye163.gif" alt="qiye163" style="height: 30px; margin-right: 10px; vertical-align: middle;" />网易企业邮箱</a></li>
        <li><a href="https://vip.163.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/vip163.png" alt="vip163" style="height: 30px; margin-right: 10px; vertical-align: middle;" />VIP尊贵邮</a></li>
        <li><a href="https://mail.126.com/" target="_blank" style="color: #00796b; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/126.png" alt="126" style="height: 30px; margin-right: 10px; vertical-align: middle;" />126免费邮</a></li>
    </ul>
</div>

<!-- Blog Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #ffebee; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #d32f2f; text-align: center;">工作相关</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.qmjianli.com/" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/qmjianli.png" alt="qmjianli" style="height: 30px; margin-right: 10px; vertical-align: middle;" />全民简历</a></li>
        <li><a href="https://www.nowcoder.com/" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/noewcoder.png" alt="nowcoder" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://leetcode.cn/" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/leetcode.svg" alt="han" style="height: 30px; margin-right: 10px; vertical-align: middle;" />LeetCode</a></li>
        <li><a href="https://www.codefather.cn/" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/codefather.png" alt="han" style="height: 30px; margin-right: 10px; vertical-align: middle;" />编程导航</a></li>
        <li><a href="https://bm.ruankao.org.cn/sign/welcome" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ruankao.png" alt="han" style="height: 30px; margin-right: 10px; vertical-align: middle;" />软考</a></li>
        <li><a href="https://zs.cpta.com.cn/certMng/loginPage.jsp" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cpta.png" alt="cpta" style="height: 50px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="http://www.cpta.com.cn/certQuery.html" target="_blank" style="color: #b71c1c; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cpta_1.jpg" alt="cpta_1" style="height: 50px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>

<!-- funny Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #e8eaf6; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #303f9f; text-align: center;">娱乐&amp;社区</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://weibo.com/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/weibo.png" alt="weibo" style="height: 30px; margin-right: 10px; vertical-align: middle;" />微博</a></li>
        <li><a href="https://www.zhihu.com/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/zhihu.png" alt="zhihu" style="height: 30px; margin-right: 10px; vertical-align: middle;" />知乎</a></li>
        <li><a href="https://www.youtube.com/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/youtube.svg" alt="youtube" style="height: 20px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://www.bilibili.com/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/bilibili.png" alt="bilibili" style="height: 30px; margin-right: 10px; vertical-align: middle;" />bilibili</a></li>
        <li><a href="https://github.com/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/github.png" alt="github" style="height: 30px; margin-right: 10px; vertical-align: middle;" />GitHub</a></li>
        <li><a href="https://blog.csdn.net/" target="_blank" style="color: #1a237e; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/csdn.png" alt="csdn" style="height: 40px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>

<!-- Study Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #c8e6c9; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #388e3c; text-align: center;">科研相关</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://qikan.cqvip.com/index.html" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cqvip.png" alt="cqvip" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://kns.cnki.net/kns8s/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cnki.png" alt="cnki" style="height: 30px; margin-right: 10px; vertical-align: middle;" />中国知网</a></li>
        <li><a href="https://www.myhuiban.com/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/cp.png" alt="cp" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Conference Partner(会伴)</a></li>
        <li><a href="https://webofscience.clarivate.cn/wos/woscc/basic-search" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/webofscience.png" alt="webofscience" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Web of Science</a></li>
        <li><a href="https://www.overleaf.com/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/overleaf.svg" alt="overleaf" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://simpletex.cn/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/simpletex.png" alt="simpletex" style="height: 30px; margin-right: 10px; vertical-align: middle;" />SimpleTex公式识别</a></li>
        <li><a href="https://www.letpub.com.cn/index.php?page=journalapp" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/letpub.png" alt="letpub" style="height: 40px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://www.ccf.org.cn/Academic_Evaluation/By_category/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ccf.png" alt="ccf" style="height: 40px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://ccfddl.com/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ccfddl.png" alt="ccfddl" style="height: 30px; margin-right: 10px; vertical-align: middle;" />ccf-deadlines</a></li>
        <li><a href="https://tool.yovisun.com/scihub/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/sci-hub.png" alt="sci-hub" style="height: 30px; margin-right: 10px; vertical-align: middle;" />SCI-Hub</a></li>
        <li><a href="https://www.ablesci.com/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ablesci.png" alt="ablesci" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://paperswithcode.com/" target="_blank" style="color: #2c6b2f; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/paperwithcode.svg" alt="paperwithcode" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Papers With Code</a></li>
    </ul>
</div>

<!-- funny Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #fce4ec; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #8e24aa; text-align: center;">机器学习</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://pytorch.org/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/pytorch.svg" alt="pytorch" style="height: 30px; margin-right: 10px; vertical-align: middle;" />PyTorch</a></li>
        <li><a href="https://numpy.org/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/numpy.svg" alt="numpy" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Numpy</a></li>
        <li><a href="https://matplotlib.org/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/matplotlib.svg" alt="matplotlib" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://tianchi.aliyun.com/course/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/aliyun.svg" alt="aliyun" style="height: 20px; margin-right: 10px; vertical-align: middle;" />天池</a></li>
        <li><a href="https://ai-bot.cn/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/ai-bot.png" alt="ai-bot" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://plotly.com/python/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/plotly.svg" alt="plotly" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://www.kaggle.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/kaggle.svg" alt="kaggle" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://colab.research.google.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/google_colaboratory.png" alt="google_colaboratory" style="height: 30px; margin-right: 10px; vertical-align: middle;" />Google Colaboratory</a></li>
        <li><a href="https://tianchi.aliyun.com/course/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/aliyun.svg" alt="aliyun" style="height: 20px; margin-right: 10px; vertical-align: middle;" /></a></li>
    </ul>
</div>

<!-- Study Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #bbdefb; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #1e88e5; text-align: center;">热门导航</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://www.yanweb.top/" target="_blank" style="color: #1565c0; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/yanweb.png" alt="yanweb" style="height: 30px; margin-right: 10px; vertical-align: middle;" />科研废物导航</a></li>
        <li><a href="https://search.chongbuluo.com/" target="_blank" style="color: #1565c0; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/chongbuluo.svg" alt="chongbuluo" style="height: 30px; margin-right: 10px; vertical-align: middle;" />虫部落 · 快搜</a></li>
        <li><a href="https://scholar.chongbuluo.com/" target="_blank" style="color: #1565c0; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/chongbuluo.svg" alt="chongbuluo" style="height: 30px; margin-right: 10px; vertical-align: middle;" />虫部落 · 学术搜索</a></li>
        <li><a href="https://www.haocxy.com/" target="_blank" style="color: #1565c0; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/haocxy.png" alt="haocxy" style="height: 30px; margin-right: 10px; vertical-align: middle;" />程序员导航</a></li>
    </ul>
</div>

<!-- funny Section -->
<div style="flex: 1 1 300px; min-width: 250px; background-color: #f3e5f5; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 20px; transition: transform 0.3s ease-in-out;">
    <h2 style="color: #8e24aa; text-align: center;">AI</h2>
    <ul style="list-style: none; padding: 0;">
        <li><a href="https://chatgpt.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/chatgpt.svg" alt="chatgpt" style="height: 30px; margin-right: 10px; vertical-align: middle;" />ChatGPT</a></li>
        <li><a href="https://poe.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/poe.svg" alt="poe" style="height: 30px; margin-right: 10px; vertical-align: middle;" /></a></li>
        <li><a href="https://tongyi.aliyun.com/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/tongyi.png" alt="tongyi" style="height: 30px; margin-right: 10px; vertical-align: middle;" />通义千问</a></li>
        <li><a href="https://openart.ai/" target="_blank" style="color: #6a1b9a; text-decoration: none; font-weight: bold; padding: 10px 0; display: block; border-bottom: 1px solid #ccc;">
            <img src="/images/logo/openart.png" alt="openart" style="height: 30px; margin-right: 10px; vertical-align: middle;" />OpenArt</a></li>
    </ul>
</div>

</div>

<!-- Learning Platforms Section -->
<div style="margin-top: 40px; padding: 20px; background-color: #fafafa; border-radius: 12px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    <h3 style="text-align: center; color: #1976d2;">资源博客</h3>
    <div style="display: flex; justify-content: center; gap: 20px;">
        <a href="https://www.4ce.cn/" target="_blank" style="background-color: #1976d2; color: white; padding: 12px 20px; border-radius: 8px; text-decoration: none; font-weight: bold; transition: background-color 0.3s ease;">
            <i class="fas fa-graduation-cap" style="margin-right: 10px;"></i>韩小韩</a>
        <a href="https://www.slienceme.cn/" target="_blank" style="background-color: #1976d2; color: white; padding: 12px 20px; border-radius: 8px; text-decoration: none; font-weight: bold; transition: background-color 0.3s ease;">
            <i class="fas fa-laptop-code" style="margin-right: 10px;"></i>Slience_me</a>
    </div>
</div>

<hr />

<div style="text-align: center; margin-top: 40px;">
    <p style="font-size: 16px; color: #777;">感谢你的阅读，祝你编程愉快！</p>
</div>]]></content><author><name>slience_me</name></author><category term="网站汇总" /><summary type="html"><![CDATA[编程技术栈导航]]></summary></entry><entry><title type="html">服务器｜【指令集】Nginx</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/15/Nginx%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86/" rel="alternate" type="text/html" title="服务器｜【指令集】Nginx" /><published>2025-02-15T00:00:00+08:00</published><updated>2025-02-15T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/15/Nginx%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/15/Nginx%E6%93%8D%E4%BD%9C%E5%90%88%E9%9B%86/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="指令集nginx">【指令集】Nginx</h1>

<hr />

<h2 id="1-目录结构">1. 目录结构</h2>

<p>Nginx 的基础目录结构通常包括以下几个主要目录：</p>

<p>Nginx的目录结构大致如下（以Linux系统为例）：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/nginx/                 # Nginx的配置文件目录
├── nginx.conf              # 主配置文件
├── conf.d/                 # 包含额外配置文件的目录
│   └── default.conf        # 默认虚拟主机配置文件
├── sites-available/        # 存放可用站点的配置文件（某些系统上可能没有此目录）
├── sites-enabled/          # 启用的站点配置文件（某些系统上可能没有此目录）
├── mime.types              # MIME类型配置文件
├── fastcgi_params          # FastCGI参数配置
├── uwsgi_params            # uWSGI参数配置
└── scgi_params             # SCGI参数配置

/usr/local/nginx/           # Nginx的默认安装目录
├── sbin/                   # 可执行文件目录（包含nginx二进制文件）
│   └── nginx               # Nginx主程序
├── html/                   # 默认的网页根目录
│   └── index.html          # 默认的欢迎页面
├── logs/                   # 日志目录
│   ├── access.log          # 访问日志
│   └── error.log           # 错误日志
└── conf/                   # 配置文件目录（有时可以与/etc/nginx合并）
</code></pre></div></div>

<h3 id="主要目录和文件">主要目录和文件：</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code>：主配置文件，控制Nginx的全局设置。</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/nginx/conf.d/</code>：通常存放额外的虚拟主机配置文件，可以分配单独的文件来管理不同站点的配置。</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/</code> 和 <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code>：用于存储和启用站点的配置文件，常见于Ubuntu/Debian系统。<code class="language-plaintext highlighter-rouge">sites-available</code>存放所有配置文件，而<code class="language-plaintext highlighter-rouge">sites-enabled</code>存放实际启用的配置链接。</li>
  <li><code class="language-plaintext highlighter-rouge">/usr/local/nginx/html/</code>：默认的网页文件目录，可以存放网站的静态文件，如HTML、CSS和JavaScript等。</li>
  <li><code class="language-plaintext highlighter-rouge">/usr/local/nginx/logs/</code>：存放Nginx的日志文件，通常包括访问日志和错误日志。</li>
</ul>

<p>你可以根据自己的实际需求定制这些目录和配置文件。</p>

<h2 id="2-系统级安装">2. 系统级安装</h2>

<h3 id="ubuntu">【Ubuntu】</h3>

<h4 id="1更新索引">1）更新索引</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div></div>

<h4 id="2安装-nginx">2）安装 Nginx</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>nginx
</code></pre></div></div>

<p>安装完成后，Nginx 会自动启动。如果没有启动，可以手动启动它：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start nginx
</code></pre></div></div>

<p>检查 Nginx 的状态：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status nginx
</code></pre></div></div>

<h4 id="3查找-nginx-配置文件">3）查找 Nginx 配置文件</h4>

<p>Nginx 配置文件通常位于以下几个位置：</p>

<ul>
  <li>主配置文件：<code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code></li>
  <li>默认虚拟主机配置：<code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/default</code></li>
  <li>虚拟主机配置目录：<code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/</code> 和 <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code></li>
  <li>日志文件：
    <ul>
      <li>访问日志：<code class="language-plaintext highlighter-rouge">/var/log/nginx/access.log</code></li>
      <li>错误日志：<code class="language-plaintext highlighter-rouge">/var/log/nginx/error.log</code></li>
    </ul>
  </li>
</ul>

<p>查看主配置文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/nginx.conf
</code></pre></div></div>

<p>查看虚拟主机配置：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/sites-available/default
</code></pre></div></div>

<p>如果你有多个网站需要配置，可以创建新的配置文件，并通过符号链接激活它：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/your-site.conf /etc/nginx/sites-enabled/
</code></pre></div></div>

<h4 id="4测试配置文件的语法">4）测试配置文件的语法</h4>

<p>每次修改配置文件后，先检查 Nginx 配置文件的语法是否正确：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span>
</code></pre></div></div>

<p>如果没有错误，输出应该是：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nginx: configuration file /etc/nginx/nginx.conf <span class="nb">test </span>is successful
</code></pre></div></div>

<h4 id="5重新加载-nginx-配置">5）重新加载 Nginx 配置</h4>

<p>在确认配置文件没有语法错误后，重新加载 Nginx，使配置生效：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl reload nginx
</code></pre></div></div>

<h4 id="6常见配置修改">6）常见配置修改</h4>

<ul>
  <li>设置服务器根目录：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name example.com<span class="p">;</span>
    root /var/www/html<span class="p">;</span>
    index index.html<span class="p">;</span>

    location / <span class="o">{</span>
        try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>修改监听端口：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 8080<span class="p">;</span>
    server_name example.com<span class="p">;</span>
    root /var/www/html<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>配置反向代理：</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 80<span class="p">;</span>
    server_name example.com<span class="p">;</span>

    location / <span class="o">{</span>
        proxy_pass http://localhost:3000<span class="p">;</span>
        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
        proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        proxy_set_header X-Forwarded-Proto <span class="nv">$scheme</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="7设置防火墙">7）设置防火墙</h4>

<p><strong>允许 HTTP 和 HTTPS 流量</strong></p>

<p>如果你正在使用 <code class="language-plaintext highlighter-rouge">ufw</code> 防火墙，确保允许 HTTP 和 HTTPS 流量：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow <span class="s1">'Nginx Full'</span>
</code></pre></div></div>

<h4 id="8运行检查">8）运行检查</h4>

<p><strong>Nginx 是否正常运行</strong></p>

<p>通过浏览器访问服务器的 IP 地址或域名，应该能看到 Nginx 默认的欢迎页面：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://your_server_ip
</code></pre></div></div>

<p>如果看到页面，说明 Nginx 正常运行。</p>

<h2 id="3-个性化操作">3. 个性化操作</h2>

<h3 id="31-自定义站点路径">3.1 自定义站点路径</h3>

<p>要自定义不同站点的配置文件路径，并将其放在用户目录或根目录下（例如 <code class="language-plaintext highlighter-rouge">/mysite/</code>），而不是直接操作 <code class="language-plaintext highlighter-rouge">/etc/nginx/</code> 或 <code class="language-plaintext highlighter-rouge">/usr/local/nginx/</code>，你可以通过以下步骤来实现：</p>

<h4 id="1修改-nginx-配置文件">1）修改 Nginx 配置文件</h4>

<p>你需要调整 Nginx 主配置文件 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 来指定新的配置文件路径。具体来说，在 <code class="language-plaintext highlighter-rouge">http</code> 块中使用 <code class="language-plaintext highlighter-rouge">include</code> 指令来加载你的自定义路径下的配置文件。</p>

<p>假设你希望将站点配置文件存放在 <code class="language-plaintext highlighter-rouge">/mysite/nginx-sites/</code>，那么在 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 中添加如下内容：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">http</span> <span class="p">{</span>
    <span class="kn">...</span>
    <span class="s">include</span> <span class="n">/mysite/nginx-sites/*.conf</span><span class="p">;</span>
    <span class="kn">...</span>
<span class="err">}</span>
</code></pre></div></div>

<p>这会告诉 Nginx 在启动时加载 <code class="language-plaintext highlighter-rouge">/mysite/nginx-sites/</code> 目录下所有 <code class="language-plaintext highlighter-rouge">.conf</code> 后缀的配置文件。</p>

<h4 id="2创建并管理自定义站点配置">2）创建并管理自定义站点配置</h4>

<p>在 <code class="language-plaintext highlighter-rouge">/mysite/nginx-sites/</code> 目录下创建每个站点的配置文件。例如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mysite/nginx-sites/
├── site1.conf
├── site2.conf
└── site3.conf
</code></pre></div></div>

<p>每个 <code class="language-plaintext highlighter-rouge">.conf</code> 文件中可以包含你要为特定站点设置的 Nginx 配置，比如 <code class="language-plaintext highlighter-rouge">server</code> 块和其他必要的指令。</p>

<p>例如，<code class="language-plaintext highlighter-rouge">site1.conf</code> 可能是这样的：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">www.site1.com</span><span class="p">;</span>
    <span class="kn">root</span> <span class="n">/mysite/www/site1</span><span class="p">;</span>
    
    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri</span><span class="n">/</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3设置权限可选">3）设置权限（可选）</h4>

<p>确保 <code class="language-plaintext highlighter-rouge">/mysite/nginx-sites/</code> 目录及其中的配置文件有适当的权限，以确保 Nginx 进程能够读取它们。例如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown</span> <span class="nt">-R</span> nginx:nginx /mysite/nginx-sites/
<span class="nb">sudo chmod</span> <span class="nt">-R</span> 755 /mysite/nginx-sites/
</code></pre></div></div>

<h4 id="4配置文件组织可选">4）配置文件组织（可选）</h4>

<p>你可以进一步组织你的配置文件，如使用 <code class="language-plaintext highlighter-rouge">sites-available</code> 和 <code class="language-plaintext highlighter-rouge">sites-enabled</code> 目录结构：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/mysite/nginx-sites/
├── sites-available/
│   ├── site1.conf
│   └── site2.conf
└── sites-enabled/
    ├── site1.conf -&gt; ../sites-available/site1.conf
    └── site2.conf -&gt; ../sites-available/site2.conf
    
ln -s /mysite/nginx-sites/sites-available/site1.conf /mysite/nginx-sites/sites-enabled/
</code></pre></div></div>

<p>然后在 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 中改为加载 <code class="language-plaintext highlighter-rouge">sites-enabled</code> 目录中的配置：</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">http</span> <span class="p">{</span>
    <span class="kn">...</span>
    <span class="s">include</span> <span class="n">/mysite/nginx-sites/sites-enabled/*.conf</span><span class="p">;</span>
    <span class="kn">...</span>
<span class="err">}</span>
</code></pre></div></div>

<p>这种方式与传统的 <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/</code> 和 <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-enabled/</code> 方法类似。</p>

<h4 id="5重启-nginx-使配置生效">5）重启 Nginx 使配置生效</h4>

<p>完成修改后，记得重新加载或重启 Nginx：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span>       <span class="c"># 检查配置是否有误</span>
<span class="nb">sudo </span>systemctl reload nginx   <span class="c"># 重新加载配置</span>
</code></pre></div></div>

<h2 id="4-用户级安装">4. 用户级安装</h2>

<p>如果你没有系统级安装 Nginx 的权限，但仍然希望在用户目录中运行自定义的 Nginx 实例，你可以通过以下步骤来实现：</p>

<h3 id="41-在用户目录安装-nginx">4.1 在用户目录安装 Nginx</h3>

<p>首先，你可以在用户目录下手动下载并编译 Nginx，确保你有权限在自己的用户目录中进行安装和配置。</p>

<p><strong>步骤：</strong></p>

<ol>
  <li>
    <p><strong>下载 Nginx 源代码</strong>：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://nginx.org/download/nginx-1.24.0.tar.gz
<span class="nb">tar</span> <span class="nt">-zxvf</span> nginx-1.24.0.tar.gz
<span class="nb">cd </span>nginx-1.24.0
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>编译并安装到用户目录</strong>： 你可以指定安装路径为你的用户目录（例如 <code class="language-plaintext highlighter-rouge">~/nginx</code>）：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure <span class="nt">--prefix</span><span class="o">=</span><span class="nv">$HOME</span>/nginx
make
make <span class="nb">install</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>安装完成后</strong>，你将在 <code class="language-plaintext highlighter-rouge">~/nginx/</code> 目录下找到所有相关的文件和目录。此时，你可以直接在 <code class="language-plaintext highlighter-rouge">~/nginx/</code> 下运行 Nginx，而无需系统级的权限。</p>
  </li>
</ol>

<h3 id="42-配置-nginx-使用自定义的站点路径">4.2 配置 Nginx 使用自定义的站点路径</h3>

<p>假设你已经在 <code class="language-plaintext highlighter-rouge">~/nginx</code> 目录下安装了 Nginx，现在你可以按照自定义路径来配置你的站点。</p>

<p><strong>修改 Nginx 配置文件：</strong></p>

<p>Nginx 的配置文件通常位于 <code class="language-plaintext highlighter-rouge">~/nginx/conf/nginx.conf</code>。你可以打开这个文件，并根据你的需求进行修改：</p>

<ol>
  <li>
    <p><strong>修改站点配置路径</strong>：例如，将站点配置文件放在 <code class="language-plaintext highlighter-rouge">~/mysite/nginx-sites/</code> 目录下，并在 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 中使用 <code class="language-plaintext highlighter-rouge">include</code> 指令来加载它们：</p>

    <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">http</span> <span class="p">{</span>
    <span class="kn">...</span>
    <span class="s">include</span> <span class="p">~</span><span class="sr">/mysite/nginx-sites/*.conf;</span>
    <span class="s">...</span>
<span class="err">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>配置站点文件</strong>：在 <code class="language-plaintext highlighter-rouge">~/mysite/nginx-sites/</code> 目录下创建站点配置文件。例如，<code class="language-plaintext highlighter-rouge">site1.conf</code>：</p>

    <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">www.site1.com</span><span class="p">;</span>
    <span class="kn">root</span> <span class="p">~</span><span class="sr">/mysite/www/site1;</span>
       
    <span class="s">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri</span><span class="n">/</span> <span class="p">=</span><span class="mi">404</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>确保站点根目录存在并配置好</strong>，比如 <code class="language-plaintext highlighter-rouge">~/mysite/www/site1</code> 目录。</p>
  </li>
</ol>

<h3 id="43-启动-nginx">4.3 启动 Nginx</h3>

<p>由于你没有系统级的权限，使用自定义安装的 Nginx 来启动和管理 Nginx 服务：</p>

<ol>
  <li>
    <p><strong>启动 Nginx</strong>：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/nginx/sbin/nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>检查 Nginx 状态</strong>： 你可以使用 <code class="language-plaintext highlighter-rouge">ps</code> 或 <code class="language-plaintext highlighter-rouge">top</code> 来确认 Nginx 是否正在运行：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps aux | <span class="nb">grep </span>nginx
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>停止 Nginx</strong>： 如果需要停止 Nginx，可以使用以下命令：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/nginx/sbin/nginx <span class="nt">-s</span> stop
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>重新加载配置</strong>： 如果修改了配置文件，需要重新加载 Nginx：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/nginx/sbin/nginx <span class="nt">-s</span> reload
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="44-权限设置">4.4 权限设置</h3>

<p>由于你没有系统级权限，确保所有相关目录（如 <code class="language-plaintext highlighter-rouge">~/nginx</code>, <code class="language-plaintext highlighter-rouge">~/mysite</code> 等）的权限正确，并且你有访问和写入的权限。</p>

<h2 id="5-部署-vue-项目">5. 部署 Vue 项目</h2>

<h3 id="ubuntu-1">【Ubuntu】</h3>

<p>将 Vue 项目部署到 Nginx 时，通常需要将其构建为静态文件，并配置 Nginx 提供这些文件。以下是部署步骤：</p>

<h4 id="1配置-nginx">1）配置 Nginx</h4>

<p>假设 Vue 项目的构建文件位于 <code class="language-plaintext highlighter-rouge">/var/www/vue_project/dist</code> 目录。</p>

<p>打开 Nginx 配置文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/nginx/sites-available/vue_project
</code></pre></div></div>

<p>编辑配置文件，设置 Nginx 提供静态文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 8080<span class="p">;</span>  <span class="c"># 监听 8080 端口</span>
    server_name example.com<span class="p">;</span>  <span class="c"># 配置你的域名，或者使用 IP 或 localhost</span>

    root /var/www/vue_project/dist<span class="p">;</span>  <span class="c"># Vue 项目构建文件所在目录</span>
    index index.html<span class="p">;</span>  <span class="c"># 默认首页</span>

    location / <span class="o">{</span>
        try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ /index.html<span class="p">;</span>  <span class="c"># 支持 Vue 的 SPA 路由</span>
    <span class="o">}</span>

    <span class="c"># 如果有后端 API，需要配置反向代理</span>
    location /api <span class="o">{</span>
        proxy_pass http://localhost:3000<span class="p">;</span>  <span class="c"># 反向代理到后端 API</span>
        proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
        proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
        proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
    <span class="o">}</span>

    <span class="c"># 禁止访问某些文件或目录</span>
    location ~ ^/<span class="o">(</span><span class="se">\.</span>user.ini|<span class="se">\.</span>htaccess|<span class="se">\.</span>git|<span class="se">\.</span><span class="nb">env</span>|<span class="se">\.</span>svn|<span class="se">\.</span>project|LICENSE|README.md<span class="o">)</span> <span class="o">{</span>
        <span class="k">return </span>404<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">listen 8080;</code>：指定 Nginx 监听 8080 端口。</li>
  <li><code class="language-plaintext highlighter-rouge">root /var/www/vue_project/dist;</code>：指定 Vue 项目的构建目录。</li>
  <li><code class="language-plaintext highlighter-rouge">try_files $uri $uri/ /index.html;</code>：支持 Vue 项目的前端路由，将所有请求重定向到 <code class="language-plaintext highlighter-rouge">index.html</code>，让 Vue Router 处理路由。</li>
</ul>

<h4 id="2启用配置">2）启用配置</h4>

<p>创建符号链接并启用新配置：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo ln</span> <span class="nt">-s</span> /etc/nginx/sites-available/vue_project /etc/nginx/sites-enabled/
</code></pre></div></div>

<h4 id="3检查配置并重启-nginx">3）检查配置并重启 Nginx</h4>

<p>确保 Nginx 配置正确：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span>  <span class="c"># syntax is okay | test is successful</span>
</code></pre></div></div>

<p>重启 Nginx：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl reload nginx
</code></pre></div></div>

<h4 id="4访问应用">4）访问应用</h4>

<p>现在可以在浏览器中访问 <code class="language-plaintext highlighter-rouge">http://your_server_ip:8080</code>，查看 Vue 应用。</p>

<h4 id="5配置防火墙">5）配置防火墙</h4>

<p>如果使用防火墙，确保允许访问 8080 端口：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 8080
</code></pre></div></div>

<h4 id="6配置-https使用-443-端口">6）配置 HTTPS（使用 443 端口）</h4>

<p>如果需要配置 HTTPS，建议使用 Let’s Encrypt 提供免费的 SSL 证书，并通过 <code class="language-plaintext highlighter-rouge">certbot</code> 自动配置：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>certbot python3-certbot-nginx
<span class="nb">sudo </span>certbot <span class="nt">--nginx</span>
</code></pre></div></div>

<h2 id="6-部署php项目">6. 部署PHP项目</h2>

<h3 id="61-项目部署">6.1 项目部署</h3>

<h4 id="1更新包列表">1）更新包列表</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div></div>

<h4 id="2安装php">2）安装PHP</h4>

<p>这个命令会安装默认的PHP版本。通常它会安装PHP 7.x或8.x，具体版本取决于你的Ubuntu版本。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>php
</code></pre></div></div>

<h4 id="3验证php安装">3）验证PHP安装</h4>

<p>验证PHP是否安装成功</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php <span class="nt">-v</span>
</code></pre></div></div>

<blockquote>
  <p>如果安装成功，你会看到类似如下的信息：
PHP 8.1.2 (cli) (built: Jan 20 2022 08:57:57) (NTS)</p>
</blockquote>

<h4 id="4安装常用的php扩展">4）安装常用的PHP扩展</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># PHP常常需要一些扩展来处理数据库连接、图像处理等功能。你可以安装常用的PHP扩展，比如</span>
<span class="c"># 这将安装PHP的命令行工具、mbstring、XML解析、MySQL支持和ZIP压缩支持。</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>php-cli php-mbstring php-xml php-mysql php-zip
</code></pre></div></div>

<h4 id="5配置php-fpm">5）配置php-fpm</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 如果你正在使用Nginx作为Web服务器，并且希望在Web服务器中启用PHP，你需要安装相应的PHP模块。</span>
<span class="c"># Nginx与PHP需要通过`php-fpm`来处理PHP请求。你可以安装`php-fpm`：</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>php-fpm

<span class="c"># 先找到 PHP-FPM 的配置文件，通过下面指令</span>
<span class="nb">sudo </span>find / <span class="nt">-name</span> <span class="s2">"php-fpm.conf"</span> 2&gt;/dev/null
<span class="c"># 例如我的： /etc/php/7.4/fpm/pool.d/www.conf</span>

<span class="c"># 修改www.conf配置文件</span>
vim /etc/php/7.4/fpm/pool.d/www.conf

<span class="c"># 更改监听端口 找到;</span>
listen <span class="o">=</span> /run/php/php7.4-fpm.sock
<span class="c"># 修改为</span>
listen <span class="o">=</span> 127.0.0.1:9000
listen.allowed_clients <span class="o">=</span> 127.0.0.1

<span class="c"># 重启php-fpm</span>
systemctl restart php7.4-fpm

<span class="c"># 查询一下端口</span>
netstat <span class="nt">-lnt</span> | <span class="nb">grep </span>9000
</code></pre></div></div>

<h4 id="6创建站点">6）创建站点</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 7000<span class="p">;</span>
    server_name _._._._
    root /var/www/html<span class="p">;</span>      <span class="c">#网站默认目录，以后可以自己改</span>
    index index.php index.html index.htm<span class="p">;</span>
    server_name www.a.com<span class="p">;</span>      <span class="c">#网站地址</span>
    location / <span class="o">{</span>
            <span class="c"># First attempt to serve request as file, then</span>
            <span class="c"># as directory, then fall back to displaying a 404.</span>
            try_files <span class="nv">$uri</span> <span class="nv">$uri</span>/ <span class="o">=</span>404<span class="p">;</span>
    <span class="o">}</span>
    location ~ <span class="se">\.</span>php<span class="nv">$ </span><span class="o">{</span>
            include fastcgi.conf<span class="p">;</span>
            fastcgi_pass 127.0.0.1:9000<span class="p">;</span>
            fastcgi_index index.php<span class="p">;</span>
            fastcgi_split_path_info ^<span class="o">(</span>.+<span class="se">\.</span>php<span class="o">)(</span>/.+<span class="o">)</span><span class="nv">$;</span>
            fastcgi_param PATH_INFO <span class="nv">$fastcgi_path_info</span><span class="p">;</span>
            fastcgi_param PATH_TRANSLATED <span class="nv">$document_root$fastcgi_path_info</span><span class="p">;</span>
            fastcgi_param SCRIPT_FILENAME <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="7开放防火墙">7）开放防火墙</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 7000
</code></pre></div></div>

<h2 id="7-错误排查">7. 错误排查</h2>

<h3 id="71-检查-nginx-错误日志">7.1 检查 Nginx 错误日志</h3>

<p>查看 Nginx 错误日志，可能会给你更多的错误信息，帮助进一步排查问题。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /var/log/nginx/error.log
</code></pre></div></div>

<p>查看是否有其他相关的错误信息，特别是与 PHP-FPM 相关的错误。</p>

<h3 id="72-检查-php-错误日志">7.2 检查 PHP 错误日志</h3>

<p>如果问题与 PHP-FPM 配置相关，查看 PHP-FPM 的错误日志也是一个好方法。在 <code class="language-plaintext highlighter-rouge">/var/log/php7.x-fpm.log</code> 中查看是否有其他错误信息。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tail</span> <span class="nt">-f</span> /var/log/php7.x-fpm.log
</code></pre></div></div>]]></content><author><name>slience_me</name></author><category term="指令汇总" /><category term="服务器" /><category term="Linux" /><summary type="html"><![CDATA[【指令集】Nginx]]></summary></entry><entry><title type="html">前端｜ES6新特性合集</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/12/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E5%90%88%E9%9B%86/" rel="alternate" type="text/html" title="前端｜ES6新特性合集" /><published>2025-02-12T00:00:00+08:00</published><updated>2025-02-12T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/12/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E5%90%88%E9%9B%86</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2025/02/12/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E5%90%88%E9%9B%86/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="es6新特性汇总">ES6新特性汇总</h1>

<h2 id="1-let声明变量">1. let声明变量</h2>

<h3 id="1let作用域">1）let作用域</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// var 声明的变量往往会越域</span>
<span class="c1">// let 声明的变量有严格的局部作用域</span>
<span class="p">{</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// 报错 b is not defined</span>
</code></pre></div></div>

<h3 id="2声明次数">2）声明次数</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// var 可以声明多次</span>
<span class="c1">// let 只能声明一次</span>
<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="c1">// let n = 4; // 报错 n is already declared</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span> <span class="c1">// 报错 n is already declared</span>
</code></pre></div></div>

<h3 id="3变量提升">3）变量提升</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// var 会变量提升</span>
<span class="c1">// let 不会变量提升，但需要先声明后使用</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 报错 y is not defined</span>
<span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="2-const声明常量只读变量">2. const声明常量(只读变量)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 声明之后不允许改变</span>
<span class="c1">// 2. 一旦声明必须初始化，不能留到以后赋值, 否则报错</span>
<span class="kd">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="p">;</span>
<span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.1415926</span><span class="p">;</span> <span class="c1">// 报错 Assignment to constant variable.</span>
</code></pre></div></div>

<h2 id="3-解构表达式">3. 解构表达式</h2>

<h3 id="1数组解构">1）数组解构</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="c1">// 传统写法</span>
<span class="c1">// let a = arr[0];</span>
<span class="c1">// let b = arr[1];</span>
<span class="c1">// let c = arr[2];</span>
<span class="c1">// console.log(a, b, c);</span>
<span class="c1">// ES6 写法</span>
<span class="kd">let</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2对象解构">2）对象解构</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Tom</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">};</span>
<span class="c1">// 传统写法</span>
<span class="c1">// let name = person.name;</span>
<span class="c1">// let age = person.age;</span>
<span class="c1">// console.log(name, age);</span>
<span class="c1">// ES6 写法</span>
<span class="kd">let</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
<span class="c1">// 换名字</span>
<span class="kd">let</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="nx">myName</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="nx">myAge</span><span class="p">}</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">myName</span><span class="p">,</span> <span class="nx">myAge</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="4-字符串扩展">4. 字符串扩展</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 字符串模板</span>
<span class="c1">// 1、多行字符串</span>
<span class="kd">let</span> <span class="nx">ss</span> <span class="o">=</span> <span class="s2">`&lt;div&gt;
&lt;span&gt;hello&lt;/span&gt;
&lt;/div&gt;`</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ss</span><span class="p">);</span>

<span class="c1">// 2、字符串插入变量和表达式</span>
<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Tom</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="s2">`My name is </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">, I'm </span><span class="p">${</span><span class="nx">age</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">info</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">fun</span><span class="p">(){</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">have fun</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">info2</span> <span class="o">=</span> <span class="s2">`My name is </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">, I'm </span><span class="p">${</span><span class="nx">age</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2">, I say </span><span class="p">${</span><span class="nx">fun</span><span class="p">()}</span><span class="s2">`</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="5-函数优化">5. 函数优化</h2>

<h3 id="1函数参数的默认值">1）函数参数的默认值</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在ES6以前，我们无法给函数参数设置默认值，只能通过逻辑或运算符来达到目的</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 判断b是否为空，为空则给默认值1</span>
    <span class="nx">b</span> <span class="o">=</span> <span class="nx">b</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// b = b ? b : 1;</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">));</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// NaN</span>

<span class="c1">// 在ES6中，我们可以通过函数参数的默认值来设置参数的默认值</span>
<span class="kd">function</span> <span class="nx">add2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add2</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 2</span>
</code></pre></div></div>

<h3 id="2不定参数">2）不定参数</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 2、 不定参数</span>
<span class="c1">// 1. 使用...args来表示不定参数，args是一个数组</span>
<span class="kd">function</span> <span class="nx">fun</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">fun</span><span class="p">();</span> <span class="c1">// 0</span>
<span class="nx">fun</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 3</span>

<span class="c1">// 2. 如果不定参数不是函数的第一个参数，那么不定参数后面不能再跟其他参数</span>
<span class="c1">// function add6(a, ...args, b) {</span>
<span class="c1">//     console.log(a); // 1</span>
<span class="c1">//     console.log(args); // 报错 SyntaxError: Rest parameter must be last formal parameter</span>
<span class="c1">//     console.log(b); // 报错 SyntaxError: Rest parameter must be last formal parameter</span>
<span class="c1">// }</span>
<span class="c1">// add6(1, 2, 3, 4);</span>

<span class="c1">// 3. 如果函数的参数有默认值，那么不定参数必须放在最后</span>
<span class="kd">function</span> <span class="nx">add7</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// 1</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span> <span class="c1">// 2</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">args</span><span class="p">);</span> <span class="c1">// [3, 4]</span>
<span class="p">}</span>
<span class="nx">add7</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="3箭头函数">3）箭头函数</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 以前声明一个方法(单参数)</span>
<span class="kd">var</span> <span class="nx">print</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">print</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span> <span class="p">});</span> <span class="c1">// { name: '张三' }</span>

<span class="c1">// 箭头函数的声明</span>
<span class="kd">var</span> <span class="nx">print_</span> <span class="o">=</span> <span class="nx">obj</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
<span class="nx">print_</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span> <span class="p">});</span> <span class="c1">// { name: '张三' }</span>

<span class="c1">// 以前声明一个方法(多参数)</span>
<span class="kd">var</span> <span class="nx">add2</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>

<span class="c1">// 箭头函数的声明</span>
<span class="kd">var</span> <span class="nx">add3</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>

<span class="c1">// 方法体内有多行代码</span>
<span class="c1">// 传统</span>
<span class="kd">var</span> <span class="nx">add4</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 箭头函数</span>
<span class="kd">var</span> <span class="nx">add5</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">add5</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">// 3</span>
</code></pre></div></div>

<h3 id="4实战箭头函数结合结构表达式">4）实战：箭头函数结合结构表达式</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="na">language</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">java</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">js</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">],</span>
<span class="p">}</span>
<span class="c1">// 传统</span>
<span class="kd">function</span> <span class="nx">hello</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello, </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 箭头函数</span>
<span class="kd">var</span> <span class="nx">hello2</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello, </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="nx">hello2</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// hello, 张三</span>

<span class="c1">// 箭头函数+解构</span>
<span class="kd">var</span> <span class="nx">hello3</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello, </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
<span class="nx">hello3</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// hello, 张三</span>
</code></pre></div></div>

<h2 id="6-对象优化">6. 对象优化</h2>

<h3 id="1新增的api">1）新增的API</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="na">language</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">javascript</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">python</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">java</span><span class="dl">'</span><span class="p">]</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span><span class="c1">//获取对象所有的键['name', 'age', 'language']</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span><span class="c1">//获取对象所有的值['张三', 18, Array(3)]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">person</span><span class="p">))</span><span class="c1">//获取对象所有的键值对[Array(2), Array(2), Array(2)]</span>

<span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">{</span><span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
<span class="kd">const</span> <span class="nx">source1</span> <span class="o">=</span> <span class="p">{</span><span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="kd">const</span> <span class="nx">source2</span> <span class="o">=</span> <span class="p">{</span><span class="na">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="c1">// Object.assign方法的第一个参数是目标对象，后面的参数是源对象</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source1</span><span class="p">,</span> <span class="nx">source2</span><span class="p">)</span><span class="c1">//合并对象</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span><span class="c1">//{a: 1, b: 2, c: 3}</span>
</code></pre></div></div>

<h3 id="2声明对象简写">2）声明对象简写</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span>
<span class="kd">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">18</span>

<span class="c1">// 传统</span>
<span class="kd">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="nx">age</span><span class="p">}</span>
<span class="c1">// 简写 ES6: 一样的情况可以简写</span>
<span class="kd">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">}</span><span class="c1">//声明对象简写</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">,</span> <span class="nx">person2</span><span class="p">)</span><span class="c1">//{name: '张三', age: 18} {name: '张三', age: 18}</span>
</code></pre></div></div>

<h3 id="3对象的函数属性简写">3）对象的函数属性简写</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">person3</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">,</span>
    <span class="c1">// 以前</span>
    <span class="na">eat</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">food</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">正在吃</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">food</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="c1">// 箭头函数版</span>
    <span class="na">eat2</span><span class="p">:</span> <span class="nx">food</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">正在吃</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">food</span><span class="p">),</span>
    <span class="c1">// 简写</span>
    <span class="nx">eat3</span><span class="p">(</span><span class="nx">food</span><span class="p">)</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">正在吃</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">food</span><span class="p">);}</span>
<span class="p">}</span>
<span class="nx">person3</span><span class="p">.</span><span class="nx">eat</span><span class="p">(</span><span class="dl">'</span><span class="s1">苹果</span><span class="dl">'</span><span class="p">)</span><span class="c1">//张三正在吃苹果</span>
</code></pre></div></div>

<h3 id="4对象拓展运算符">4）对象拓展运算符</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 4. 对象拓展运算符</span>
<span class="c1">// 4.1. 拷贝对象(深拷贝)</span>
<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="c1">// 传统</span>
<span class="kd">const</span> <span class="nx">someone1</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
<span class="nx">someone1</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">person</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
<span class="p">}</span>
<span class="c1">// ES6</span>
<span class="kd">let</span> <span class="nx">someone2</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">person</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">someone2</span><span class="p">)</span><span class="c1">//{name: '张三', age: 18}</span>


<span class="c1">// 4.2. 合并对象</span>
<span class="kd">const</span> <span class="nx">person_with_name</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">张三</span><span class="dl">'</span><span class="p">}</span>
<span class="kd">const</span> <span class="nx">person_with_age</span> <span class="o">=</span> <span class="p">{</span><span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="kd">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{...</span><span class="nx">person_with_name</span><span class="p">,</span> <span class="p">...</span><span class="nx">person_with_age</span><span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person1</span><span class="p">)</span><span class="c1">//{name: '张三', age: 18}</span>
</code></pre></div></div>

<h2 id="7-map和reduce">7. map和reduce</h2>

<h3 id="1map">1）map</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 数组中新增了map和reduce方法</span>
<span class="c1">// map: 映射，将数组中的每个元素映射成另一个值，最终生成一个新数组</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">item</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>
<span class="c1">// 箭头函数简写</span>
<span class="c1">// let arr2 = arr.map(item =&gt; item * 2);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr2</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2reduce">2）reduce</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// reduce: 累加器，将数组中的每个元素累加起来，最终生成一个值，可以设置初始值</span>
<span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">item</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// 箭头函数简写</span>
<span class="c1">// let arr3 = arr.reduce((prev, item) =&gt; prev + item, 0);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr3</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="8-promise">8. Promise</h2>

<p><strong>传统的Ajax写法</strong></p>

<p>首先创建一些json文件</p>

<ul>
  <li>mock
	- user.json
	- course_score_10.json
	- user_course_1.json</li>
</ul>

<p>具体的内容：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">user.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"张三"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"123456"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">course_score_</span><span class="mi">10</span><span class="err">.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
  </span><span class="nl">"score"</span><span class="p">:</span><span class="w"> </span><span class="mi">90</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">user_course_</span><span class="mi">1</span><span class="err">.json</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"chinese"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Ajax调用：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1、查出当前用户信息</span>
<span class="c1">// 2、按照当前用户查出来的ID查询他的课程</span>
<span class="c1">// 3、按照当前课程ID查询他的分数</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mock/user.json</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">success</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 1、查出当前用户信息</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询用户: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
            <span class="na">url</span><span class="p">:</span> <span class="s2">`mock/user_course_</span><span class="p">${</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">,</span>
            <span class="nx">success</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 2、按照当前用户查出来的ID查询他的课程</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询到课程: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
                <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
                    <span class="na">url</span><span class="p">:</span> <span class="s2">`mock/course_score_</span><span class="p">${</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">,</span>
                    <span class="nx">success</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 3、按照当前课程ID查询他的分数</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询到分数: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
                    <span class="p">},</span>
                    <span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">})</span>
            <span class="p">},</span>
            <span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">},</span>
    <span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="1promise语法">1）Promise语法</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// resolve和reject是两个函数</span>
    <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="2处理异步结果">2）处理异步结果</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">obj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// 失败</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="3promise改造以前嵌套方式">3）Promise改造以前嵌套方式</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Promise</span>
  <span class="c1">// 1. Promise可以封装异步操作</span>
  <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// resolve和reject是两个函数</span>
    <span class="c1">// 1. 异步操作</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
      <span class="na">url</span><span class="p">:</span> <span class="dl">'</span><span class="s1">mock/user.json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">success</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 1、查出当前用户信息</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询用户: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
        <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">},</span>
      <span class="na">error</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">});</span>
  <span class="nx">p</span><span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">obj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// 成功</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
        <span class="na">url</span><span class="p">:</span> <span class="s2">`mock/user_course_</span><span class="p">${</span><span class="nx">obj</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">,</span>
        <span class="na">success</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 1、查出当前用户信息</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询到课程: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
          <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
        <span class="p">},</span>
        <span class="na">error</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// 成功</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
      <span class="na">url</span><span class="p">:</span> <span class="s2">`mock/course_score_</span><span class="p">${</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">,</span>
      <span class="na">success</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 1、查出当前用户信息</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">查询到分数: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
      <span class="p">},</span>
      <span class="na">error</span><span class="p">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>

  <span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// 失败</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
  <span class="p">})</span>
</code></pre></div></div>

<h3 id="4优化处理">4）优化处理</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="kd">get</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
          <span class="na">url</span><span class="p">:</span> <span class="nx">url</span><span class="p">,</span>
          <span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
          <span class="na">success</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

          <span class="p">},</span>
          <span class="na">error</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">});</span>
     <span class="p">});</span>
  <span class="p">}</span>

<span class="kd">get</span><span class="p">(</span><span class="s2">`mock/user.json`</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">用户查询成功: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="kd">get</span><span class="p">(</span><span class="s2">`mock/user_course_</span><span class="p">${</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">课程查询成功: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="kd">get</span><span class="p">(</span><span class="s2">`mock/course_score_</span><span class="p">${</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">.json`</span><span class="p">)</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">课程成绩查询成功: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">}).</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">出现错误: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="9-模块化">9. 模块化</h2>

<h3 id="1什么是模块化">1）什么是模块化</h3>

<p>模块化就是把代码进行拆分，方便重复利用。类似java中的导包:要使用一个包，必须先导包。而 JS中没有包的概念，换来的是模块。</p>

<p>模块功能主要由两个命令构成:<code class="language-plaintext highlighter-rouge">export</code>和<code class="language-plaintext highlighter-rouge">import</code>。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">export</code>命令用于规定模块的对外接口。</li>
  <li><code class="language-plaintext highlighter-rouge">import</code>命令用于导入其他模块提供的功能。</li>
</ul>

<h3 id="2export">2）export</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">util</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span><span class="nx">util</span><span class="p">};</span> <span class="c1">//批量导出</span>

</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 起名字 导出导入需要同名</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">util</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 不起名字 导出导入不需要同名</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
    <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// export 不仅可以导出对象，一切JS变量都可以导出；比如：基本类型变量、函数、数组、对象。</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">add</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="3import">3）import</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">util</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./hello</span><span class="dl">"</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">add</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./user</span><span class="dl">"</span>

<span class="nx">util</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span>
<span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>slience_me</name></author><category term="前端" /><summary type="html"><![CDATA[ES6新特性合集]]></summary></entry><entry><title type="html">Linux｜服务器系统重装&amp;amp;SSH&amp;amp;xrdp&amp;amp;CUDA</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/10/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85&SSH&xrdp&cuda/" rel="alternate" type="text/html" title="Linux｜服务器系统重装&amp;amp;SSH&amp;amp;xrdp&amp;amp;CUDA" /><published>2024-10-24T00:00:00+08:00</published><updated>2024-10-24T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/10/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85&amp;SSH&amp;xrdp&amp;cuda</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/10/24/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85&amp;SSH&amp;xrdp&amp;cuda/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="ubuntu系统重装操作合集">Ubuntu系统重装操作合集</h1>

<h2 id="11-系统安装">1.1 系统安装：</h2>

<p>https://blog.csdn.net/Flag_ing/article/details/121908340</p>

<p>/boot : 1G 1024MB  主分区。系统的boot启动引导项安装位置</p>

<p>efi: 1G  主分区</p>

<p>/  : 剩余    主分区。根目录，所有目录的根节点，其下包含很多子目录，如/usr  /tmp等</p>

<p>/home :  2T   逻辑分区。一般放置自己的数据</p>

<p>swap : 64G 65536MB   逻辑分区。交换空间，一般是物理内存的1~2倍就行了</p>

<hr />

<h2 id="12-安装openssh-server">1.2 安装openssh-server</h2>

<blockquote>
  <p>在Ubuntu上安装和配置SSH服务器非常简单。以下是详细的步骤：</p>

  <h3 id="更新系统包">更新系统包</h3>

  <p>在安装任何新软件之前，最好更新现有的软件包，以确保你获得最新的版本。打开终端并运行以下命令：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div>  </div>

  <h3 id="安装openssh服务器">安装OpenSSH服务器</h3>

  <p>Ubuntu使用<code class="language-plaintext highlighter-rouge">openssh-server</code>作为SSH服务器。可以使用以下命令进行安装：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>openssh-server
</code></pre></div>  </div>

  <h3 id="检查ssh服务的状态">检查SSH服务的状态</h3>

  <p>安装完成后，可以检查SSH服务是否正在运行：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status ssh
</code></pre></div>  </div>

  <p>如果显示类似以下内容，说明SSH服务器已成功启动并正在运行：</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>● ssh.service - OpenBSD Secure Shell server
  Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
  Active: active (running) since ...
</code></pre></div>  </div>

  <p>如果SSH服务未运行，可以使用以下命令启动它：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start ssh
</code></pre></div>  </div>

  <p>要确保每次启动系统时SSH自动启动，可以使用：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>ssh
</code></pre></div>  </div>

  <h3 id="配置防火墙以允许ssh">配置防火墙以允许SSH</h3>

  <p>如果你使用<code class="language-plaintext highlighter-rouge">ufw</code>防火墙，可能需要显式允许SSH流量。运行以下命令：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow ssh
</code></pre></div>  </div>

  <h3 id="测试ssh连接">测试SSH连接</h3>

  <p>在本地计算机或其他设备上，可以通过以下命令测试连接到你的Ubuntu系统：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh username@server_ip_address
</code></pre></div>  </div>

  <p>将<code class="language-plaintext highlighter-rouge">username</code>替换为Ubuntu系统的用户名，将<code class="language-plaintext highlighter-rouge">server_ip_address</code>替换为该系统的IP地址。</p>

  <p>你可以通过以下命令查找服务器的IP地址：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip a
</code></pre></div>  </div>

  <h3 id="配置ssh可选">配置SSH（可选）</h3>

  <p>默认情况下，SSH配置文件位于<code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>。可以通过编辑该文件来更改默认设置，例如修改默认的SSH端口、禁用密码认证、启用密钥认证等。</p>

  <p>编辑文件：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/ssh/sshd_config
</code></pre></div>  </div>

  <p>修改后，重新加载SSH服务以应用更改：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart ssh
</code></pre></div>  </div>

  <p>至此，Ubuntu上的SSH服务器已经成功安装并运行。</p>
</blockquote>

<h2 id="13-安装远程连接桌面">1.3 安装远程连接桌面</h2>

<blockquote>
  <p>在Ubuntu上安装并配置远程桌面可以通过多种方式实现，最常见的选项是使用<code class="language-plaintext highlighter-rouge">xrdp</code>与桌面环境结合，让Windows用户通过远程桌面连接（RDP协议）访问Ubuntu桌面。以下是安装和配置远程桌面的详细步骤：</p>

  <h3 id="安装桌面环境如果需要">安装桌面环境（如果需要）</h3>

  <p>如果你使用的是Ubuntu Server或最小化安装版本，你需要首先安装一个桌面环境。最常用的桌面环境是<code class="language-plaintext highlighter-rouge">GNOME</code>，它是Ubuntu默认的桌面环境。你可以通过以下命令来安装完整的Ubuntu桌面：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>ubuntu-desktop
</code></pre></div>  </div>

  <p>如果你希望安装较轻量的桌面环境，比如<code class="language-plaintext highlighter-rouge">Xfce</code>，可以执行以下命令：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>xfce4
</code></pre></div>  </div>

  <h3 id="安装xrdp">安装<code class="language-plaintext highlighter-rouge">xrdp</code></h3>

  <p>安装<code class="language-plaintext highlighter-rouge">xrdp</code>（远程桌面协议服务器），它允许你通过RDP协议远程连接到Ubuntu桌面。</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>xrdp
</code></pre></div>  </div>

  <h3 id="启动和配置xrdp">启动和配置<code class="language-plaintext highlighter-rouge">xrdp</code></h3>

  <p>安装完成后，启动并启用<code class="language-plaintext highlighter-rouge">xrdp</code>服务，使其每次启动系统时自动运行：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>xrdp
<span class="nb">sudo </span>systemctl start xrdp
</code></pre></div>  </div>

  <p>你还可以检查<code class="language-plaintext highlighter-rouge">xrdp</code>服务的状态，以确保它正在运行：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl status xrdp
</code></pre></div>  </div>

  <h3 id="将xrdp与桌面环境关联">将<code class="language-plaintext highlighter-rouge">xrdp</code>与桌面环境关联</h3>

  <p>在<code class="language-plaintext highlighter-rouge">xrdp</code>默认配置中，使用的是<code class="language-plaintext highlighter-rouge">Xfce</code>或<code class="language-plaintext highlighter-rouge">GNOME</code>桌面环境。你可以根据安装的桌面环境来配置<code class="language-plaintext highlighter-rouge">xrdp</code>。</p>

  <p>如果你安装的是<code class="language-plaintext highlighter-rouge">Xfce</code>，需要为<code class="language-plaintext highlighter-rouge">xrdp</code>配置启动Xfce桌面。执行以下命令来创建一个<code class="language-plaintext highlighter-rouge">.xsession</code>文件并将其内容设置为<code class="language-plaintext highlighter-rouge">xfce4-session</code>：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span>xfce4-session <span class="o">&gt;</span>~/.xsession
</code></pre></div>  </div>

  <p>对于GNOME桌面，默认情况下应该无需额外配置。</p>

  <h3 id="配置防火墙以允许rdp">配置防火墙以允许RDP</h3>

  <p>如果你使用<code class="language-plaintext highlighter-rouge">ufw</code>防火墙，需要允许RDP连接（默认端口是3389）：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ufw allow 3389
</code></pre></div>  </div>

  <h3 id="使用远程桌面客户端连接">使用远程桌面客户端连接</h3>

  <p>在Windows、macOS或Linux的远程桌面客户端中输入你的Ubuntu服务器的IP地址，使用RDP协议进行连接。</p>

  <p>在Windows中，打开“远程桌面连接”，输入Ubuntu的IP地址：</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IP_ADDRESS:3389
</code></pre></div>  </div>

  <p>你将看到登录界面，输入Ubuntu的用户名和密码即可访问远程桌面。</p>

  <h3 id="可选配置修改xrdp会话配置文件">可选配置：修改<code class="language-plaintext highlighter-rouge">xrdp</code>会话配置文件</h3>

  <p>如果遇到黑屏或登录失败等问题，可以尝试修改<code class="language-plaintext highlighter-rouge">xrdp</code>配置文件。例如，编辑<code class="language-plaintext highlighter-rouge">/etc/xrdp/startwm.sh</code>文件，在其中找到以下几行并注释掉：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span> <span class="nt">-x</span> /etc/X11/Xsession <span class="o">&amp;&amp;</span> <span class="nb">exec</span> /etc/X11/Xsession
<span class="nb">exec</span> /bin/sh /etc/X11/Xsession
</code></pre></div>  </div>

  <p>然后在这些行的下方添加你想使用的桌面环境。例如，如果你使用<code class="language-plaintext highlighter-rouge">Xfce</code>，可以添加以下内容：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>startxfce4
</code></pre></div>  </div>

  <p>保存并重新启动<code class="language-plaintext highlighter-rouge">xrdp</code>服务：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart xrdp
</code></pre></div>  </div>

  <h3 id="重新连接远程桌面">重新连接远程桌面</h3>

  <p>完成上述步骤后，你应该可以顺利通过远程桌面客户端连接到Ubuntu的桌面环境。</p>

  <p>这样你就完成了Ubuntu的远程桌面配置，之后可以使用任何支持RDP的客户端工具进行远程桌面连接。</p>
</blockquote>

<h2 id="14-用户操作">1.4 用户操作</h2>

<p>查看全部用户<code class="language-plaintext highlighter-rouge">cat /etc/passwd</code>  修改密码<code class="language-plaintext highlighter-rouge"> sudo passwd user</code></p>

<p>新增用户<code class="language-plaintext highlighter-rouge">sudo adduser user</code></p>

<blockquote>
  <p>由于重装系统，原始的用户信息丢失，需要重新创建用户，与home的用户对应上，但是会出现问题，user1:1001旧的，user1:1007 新的，用户目录权限对不上，所以需要该指令<code class="language-plaintext highlighter-rouge">sudo chown -R new_owner:new_group /home/username</code></p>
</blockquote>

<h2 id="15-cuda">1.5 Cuda</h2>

<blockquote>
  <p>CUDA 是 NVIDIA 的并行计算平台和编程模型，用于 GPU 加速计算。安装 CUDA 工具包可以让你使用 GPU 进行高性能计算，<code class="language-plaintext highlighter-rouge">nvcc</code> 则是 CUDA 的编译器。以下是 Ubuntu 上安装 CUDA、<code class="language-plaintext highlighter-rouge">nvcc</code> 等相关工具的详细步骤。</p>

  <h3 id="检查硬件和操作系统兼容性">检查硬件和操作系统兼容性</h3>

  <p>在安装 CUDA 之前，确保你的系统满足以下条件：</p>

  <ul>
    <li>你有一个支持 CUDA 的 NVIDIA 显卡。</li>
    <li>你使用的是 Ubuntu（例如 18.04、20.04 或 22.04 等版本）。</li>
    <li>你已经安装了合适的显卡驱动。</li>
  </ul>

  <h3 id="更新系统">更新系统</h3>

  <p>首先，更新系统的包列表和软件包，确保一切都是最新的：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt upgrade
</code></pre></div>  </div>

  <h3 id="安装-nvidia-驱动">安装 NVIDIA 驱动</h3>

  <p>通常 CUDA 工具包包含 NVIDIA 驱动，但是你也可以手动安装，建议确保安装的驱动是最新的兼容版本。</p>

  <ul>
    <li>
      <p>检查 NVIDIA 显卡是否被识别：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lspci | <span class="nb">grep</span> <span class="nt">-i</span> nvidia
</code></pre></div>      </div>
    </li>
    <li>
      <p>安装最新版本的驱动：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>nvidia-driver-###    <span class="c"># 将 ### 替换为推荐的驱动版本</span>
</code></pre></div>      </div>
    </li>
  </ul>

  <p>你可以使用 <code class="language-plaintext highlighter-rouge">ubuntu-drivers devices</code> 查看推荐的 NVIDIA 驱动版本。</p>

  <h3 id="添加-cuda-相关的存储库">添加 CUDA 相关的存储库</h3>

  <p>访问 <a href="https://developer.nvidia.com/cuda-downloads">NVIDIA CUDA Toolkit 下载页面</a>，选择你对应的操作系统版本并跟随提示。通常可以使用以下步骤添加 CUDA 的存储库：</p>

  <ul>
    <li>
      <p>访问 CUDA 的下载页面，选择你的操作系统，通常会得到类似以下的安装命令：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu<span class="si">$(</span>lsb_release <span class="nt">-sr</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f1</span><span class="si">)</span>/x86_64/cuda-repo-ubuntu<span class="si">$(</span>lsb_release <span class="nt">-sr</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f1</span><span class="si">)</span>_&lt;version&gt;_amd64.deb
<span class="nb">sudo </span>dpkg <span class="nt">-i</span> cuda-repo-ubuntu<span class="si">$(</span>lsb_release <span class="nt">-sr</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f1</span><span class="si">)</span>_&lt;version&gt;_amd64.deb
<span class="nb">sudo </span>apt-key adv <span class="nt">--fetch-keys</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu<span class="si">$(</span>lsb_release <span class="nt">-sr</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="nb">.</span> <span class="nt">-f1</span><span class="si">)</span>/x86_64/7fa2af80.pub
<span class="nb">sudo </span>apt update
</code></pre></div>      </div>
    </li>
    <li>
      <p>我的版本</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
<span class="nb">sudo mv </span>cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/12.6.2/local_installers/cuda-repo-ubuntu2004-12-6-local_12.6.2-560.35.03-1_amd64.deb
<span class="nb">sudo </span>dpkg <span class="nt">-i</span> cuda-repo-ubuntu2004-12-6-local_12.6.2-560.35.03-1_amd64.deb
<span class="nb">sudo cp</span> /var/cuda-repo-ubuntu2004-12-6-local/cuda-<span class="k">*</span><span class="nt">-keyring</span>.gpg /usr/share/keyrings/
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>cuda-toolkit-12-6
</code></pre></div>      </div>
    </li>
  </ul>

  <h3 id="安装-cuda-工具包">安装 CUDA 工具包</h3>

  <p>使用以下命令安装 CUDA 工具包：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>cuda
</code></pre></div>  </div>

  <p>这会安装 CUDA 相关的工具，包括编译器 <code class="language-plaintext highlighter-rouge">nvcc</code>。</p>

  <h3 id="设置环境变量">设置环境变量</h3>

  <p>安装完成后，还需要配置环境变量，才能正确地调用 CUDA 和 <code class="language-plaintext highlighter-rouge">nvcc</code>。可以在 <code class="language-plaintext highlighter-rouge">.bashrc</code> 中添加以下路径：</p>

  <ul>
    <li>
      <p>编辑 <code class="language-plaintext highlighter-rouge">.bashrc</code> 文件：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.bashrc
</code></pre></div>      </div>
    </li>
    <li>
      <p>添加以下行以设置 CUDA 环境变量（假设安装在默认位置 <code class="language-plaintext highlighter-rouge">/usr/local/cuda</code>）：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/cuda/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/usr/local/cuda/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div>      </div>
    </li>
    <li>
      <p>使修改立即生效：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc
</code></pre></div>      </div>
    </li>
  </ul>

  <h3 id="验证-cuda-和-nvcc">验证 CUDA 和 NVCC</h3>

  <p>验证安装是否成功。</p>

  <ul>
    <li>
      <p>检查 NVIDIA 驱动是否工作：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvidia-smi
</code></pre></div>      </div>

      <p>你应该能够看到显卡的状态和驱动程序信息。</p>
    </li>
    <li>
      <p>检查 CUDA 编译器 <code class="language-plaintext highlighter-rouge">nvcc</code>：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">-V</span>
</code></pre></div>      </div>

      <p>你应该看到 <code class="language-plaintext highlighter-rouge">nvcc</code> 版本信息，说明安装成功。</p>
    </li>
  </ul>

  <h3 id="运行-cuda-示例代码可选">运行 CUDA 示例代码（可选）</h3>

  <p>安装 CUDA 工具包后，NVIDIA 通常会提供一些示例代码，可以用来测试 GPU 是否正常工作。</p>

  <ul>
    <li>
      <p>进入 CUDA 示例代码目录：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/local/cuda/samples
</code></pre></div>      </div>
    </li>
    <li>
      <p>编译并运行一个测试程序（例如 <code class="language-plaintext highlighter-rouge">deviceQuery</code>）：</p>

      <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>make
<span class="nb">cd </span>1_Utilities/deviceQuery
./deviceQuery
</code></pre></div>      </div>

      <p>这将会展示 GPU 的一些详细信息，如果能够正确显示，那么说明 CUDA 工作正常。</p>
    </li>
  </ul>

  <h3 id="总结">总结</h3>

  <ol>
    <li><strong>更新系统</strong>：<code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt upgrade</code></li>
    <li><strong>安装 NVIDIA 驱动</strong>：<code class="language-plaintext highlighter-rouge">sudo apt install nvidia-driver-###</code></li>
    <li><strong>添加 CUDA 存储库</strong>：根据 CUDA 下载页面获取存储库地址并添加。</li>
    <li><strong>安装 CUDA 工具包</strong>：<code class="language-plaintext highlighter-rouge">sudo apt install cuda</code></li>
    <li><strong>设置环境变量</strong>：编辑 <code class="language-plaintext highlighter-rouge">.bashrc</code>，添加 CUDA 相关路径。</li>
    <li><strong>验证安装</strong>：运行 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 和 <code class="language-plaintext highlighter-rouge">nvcc -V</code> 验证安装是否成功。</li>
  </ol>

  <p>通过这些步骤，你应该能够在 Ubuntu 上顺利安装 CUDA 工具包，并开始使用 GPU 加速你的计算任务。</p>
</blockquote>]]></content><author><name>slience_me</name></author><category term="Linux" /><summary type="html"><![CDATA[服务器系统重装&SSH,xrdp,CUDA]]></summary></entry><entry><title type="html">Linux｜ubuntu多版本cuda如何指定cuda版本</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/06/21/ubuntu%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9Acuda%E7%89%88%E6%9C%AC/" rel="alternate" type="text/html" title="Linux｜ubuntu多版本cuda如何指定cuda版本" /><published>2024-06-21T00:00:00+08:00</published><updated>2024-06-21T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/06/21/ubuntu%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9Acuda%E7%89%88%E6%9C%AC</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/06/21/ubuntu%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9Acuda%E7%89%88%E6%9C%AC/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="ubuntu多版本cuda如何指定cuda版本">ubuntu多版本cuda如何指定cuda版本</h1>

<h2 id="1-关于cuda设置">1. 关于cuda设置</h2>

<p>在 Ubuntu 系统上选择和管理 CUDA 的多个版本可以通过以下步骤进行：</p>

<h3 id="11-查看当前安装的-cuda-版本">1.1 查看当前安装的 CUDA 版本</h3>
<p>你可以通过以下命令查看当前安装的 CUDA 版本：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">--version</span>
</code></pre></div></div>

<h3 id="12-下载并安装所需的-cuda-版本">1.2 下载并安装所需的 CUDA 版本</h3>
<p>你可以从 <a href="https://developer.nvidia.com/cuda-downloads">NVIDIA CUDA Toolkit 下载页面</a> 下载你需要的 CUDA 版本。选择你的操作系统（Linux）、架构（x86_64）、发行版（Ubuntu）和版本，然后按照提示下载并安装。</p>

<h3 id="13-设置环境变量">1.3 设置环境变量</h3>
<p>每个 CUDA 版本都会安装在不同的目录中，例如 <code class="language-plaintext highlighter-rouge">/usr/local/cuda-10.1</code>, <code class="language-plaintext highlighter-rouge">/usr/local/cuda-10.2</code> 等。你可以通过设置环境变量 <code class="language-plaintext highlighter-rouge">CUDA_HOME</code> 和修改 <code class="language-plaintext highlighter-rouge">PATH</code> 来切换不同的 CUDA 版本。</p>

<p>以下是一个示例脚本，可以根据你需要的 CUDA 版本进行修改：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 切换到 CUDA 10.1</span>
<span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda-10.1
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>

<span class="c"># 切换到 CUDA 10.2</span>
<span class="c"># export CUDA_HOME=/usr/local/cuda-10.2</span>
<span class="c"># export PATH=$CUDA_HOME/bin:$PATH</span>
<span class="c"># export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>你可以将这个脚本添加到你的 <code class="language-plaintext highlighter-rouge">~/.bashrc</code> 或 <code class="language-plaintext highlighter-rouge">~/.zshrc</code> 文件中，或者每次需要切换 CUDA 版本时手动运行这个脚本。</p>

<h3 id="14-验证切换">1.4 验证切换</h3>
<p>切换 CUDA 版本后，可以运行以下命令来验证切换是否成功：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">--version</span>
</code></pre></div></div>

<p>这个命令将显示当前使用的 CUDA 版本。</p>

<h3 id="15-安装对应的-nvidia-驱动程序">1.5 安装对应的 NVIDIA 驱动程序</h3>
<p>确保你安装了与所需 CUDA 版本兼容的 NVIDIA 驱动程序。如果需要更新或切换驱动程序，可以使用以下命令：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>ubuntu-drivers devices
<span class="nb">sudo </span>ubuntu-drivers autoinstall
</code></pre></div></div>

<p>或者你也可以从 <a href="https://www.nvidia.com/Download/index.aspx">NVIDIA 驱动程序下载页面</a> 手动下载并安装所需的驱动程序。</p>

<p>通过以上步骤，你可以在 Ubuntu 系统上管理和切换多个 CUDA 版本。</p>

<h2 id="2-设置环境变量">2. 设置环境变量</h2>
<p>在 Ubuntu 上修改环境变量可以通过编辑 <code class="language-plaintext highlighter-rouge">~/.bashrc</code> 或 <code class="language-plaintext highlighter-rouge">~/.zshrc</code> 文件来实现，具体取决于你使用的是 Bash 还是 Zsh。以下是详细步骤：</p>

<h3 id="21-打开终端">2.1 打开终端</h3>

<h3 id="22-编辑-bashrc-或-zshrc">2.2 编辑 <code class="language-plaintext highlighter-rouge">~/.bashrc</code> 或 <code class="language-plaintext highlighter-rouge">~/.zshrc</code></h3>

<p>如果你使用的是 Bash，编辑 <code class="language-plaintext highlighter-rouge">~/.bashrc</code> 文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.bashrc
</code></pre></div></div>

<p>如果你使用的是 Zsh，编辑 <code class="language-plaintext highlighter-rouge">~/.zshrc</code> 文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nano ~/.zshrc
</code></pre></div></div>

<h3 id="23-添加环境变量">2.3 添加环境变量</h3>

<p>在文件末尾添加以下行来设置 CUDA 环境变量。例如，假设你有两个 CUDA 版本：10.1 和 10.2，你可以按以下方式添加：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 设置 CUDA 10.1 环境变量</span>
<span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda-10.1
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>如果你需要切换到 CUDA 10.2，则可以将上述代码注释掉，并添加如下代码：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 设置 CUDA 10.2 环境变量</span>
<span class="c"># export CUDA_HOME=/usr/local/cuda-10.1</span>
<span class="c"># export PATH=$CUDA_HOME/bin:$PATH</span>
<span class="c"># export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH</span>

<span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda-10.2
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>你也可以使用条件语句来更灵活地切换 CUDA 版本：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 根据需要选择 CUDA 版本</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CUDA_VERSION</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"10.1"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda-10.1
<span class="k">elif</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$CUDA_VERSION</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"10.2"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">export </span><span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda-10.2
<span class="k">fi
</span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/bin:<span class="nv">$PATH</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$CUDA_HOME</span>/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<p>然后在需要切换版本时设置 <code class="language-plaintext highlighter-rouge">CUDA_VERSION</code> 环境变量，例如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">CUDA_VERSION</span><span class="o">=</span>10.1
<span class="nb">source</span> ~/.bashrc  <span class="c"># 或者 source ~/.zshrc</span>
</code></pre></div></div>

<h3 id="24-保存并退出">2.4 保存并退出</h3>

<p>编辑完成后，按 <code class="language-plaintext highlighter-rouge">Ctrl+O</code> 保存文件，然后按 <code class="language-plaintext highlighter-rouge">Ctrl+X</code> 退出编辑器。</p>

<h3 id="25-使更改生效">2.5 使更改生效</h3>

<p>运行以下命令使更改生效：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.bashrc  <span class="c"># 如果使用的是 Bash</span>
<span class="nb">source</span> ~/.zshrc   <span class="c"># 如果使用的是 Zsh</span>
</code></pre></div></div>

<h3 id="26-验证更改">2.6 验证更改</h3>

<p>可以通过以下命令验证环境变量是否设置正确：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$CUDA_HOME</span>
nvcc <span class="nt">--version</span>
</code></pre></div></div>

<p>通过这些步骤，你可以方便地修改和管理环境变量，以切换不同的 CUDA 版本。</p>]]></content><author><name>slience_me</name></author><category term="Linux" /><summary type="html"><![CDATA[ubuntu多版本cuda如何指定cuda版本]]></summary></entry><entry><title type="html">论文笔记｜Transformers in Time Series A Survey综述总结</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/13/Transformers_in_Time_Series_A_Survey%E7%BB%BC%E8%BF%B0%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="论文笔记｜Transformers in Time Series A Survey综述总结" /><published>2024-03-13T00:00:00+08:00</published><updated>2024-03-13T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/13/Transformers_in_Time_Series_A_Survey%E7%BB%BC%E8%BF%B0%E6%80%BB%E7%BB%93</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/13/Transformers_in_Time_Series_A_Survey%E7%BB%BC%E8%BF%B0%E6%80%BB%E7%BB%93/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="img" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />

<h1 id="transformers-in-time-series-a-survey综述总结">Transformers in Time Series A Survey综述总结</h1>

<p>Transformers在自然语言处理和计算机视觉的诸多任务中取得了更优的性能，这也引起了时间序列社区的广大的兴趣。在Transformers的众多优点中，捕获远程依赖关系和交互的能力对于时间序列建模特别具有吸引力，从而在各种时间序列应用中取得了令人兴奋的进展。在本文中，作者团队系统地审查Transformer计划的时间序列建模，突出他们的优点以及局限性。</p>

<p>该文章从两个角度去审视时间序列Transformers的发展</p>

<ul>
  <li>网络结构 ： 总结了Transformers，以适应时间序列分析的挑战，已作出的调整和修改。</li>
  <li>应用：根据预测、异常检测和分类等常见任务对时间序列Transformers进行分类</li>
</ul>

<p>在实证上，进行了稳健性分析，模型大小分析和季节趋势分解分析，以研究Transformers在时间序列中的表现。</p>

<p>最后，讨论和建议未来的研究方向，提供有用的研究指导。</p>

<p><a href="https://arxiv.org/pdf/2202.07125.pdf">文章链接</a></p>

<p><a href="https://github.com/qingsongedu/time-series-transformers-review">文章代码</a></p>

<hr />

<h2 id="1-introduction">1 Introduction</h2>

<p>在过去的几年里，许多Transformer已经被提出来大大提高各种任务的最先进性能。有相当多的文献综述来自不同的方面，例如在NLP应用中[Han et al.，2021]，CV应用[Han等人，2022]和efficient Transformers[Tay等人，2022年]，但尚未有针对时间序列中Transformer应用的全面综述。</p>

<p>在本文中，作者团队的目的是填补时间序列中Transformer应用的全面综述的差距与空白，总结了时间序列Transformers的主要发展。本文首先给予简要的介绍，然后从网络修改和应用领域的角度提出了一个新的分类法的时间序列的Transformers的Vanilla Transformer。</p>

<ul>
  <li>网络修改：讨论了低级别（即模块）和高级别（即架构）的Transformers，以优化时间序列建模的性能的改进。</li>
  <li>应用程序：分析和总结Transformers的流行的时间序列任务，包括预测，异常检测和分类。对于每个时间序列Transformer，分析其见解，优势和局限性。</li>
</ul>

<p>对于每个时间序列Transformer，分析其见解，优势和局限性。并进行了广泛的实证研究，包括鲁棒性分析，模型大小分析和季节趋势分解分析。</p>

<p>讨论了时间序列Transformers未来可能的方向，包括时间序列Transformers的归纳偏差，时间序列的Transformers和GNN，时间序列的预训练Transformers， 具有架构级别变体的Transformers，以及时间序列的NAS Transformers。</p>

<hr />

<h2 id="2-transformer的组成">2 Transformer的组成</h2>

<h2 id="preliminaries-of-the-transformer">Preliminaries of the Transformer</h2>

<h3 id="21-vanilla-transformer">2.1 Vanilla Transformer</h3>

<p>Vanilla Transformer [Vaswani等人，2017]遵循具有编码器-解码器结构的最具竞争力的神经序列模型。编码器和解码器都由多个相同的块组成。每个编码器块由多头自注意模块和位置前馈网络组成，而每个解码器块在多头自注意模块和位置前馈网络之间插入交叉注意模型。</p>

<h3 id="22-输入编码和位置编码-input-encoding-and-positional-encoding">2.2 输入编码和位置编码 Input Encoding and Positional Encoding</h3>

<p>与LSTM或RNN不同，Vanilla Transformer没有递归。相反，它利用在输入嵌入中添加的位置编码来对序列信息进行建模。在下面总结一些位置编码。</p>

<h4 id="绝对位置编码-absolute-positional-encoding">绝对位置编码 Absolute Positional Encoding</h4>

<p>在vanilla Transformer中，对于每个位置索引t，编码向量由下式给出：</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312095102733.png" alt="image-20240312095102733" /></p>

<p>其中ω<sub>i</sub>是每个维度的手工频率。另一种方法是为每个位置学习一组位置嵌入，这更灵活[Meson等人，2019; Gehring等人，2017年]。</p>

<h4 id="相对位置编码-relative-positional-encoding">相对位置编码 Relative Positional Encoding</h4>

<p>根据对输入元素之间的成对位置关系更有益的直觉，提出了相对位置编码方法。例如，其中一种方法是向注意机制的关键添加可学习的相对位置嵌入。</p>

<p>除了绝对和相对位置编码之外，还有一些使用混合位置编码的方法将它们结合在一起 。通常，位置编码被添加到标记嵌入中并馈送到Transformer。</p>

<table>
  <tbody>
    <tr>
      <td>参考解读: <a href="https://blog.csdn.net/Slience_me/article/details/136644309">CSDN</a></td>
      <td><a href="https://slienceme.cn/2024/03/12/%E7%BB%9D%E5%AF%B9%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81%E4%B8%8E%E7%9B%B8%E5%AF%B9%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81%E5%8C%BA%E5%88%AB/">个人博客</a></td>
    </tr>
  </tbody>
</table>

<h3 id="23-多头注意力-multi-head-attention">2.3 多头注意力 Multi-head Attention</h3>

<p>通过查询-关键字-值（QKV）模型，Transformer使用的缩放点积注意力由下式给出：</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312154830337.png" alt="image-20240312154830337" /></p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312151303004.png" alt="image-20240312151303004" /></p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312154854919.png" alt="image-20240312154854919" /></p>

<table>
  <tbody>
    <tr>
      <td>参考解读: <a href="https://blog.csdn.net/Slience_me/article/details/136644704">CSDN</a></td>
      <td><a href="https://slienceme.cn/2024/03/12/%E6%B3%A8%E6%84%8F%E5%8A%9B-%E8%87%AA%E6%B3%A8%E6%84%8F%E5%8A%9B%E5%92%8C%E5%A4%9A%E5%A4%B4%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84%E5%8C%BA%E5%88%AB/">个人博客</a></td>
    </tr>
  </tbody>
</table>

<h3 id="24-前馈和残差网络简单放在这">2.4 前馈和残差网络(简单放在这)</h3>

<p>前馈网络是一个完全连接的模块，</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312154756144.png" alt="image-20240312154756144" /></p>

<p>在更深的模块中，在每个模块周围插入一个残余连接模块，然后是一个层规范化模块。</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312155740176.png" alt="image-20240312155740176" /></p>

<hr />

<h2 id="3-时间序列中的transformers的分类-taxonomy-of-transformers-in-time-series">3 时间序列中的Transformers的分类 Taxonomy of Transformers in Time Series</h2>

<p>为了总结现有的时间序列Transformers，作者团队从网络修改和应用领域的角度提出了一个分类，如下图所示。</p>

<p>在此基础上，对已有的时间序列Transformers进行了系统的回顾。</p>

<ul>
  <li>从网络修改的角度，总结了Transformer的模块级和架构级的变化，以适应时间序列建模的特殊挑战。</li>
  <li>从应用的角度出发，根据时间序列Transformers的应用任务进行分类，包括预测、异常检测和分类。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/TS_Xformer_V2.jpg" alt="TS_Xformer_V2" /></p>

<hr />

<h2 id="4-时间序列的网络修改-network-modifications-for-time-series">4 时间序列的网络修改 Network Modifications for Time Series</h2>

<h3 id="41-位置编码-positional-encoding">4.1 位置编码 Positional Encoding</h3>

<p>由于时间序列的顺序很重要，因此将输入时间序列的位置编码到Transformer中非常重要。一个常见的设计是首先将位置信息编码为向量，然后将它们与输入时间序列一起作为额外的输入注入到模型中。在使用Transformer建模时间序列时，如何获取这些向量可以分为三个主要类别。</p>

<p>总结：</p>

<ol>
  <li><strong>原始位置编码(Vanilla Positional Encoding)</strong>：<u>简单地添加到输入时间序列嵌入中，但无法充分利用时间序列数据的特征。</u>一些研究[Li等人，2019]简单介绍了在[Vaswani等，2017]中使用的原始位置编码（第2.2节），该编码随后被添加到输入时间序列的嵌入中，并馈送到Transformer。</li>
  <li><strong>可学习位置编码(Learnable Positional Encoding)</strong>：<u>通过学习适当的位置嵌入，比固定的原始位置编码更灵活，可以更好地适应特定任务。</u>[Zerveas等人，2021]在Transformer中引入了一个嵌入层，该层与其他模型参数一起学习每个位置索引的嵌入向量。[Lim等人，2021] 使用LSTM网络来编码位置嵌入，可以更好地利用时间序列中的顺序信息。</li>
  <li><strong>时间戳编码(Timestamp Encoding)</strong>：<u>利用时间戳信息，将其编码为附加的位置编码，提高了对时间序列数据的利用效率。</u>时间戳信息包括日历时间戳（例如，秒、分钟、小时、周、月和年）和特殊时间戳（例如假期和事件）。这些时间戳具有信息量但在原始的Transformer中很少被利用。为了缓解这个问题，<a href="https://arxiv.org/abs/2012.07436">Informer</a> [Zhou等，2021] 提议使用可学习的嵌入层将时间戳编码为附加的位置编码。类似的时间戳编码方案还在<a href="https://arxiv.org/abs/2106.13008">Autoformer</a> [Wu等，2021] 和<a href="https://arxiv.org/abs/2201.12740">FEDformer</a> [Zhou等，2022] 中使用过。</li>
</ol>

<h3 id="42-注意力模块-attention-module">4.2 注意力模块 Attention Module</h3>

<p>Transformer的核心是自注意力模块。它可以被视为一个完全连接的层，其权重根据输入模式之间的成对相似性动态生成。因此，它与完全连接层具有相同的最大路径长度，但参数数量较少，适合建模长期依赖关系。(Transformer的计算优化主要就集中在self attention的计算熵)</p>

<p>原始Transformer中的自注意力模块的时间和内存复杂度为O(N<sup>2</sup>)（N为输入时间序列的长度），当处理长序列时，这成为计算瓶颈。</p>

<p>许多高效的Transformer被提出来减少二次复杂度，可分为两个主要类别：</p>

<ol>
  <li><u>显式地引入稀疏偏置到注意力机制中</u>，如<a href="https://arxiv.org/abs/1907.00235">LogTrans</a> [Li等，2019] 和<a href="https://openreview.net/pdf?id=0EXmFzUn5I">Pyraformer</a> [Liu等，2022a]；</li>
  <li><u>探索自注意力矩阵的低秩性质以加速计算</u>，例如<a href="https://openreview.net/pdf?id=0EXmFzUn5I">Informer</a> [Zhou等，2021] 和<a href="https://arxiv.org/abs/2201.12740">FEDformer</a> [Zhou等，2022]。</li>
</ol>

<p>表1显示了应用于时间序列建模的流行Transformer的时间和内存复杂度</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240312163906392.png" alt="image-20240312163906392" /></p>

<h3 id="43-基于架构的注意力创新-architecture-based-attention-innovation">4.3 基于架构的注意力创新 Architecture-based Attention Innovation</h3>

<p>为了适应Transformer中用于建模时间序列的各个模块，一些研究[Zhou等，2021；Liu等，2022a]试图在架构层面上对Transformer进行改进。</p>

<ul>
  <li>
    <p>最近的研究引入了<strong>分层架构</strong>到Transformer中，使其具有整合不同多分辨率特征，高效计算的好处，有利于高效处理长时间序列。</p>
  </li>
  <li><a href="https://arxiv.org/abs/2012.07436">Informer</a>[Zhou等，2021]在注意力块之间插入了步幅为2的最大池化层，将时间序列降采样为其一半。</li>
  <li><a href="https://openreview.net/pdf?id=0EXmFzUn5I">Pyraformer</a>[Liu等，2022a]设计了基于C-ary树的注意力机制，其中最细粒度的节点对应于原始时间序列，而较粗粒度的节点表示较低分辨率的时间序列。开发了内尺度和间尺度的注意力，以更好地捕捉不同分辨率之间的时间依赖关系。</li>
</ul>

<h2 id="5-时间序列transformer的应用-applications-of-time-series-transformers">5 时间序列Transformer的应用 Applications of Time Series Transformers</h2>

<h3 id="51-transformers-in-forecasting">5.1 Transformers in Forecasting</h3>

<p>在最近几年中，已经开展了大量工作来设计新的Transformer变体，用于时间序列预测任务。模块级别和架构级别变体是两个主要类别，前者占到了迄今为止的大多数研究。</p>

<h4 id="时间序列的预测-time-series-forecasting">时间序列的预测 Time Series Forecasting</h4>

<h5 id="模块级变体">模块级变体</h5>

<p>在时间序列预测的模块级别变体中，它们的主要架构类似于原始的Transformer，但存在细微变化。研究人员引入各种时间序列归纳偏差来设计新的模块。以下总结的工作包括三种不同类型：设计新的注意力模块、探索归一化时间序列数据的创新方式，以及利用令牌输入的偏差，如下图所示。</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240313083924700.png" alt="image-20240313083924700" /></p>

<p>模块级别Transformer的第一种变体类型是<strong>设计新的注意力模块</strong>，这是比例最大的类别。以下首先描述了六个典型的工作：</p>

<ol>
  <li><strong>LogTrans</strong> [Li等，2019]:  <a href="https://arxiv.org/abs/1907.00235">论文</a>
    <ul>
      <li>提出了卷积自注意力，利用因果卷积生成自注意力层中的查询和键。</li>
      <li>引入了稀疏偏置（Logsparse掩码），将计算复杂度从O(N<sup>2</sup>)降低到O(N log<sub>N</sub>)。</li>
    </ul>
  </li>
  <li><strong>Informer</strong> [Zhou等，2021]: <a href="https://arxiv.org/abs/2012.07436">论文</a>
    <ul>
      <li>未使用显式的稀疏偏置，而是基于查询和键的相似性选择主要查询。</li>
      <li>设计了一种生成式解码器，直接产生长期预测，避免了长期预测中的累积误差。</li>
    </ul>
  </li>
  <li><strong>AST</strong> [Wu等，2020a]: <a href="https://proceedings.neurips.cc/paper/2020/file/c6b8c8d762da15fa8dbbdfb6baf9e260-Paper.pdf">论文</a>
    <ul>
      <li>使用生成对抗编码器-解码器框架，训练稀疏Transformer模型进行时间序列预测。</li>
      <li>表明通过直接塑造网络的输出分布来避免通过一步推断导致误差积累，对于改善时间序列预测具有积极作用。</li>
    </ul>
  </li>
  <li><strong>Pyraformer</strong> [Liu等，2022a]: <a href="https://openreview.net/pdf?id=0EXmFzUn5I">论文</a>
    <ul>
      <li>设计了分层的金字塔式注意力模块，通过沿路径遵循二叉树来捕获不同范围的时间依赖关系。</li>
      <li>具有线性时间和内存复杂性。</li>
    </ul>
  </li>
  <li><strong>FEDformer</strong> [Zhou等，2022]: <a href="https://arxiv.org/abs/2201.12740">论文</a>
    <ul>
      <li>在频域中应用注意力操作，使用傅立叶变换和小波变换。</li>
      <li>通过随机选择固定大小的频率子集实现了线性复杂度。</li>
    </ul>
  </li>
  <li><strong>Quatformer</strong> [Chen等，2022]: <a href="https://dl.acm.org/doi/abs/10.1145/3534678.3539234">论文</a>
    <ul>
      <li>提出了基于四元数的学习旋转注意力（LRA），引入可学习的周期和相位信息来描述复杂的周期模式。</li>
      <li>使用全局内存解耦了LRA以实现线性复杂度。</li>
    </ul>
  </li>
</ol>

<p>第一类模块级别的变体<strong>旨在建立模型的显式解释能力</strong>，符合可解释人工智能（XAI）的趋势。其中有以下三项工作：</p>

<ol>
  <li><strong>TFT</strong> [Lim等，2021]： <a href="https://arxiv.org/abs/1912.09363">论文</a>
    <ul>
      <li>设计了一个多时间跨度的预测模型，具有静态协变量编码器、门控特征选择和时间自注意解码器。</li>
      <li>从各种协变量中编码和选择有用信息来执行预测。</li>
      <li>通过整合全局、时间依赖和事件等信息，保持了可解释性。</li>
    </ul>
  </li>
  <li><strong>ProTran</strong> [Tang和Matteson，2021] 和 SSDNet [Lin等，2021]：<a href="https://proceedings.neurips.cc/paper_files/paper/2021/file/c68bd9055776bf38d8fc43c0ed283678-Paper.pdf">论文</a>
    <ul>
      <li>将Transformer与状态空间模型(state space model)结合，提供概率预测。</li>
      <li>ProTran设计了一个基于变分推理的生成建模和推理过程。</li>
      <li>SSDNet首先使用Transformer学习时间模式，估计SSM的参数，然后应用SSM进行季节趋势分解，保持了可解释性。</li>
    </ul>
  </li>
  <li><strong>SSDNet</strong> [Lin等，2021]：<a href="https://arxiv.org/pdf/2112.10251.pdf">论文</a>
    <ul>
      <li>将Transformer与状态空间模型结合，提供概率预测。</li>
      <li>首先使用Transformer学习时间模式，估计SSM的参数，然后应用SSM进行季节趋势分解，保持了可解释性。</li>
    </ul>
  </li>
</ol>

<p>第二类模块级别的变体是<strong>标准化时间序列数据的方式</strong>。</p>

<p>目前据作者团队所知，唯一专注于修改标准化机制的工作是 <a href="https://arxiv.org/abs/2205.14415">Non-stationary Transformer</a> [Liu等，2022b]。该工作探讨了时间序列预测任务中的过度平稳化问题，提出了相对简单的插件系列平稳化和非平稳化模块，以修改和提升各种注意力块的性能。</p>

<p>第三类模块级别的变体是<strong>利用令牌输入的偏差</strong>。其中：</p>

<ul>
  <li>
    <p><strong>Autoformer</strong> [Wu等，2021] 采用基于分段的表示机制，设计了一个简单的季节趋势分解架构，其中自相关机制充当注意力模块，通过度量输入信号的时延相似性，并聚合前k个相似的子序列，以降低复杂度。<a href="https://arxiv.org/abs/2106.13008">论文</a></p>
  </li>
  <li>
    <p><strong>PatchTST</strong> [Nie等，2023] 利用通道独立性，每个通道包含一个单变量时间序列，所有序列共享相同的嵌入，以及子序列级别的补丁设计，将时间序列分段成子序列级别的补丁，作为输入令牌输入到Transformer。这种ViT样式的设计在长时间序列预测任务中提高了数值性能。<a href="https://arxiv.org/abs/2211.14730">论文</a></p>
  </li>
  <li>
    <p><strong>Cross-former</strong> [Zhang和Yan，2023] 提出了一种基于Transformer的模型，利用跨维度依赖进行多变量时间序列预测。输入通过新颖的维度分段嵌入转换为二维向量数组，以保留时间和维度信息。然后，使用两阶段注意力层来有效地捕获跨时间和跨维度的依赖关系。<a href="https://openreview.net/pdf?id=vSVLM2j9eie">论文</a></p>
  </li>
</ul>

<h5 id="架构级变体">架构级变体</h5>

<p>一些工作开始设计超出基本Transformer范围的新Transformer架构。其中：</p>

<ol>
  <li><strong>Triformer</strong> [Cirstea等，2022]：<a href="https://arxiv.org/abs/2204.13767">论文</a>
    <ul>
      <li>设计了一个三角形的、变量特定的补丁注意力。</li>
      <li>使用三角形树状结构，随着后续输入尺寸呈指数级缩小。</li>
      <li>通过一组变量特定的参数，使得多层Triformer保持轻量级和线性复杂度。</li>
    </ul>
  </li>
  <li><strong>Scaleformer</strong> [Shabani等，2023]：<a href="https://arxiv.org/abs/2206.04038">论文</a>
    <ul>
      <li>提出了一个多尺度框架，适用于基于Transformer的时间序列预测模型（如FEDformer [Zhou等，2022]，Autoformer [Wu等，2021]等）。</li>
      <li>通过共享权重，在多个尺度上迭代地细化预测的时间序列，以提高基线模型的性能。</li>
    </ul>
  </li>
</ol>

<h4 id="时空预测-spatio-temporal-forecasting">时空预测 Spatio-Temporal Forecasting</h4>

<p>在时空预测中，时间序列Transformer考虑了时间和时空依赖关系，以实现准确的预测。具体而言：</p>

<ol>
  <li><strong>Traffic Transformer</strong> [Cai等，2020]：<a href="https://weirdgiser.site/publication/traffic-transformer-capturing-the-continuity-and-periodicity-of-time-series-for-traffic-forecasting/traffic-transformer-capturing-the-continuity-and-periodicity-of-time-series-for-traffic-forecasting.pdf">论文</a>
    <ul>
      <li>设计了一个编码器-解码器结构，使用自注意力模块捕获时间-时间依赖关系，以及使用图神经网络模块捕获空间依赖关系。</li>
    </ul>
  </li>
  <li><strong>Spatial-temporal Transformer</strong> [Xu等，2020]：<a href="https://arxiv.org/pdf/2001.02908.pdf">论文</a>
    <ul>
      <li>在交通流量预测中，引入了时间Transformer块以捕获时间依赖关系，并设计了一个空间Transformer块，结合图卷积网络，更好地捕获空间-空间依赖关系。</li>
    </ul>
  </li>
  <li><strong>Spatio-temporal graph Transformer</strong> [Yu等，2020]：<a href="https://link.springer.com/chapter/10.1007/978-3-030-58610-2_30">论文</a>
    <ul>
      <li>设计了一个基于注意力的图卷积机制，能够学习复杂的时空注意力模式，以改善行人轨迹预测。</li>
    </ul>
  </li>
  <li><strong>Earthformer</strong> [Gao等，2022]：<a href="https://proceedings.neurips.cc/paper_files/paper/2022/file/a2affd71d15e8fedffe18d0219f4837a-Paper-Conference.pdf">论文</a>
    <ul>
      <li>提出了一个立方体注意力机制，用于高效的时空建模，将数据分解成立方体，并并行应用立方体级别的自注意力。</li>
      <li>在天气和气候预测中表现出优异的性能。</li>
    </ul>
  </li>
  <li><strong>AirFormer</strong> [Liang等，2023]：<a href="https://ojs.aaai.org/index.php/AAAI/article/view/26676/26448">论文</a>
    <ul>
      <li>设计了一个飞镖形式的空间自注意力模块和一个因果形式的时间自注意力模块，以有效捕获空间相关性和时间依赖关系。</li>
      <li>此外，它通过潜在变量增强了Transformer，以捕获数据的不确定性并改善空气质量预测。</li>
    </ul>
  </li>
</ol>

<h4 id="事件预测-event-forecasting">事件预测 Event Forecasting</h4>

<p>在许多实际应用中，事件序列数据具有不规则和异步的时间戳，这与具有相等采样间隔的规则时间序列数据形成对比。事件预测旨在根据过去事件的历史来预测未来事件的时间和标记，通常通过时间点过程（TPP）[Yan等，2019；Shchur等，2021]来建模。最近，一些神经TPP模型将Transformer纳入其中，以提高事件预测的性能。具体而言：</p>

<ol>
  <li><strong>Self-attentive Hawkes process (SAHP)</strong> [Zhang等，2020] 和 <strong>Transformer Hawkes process (THP)</strong> [Zuo等，2020]：
    <ul>
      <li>采用Transformer编码器架构来总结历史事件的影响并计算事件预测的强度函数。</li>
      <li>通过将时间间隔转换为正弦函数来修改位置编码，以利用事件之间的间隔。</li>
    </ul>
  </li>
  <li><strong>Attentive neural datalog through time (ANDTT)</strong> [Mei等，2022]：
    <ul>
      <li>提出了一种更加灵活的方案，通过注意力将所有可能的事件和时间进行嵌入。</li>
      <li>实验表明，它能够比现有方法更好地捕捉复杂的事件依赖关系。</li>
    </ul>
  </li>
</ol>

<h3 id="52-异常检测中的transformer">5.2 异常检测中的Transformer</h3>

<p>基于Transformer的架构也有助于时间序列异常检测任务，因为它能够建模时间依赖关系，从而提高检测质量。具体而言：</p>

<ol>
  <li><strong>TranAD</strong> [Tuli等，2022]：<a href="https://arxiv.org/pdf/2201.07284.pdf">论文</a>
    <ul>
      <li>提出了一种对抗训练过程，通过增加重建误差来放大异常的小偏差。</li>
      <li>使用两个Transformer编码器和两个Transformer解码器设计了GAN风格的对抗训练过程，以获得稳定性。</li>
    </ul>
  </li>
  <li>MT-RVAE [Wang等，2022] 和 TransAnomaly [Zhang等，2021]：
    <ul>
      <li>将变分自编码器（VAE）与Transformer相结合，以允许更多的并行化，并将训练成本降低近80%。</li>
      <li>MT-RVAE设计了一个多尺度Transformer来提取和整合不同尺度的时间序列信息，克服了传统Transformer只提取局部信息用于顺序分析的缺点。</li>
    </ul>
  </li>
  <li><strong>GTA</strong> [Chen等，2021c]：
    <ul>
      <li>将Transformer与基于图的学习架构结合起来，用于多变量时间序列异常检测。</li>
      <li>GTA包含图卷积结构来建模影响传播过程，通过替换基础多头注意力机制，考虑了“全局”信息。</li>
    </ul>
  </li>
  <li><strong>AnomalyTrans</strong> [Xu等，2022]：
    <ul>
      <li>结合Transformer和高斯先验关联，使异常更加可区分。</li>
      <li>采用最小最大策略来优化异常模型，约束先验关联和序列关联，以获得更可区分的关联差异。</li>
    </ul>
  </li>
</ol>

<h3 id="53-分类中的transformer">5.3 分类中的Transformer</h3>

<p>Transformer已被证明在各种时间序列分类任务中具有有效性，因为它在捕捉长期依赖方面的显著能力。具体而言：</p>

<ol>
  <li>GTN [Liu等，2021]：
    <ul>
      <li>使用两塔Transformer，其中每个塔分别处理时间步级别的注意力和通道级别的注意力。</li>
      <li>通过可学习的加权连接（也称为“门控”）来合并两塔的特征。</li>
      <li>在13个多变量时间序列分类任务中实现了最先进的结果。</li>
    </ul>
  </li>
  <li>Rußwurm和Körner [2020]：
    <ul>
      <li>研究了基于自注意力的Transformer用于原始光学卫星时间序列分类，并与循环神经网络和卷积神经网络进行了比较，取得了最佳结果。</li>
    </ul>
  </li>
  <li>TARNet [Chowdhury等，2022]：
    <ul>
      <li>设计了Transformer来学习任务感知的数据重构，增强了分类性能。</li>
      <li>利用注意力分数进行重要时间戳的掩蔽和重构，带来了更优越的性能。</li>
    </ul>
  </li>
</ol>

<p>另外，还研究了预训练的Transformer在分类任务中的应用：</p>

<ol>
  <li>Yuan和Lin [2020]：
    <ul>
      <li>研究了用于原始光学卫星图像时间序列分类的Transformer，并使用自监督预训练模式，因为标记数据有限。</li>
    </ul>
  </li>
  <li>Zerveas等 [2021]：
    <ul>
      <li>引入了无监督预训练框架，该模型使用按比例屏蔽的数据进行预训练。</li>
      <li>预训练模型随后在分类等下游任务中进行微调。</li>
    </ul>
  </li>
  <li>Yang等 [2021]：
    <ul>
      <li>提出使用大规模预训练的语音处理模型解决下游时间序列分类问题，在30个流行的时间序列分类数据集上生成了19个具有竞争力的结果。</li>
    </ul>
  </li>
</ol>

<h2 id="6-实验评估与讨论-experimental-evaluation-and-discussion">6 实验评估与讨论 Experimental Evaluation and Discussion</h2>

<p>对典型的具有挑战性的基准数据集ETTm2 [Zhou等，2021] 进行了初步的实证研究，以分析Transformer如何处理时间序列数据。由于经典的统计ARIMA/ETS [Hyndman和Khandakar，2008]模型和基本的RNN/CNN模型在这个数据集上的表现不如Transformer，因此重点关注了实验中具有不同配置的流行时间序列Transformer。</p>

<h3 id="鲁棒性分析">鲁棒性分析</h3>

<p>上面描述的许多工作都精心设计了注意力模块，以降低二次计算和内存复杂度，尽管它们实际上使用了一个短的固定大小的输入来在报告的实验中取得最佳结果。这让作者团队对这种高效设计的实际用途产生了疑问。进行了一项鲁棒性实验，延长了输入序列长度，以验证它们处理长期输入序列时的预测能力和鲁棒性。</p>

<h3 id="模型大小分析">模型大小分析</h3>

<p>在被引入到时间序列预测领域之前，Transformer已经在NLP和CV社区表现出卓越的性能。Transformer在这些领域的一个关键优势是能够通过增加模型大小来提高预测能力。通常，模型容量由Transformer的层数控制，通常设置在12到128之间。然而，当在表3的实验中比较具有不同层数的不同Transformer模型的预测结果时，通常3到6层的Transformer会取得更好的结果。</p>

<h3 id="季节性趋势分解分析">季节性趋势分解分析</h3>

<p>在最近的研究中，研究人员开始意识到季节性趋势分解是Transformer在时间序列预测中性能的关键部分。作为表4中的一个实验所示，采用了在[Wu等，2021]中提出的简单移动平均季节性趋势分解架构来测试各种注意力模块。可以看出，简单的季节性趋势分解模型可以显著提升模型的性能，提高50%到80%。这是一个独特的模块，通过分解来提升性能似乎是时间序列预测中Transformer应用的一个一致现象，值得进一步探索更先进和精心设计的时间序列分解方案。</p>

<p><img src="https://raw.githubusercontent.com/slience-me/picGo/master/images/image-20240313100826602.png" alt="image-20240313100826602" /></p>

<h2 id="7-未来研究机会-future-research-opportunities">7 未来研究机会 Future Research Opportunities</h2>

<p>在时间序列中，Transformer 的未来研究方向可以从以下几个方面着手：</p>

<h3 id="71-时间序列transformer的归纳偏差">7.1 时间序列Transformer的归纳偏差</h3>

<p>当前的基本Transformer对数据模式和特征没有任何假设。然而，时间序列数据的一个关键特征是其季节性/周期性和趋势模式。一些最近的研究表明，将系列周期性或频率处理纳入时间序列Transformer中可以显著提高性能。此外，一些研究采用了一种看似相反的归纳偏差，但都取得了良好的数值改进。因此，未来的一个方向是根据对时间序列数据的理解和特定任务特性，考虑更有效的方式将归纳偏差引入Transformer中。</p>

<h3 id="72-用于时间序列的transformer和gnn">7.2 用于时间序列的Transformer和GNN</h3>

<p>在应用中，多变量和时空序列变得越来越常见，需要额外的技术来处理高维度数据，特别是捕获维度之间的潜在关系。引入图神经网络(GNN)是一种自然的方式来建模空间依赖性或维度之间的关系。最近的几项研究表明，GNN和Transformer/注意力的组合不仅可以带来显著的性能提升，如交通预测和多模态预测，还能更好地理解时空动态和潜在因果关系。将Transformer和GNN结合起来有效地进行时间序列的时空建模是一个重要的未来方向。</p>

<h3 id="73-用于时间序列的预训练transformer">7.3 用于时间序列的预训练Transformer</h3>

<p>大规模的预训练Transformer模型已经显著提升了NLP和CV等领域各种任务的性能。然而，针对时间序列的预训练Transformer研究有限，现有研究主要集中在时间序列分类上。因此，如何为时间序列中的不同任务开发适当的预训练Transformer模型，仍然需要在未来进行研究。</p>

<h3 id="74-transformer与体系结构级别的变体">7.4 Transformer与体系结构级别的变体</h3>

<p>大多数发展中的时间序列Transformer模型都保持了基本Transformer的架构，并主要在注意力模块上进行修改。因此，未来的一个方向是考虑更多的体系结构级别设计，专门针对时间序列数据和任务进行优化。</p>

<h3 id="75-用于时间序列的nas-transformers">7.5 用于时间序列的NAS Transformers</h3>

<p>超参数，如嵌入维度和头/层的数量，很大程度上会影响Transformer的性能。手动配置这些超参数是耗时的，而且往往导致次优性能。自动ML技术如神经架构搜索(NAS)已成为发现有效深度神经网络架构的流行技术。在近期的研究中，可以发现NLP和CV领域利用NAS自动化Transformer设计的研究。对于行业规模的时间序列数据，这是一个具有实际重要性的方向，自动发现既具有记忆又具有计算效率的Transformer架构，是时间序列Transformer的一个重要未来方向。</p>

<h2 id="8-结论-conclusion">8 结论 Conclusion</h2>

<p>作者团队提供了一份关于时间序列Transformer的调查报告。将审查的方法组织成一个新的分类体系，包括网络设计和应用。并总结了每个类别中的代表性方法，通过实验评估讨论它们的优点和局限性，并突出未来的研究方向。</p>]]></content><author><name>slience_me</name></author><category term="论文笔记" /><summary type="html"><![CDATA[Transformers in Time Series A Survey综述总结]]></summary></entry><entry><title type="html">论文笔记｜encoding和embedding的区别</title><link href="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/12/encoding%E5%92%8Cembedding%E7%9A%84%E5%8C%BA%E5%88%AB/" rel="alternate" type="text/html" title="论文笔记｜encoding和embedding的区别" /><published>2024-03-12T00:00:00+08:00</published><updated>2024-03-12T00:00:00+08:00</updated><id>https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/12/encoding%E5%92%8Cembedding%E7%9A%84%E5%8C%BA%E5%88%AB</id><content type="html" xml:base="https://blog.slienceme.cn/pages/slience-me/slienceme.github.io/2024/03/12/encoding%E5%92%8Cembedding%E7%9A%84%E5%8C%BA%E5%88%AB/"><![CDATA[<p><img src="/images/posts/logo_slienceme3.png" alt="在这里插入图片描述" /></p>

<p>本文作者： <a href="https://slienceme.cn/">slience_me</a></p>

<hr />
<h1 id="encoding和embedding的区别">encoding和embedding的区别</h1>

<p>“Embedding” 和 “Encoding” 是两个在计算机科学和机器学习领域中常用的术语，它们虽然有些相似，但指代的概念和用途有所不同。</p>

<p>## Embedding</p>
<ul>
  <li>在自然语言处理（NLP）和图像处理等领域中， <strong>Embedding 通常指将高维度的数据映射到低维度的空间中</strong> 。例如，在NLP中，词嵌入（Word Embedding）是将单词映射到低维度的实数向量空间中的技术，其中每个单词都被表示为一个稠密的实数向量。这样的向量表示捕捉了单词之间的语义关系，常用的词嵌入模型包括Word2Vec、GloVe和BERT。</li>
  <li>在图像处理中，图像嵌入（Image Embedding）类似于将图像编码为向量形式的表示，使得计算机能够更好地理解图像的内容。通常使用深度学习模型（如卷积神经网络）来学习图像的嵌入。</li>
</ul>

<blockquote>
  <p>采用Word Embedding，假设我们有一个句子：“猫坐在地毯上”。在词嵌入中，每个单词（如“猫”、“坐”、“地毯”等）都被映射为一个实数向量，以便计算机能够更好地理解这些单词之间的语义关系。 我们可以使用预训练的词嵌入模型（如Word2Vec或GloVe），将每个单词映射为一个低维度的实数向量。例如，“猫”可能被映射为[-0.5, 0.8, -0.3]，“坐”可能被映射为[0.2, -0.6, 0.9]，以此类推。
词嵌入（Word Embedding）主要关注于将单词映射到连续的实数向量空间中，以捕捉单词之间的语义关系。</p>
</blockquote>

<h2 id="encoding">Encoding</h2>
<ul>
  <li>
    <p>编码是将数据转换为特定格式或形式的过程。 <strong>编码可以是将原始数据转换为适合存储或传输的形式，也可以是将数据转换为表示的形式，以便进一步处理。</strong> 在计算机编程中，编码通常指将数据转换为比特流的过程，比如将字符转换为ASCII码或UTF-8编码。</p>
  </li>
  <li>
    <p>在机器学习领域中，编码也可以指将输入数据转换为机器学习模型可以处理的格式的过程。例如，将分类变量转换为数字形式的过程称为编码（如独热编码）。</p>
  </li>
</ul>

<blockquote>
  <p>采用One-Hot Encoding，例如，对于句子“猫坐在地毯上”，如果我们有一个词汇表包含[“猫”, “坐”, “地毯”, “上”]，那么“猫”可能被编码为[1, 0, 0, 0]，“坐”可能被编码为[0, 1, 0, 0]，以此类推。
One-Hot Encoding 则是将单词编码为稀疏的二进制向量，以便计算机能够处理。</p>
</blockquote>

<h2 id="总结">总结</h2>

<p>总的来说，Embedding 更多地关注于将数据映射到低维度空间以捕捉其语义信息，而 Encoding 则更多地关注于将数据转换为特定格式或表示的过程。在某些情况下，两者的概念可能会有所重叠，但它们通常在不同的上下文中使用。</p>]]></content><author><name>slience_me</name></author><category term="论文笔记" /><summary type="html"><![CDATA[encoding和embedding的区别]]></summary></entry></feed>